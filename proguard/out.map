CrackmeKt -> CrackmeKt:
    void main(java.lang.String[]) -> main
CrackmeKt$main$main$1$1$1 -> a:
    org.objectweb.asm.tree.LabelNode $ts -> a
    org.objectweb.asm.tree.LabelNode $te -> b
    org.objectweb.asm.tree.LabelNode $th -> c
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode) -> <init>
CrackmeKt$main$main$1$1$1$1 -> b:
    kotlin.reflect.KProperty0 INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Object get() -> get
arrow.Kind -> a.a:
arrow.core.Eval -> a.a.a:
    arrow.core.Eval$Companion Companion -> a
    java.lang.Object value() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(byte) -> <init>
arrow.core.Eval$Always -> a.a.b:
    kotlin.jvm.functions.Function0 f -> a
    java.lang.Object value() -> a
    void <init>(kotlin.jvm.functions.Function0) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Eval$Companion -> a.a.c:
    arrow.core.Eval defer(kotlin.jvm.functions.Function0) -> a
    arrow.core.Eval collapse(arrow.core.Eval) -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    arrow.core.ListK k(java.util.List) -> a
    boolean NonFatal(java.lang.Throwable) -> a
    arrow.core.Validated valid(java.lang.Object) -> a
    arrow.core.Validated invalid(java.lang.Object) -> b
    com.sksamuel.hoplite.Node fallback(com.sksamuel.hoplite.Node,com.sksamuel.hoplite.Node) -> a
    arrow.core.Validated flatMap(arrow.core.Validated,kotlin.jvm.functions.Function1) -> a
    kotlin.Lazy lazy(kotlin.jvm.functions.Function0) -> a
    kotlin.Lazy lazy(kotlin.LazyThreadSafetyMode,kotlin.jvm.functions.Function0) -> a
    void throwOnFailure(java.lang.Object) -> a
    kotlin.Pair to(java.lang.Object,java.lang.Object) -> a
    java.util.List listOf(java.lang.Object) -> a
    java.util.List shuffled(java.lang.Iterable,java.util.Random) -> a
    java.util.Collection asCollection(java.lang.Object[]) -> a
    java.util.List listOf(java.lang.Object[]) -> a
    java.util.ArrayList arrayListOf(java.lang.Object[]) -> a
    java.util.List listOfNotNull(java.lang.Object) -> b
    java.util.List listOfNotNull(java.lang.Object[]) -> b
    kotlin.ranges.IntRange getIndices(java.util.Collection) -> a
    int getLastIndex(java.util.List) -> a
    java.util.List optimizeReadOnlyList(java.util.List) -> a
    void throwIndexOverflow() -> a
    void throwCountOverflow() -> b
    java.util.Map mapOf(kotlin.Pair) -> a
    java.util.Map toSingletonMap(java.util.Map) -> c
    int mapCapacity(int) -> a
    java.util.Set setOf(java.lang.Object) -> a
    java.util.Set setOf(java.lang.Object[]) -> a
    java.util.Set mutableSetOf(java.lang.Object[]) -> b
    java.util.Set optimizeReadOnlySet(java.util.Set) -> a
    int compareValues(java.lang.Comparable,java.lang.Comparable) -> a
    int getLabel(kotlin.coroutines.jvm.internal.BaseContinuationImpl) -> a
    int mod(int,int) -> c
    int differenceModulo(int,int,int) -> a
    long copyTo$default$bbc35e0$40e8aa04(java.io.InputStream,java.io.OutputStream) -> a
    byte[] readBytes(java.io.InputStream) -> a
    void closeFinally(java.io.Closeable,java.lang.Throwable) -> a
    byte[] readBytes(java.io.File) -> a
    java.lang.Class getJavaClass(kotlin.reflect.KClass) -> a
    java.lang.Class getJavaPrimitiveType(kotlin.reflect.KClass) -> b
    java.lang.Class getJavaObjectType(kotlin.reflect.KClass) -> c
    kotlin.reflect.KClass getKotlinClass(java.lang.Class) -> a
    kotlin.reflect.KClass getAnnotationClass(java.lang.annotation.Annotation) -> a
    java.util.Iterator iterator(java.lang.Object[]) -> a
    kotlin.ranges.IntProgression downTo(int,int) -> a
    kotlin.ranges.IntProgression step$347ced58(kotlin.ranges.IntProgression) -> a
    kotlin.ranges.IntRange until(int,int) -> a
    int coerceAtLeast(int,int) -> a
    int coerceAtMost(int,int) -> b
    boolean isWhitespace(char) -> a
    int checkRadix(int) -> b
    boolean equals$4811cba3(char,char) -> a
    kotlin.text.MatchResult access$findNext(java.util.regex.Matcher,int,java.lang.CharSequence) -> a
    void appendElement(java.lang.Appendable,java.lang.Object,kotlin.jvm.functions.Function1) -> a
    java.lang.Integer collectionSizeOrNull(java.lang.Iterable) -> a
    int collectionSizeOrDefault(java.lang.Iterable,int) -> a
    java.util.Map mapOf(kotlin.Pair[]) -> a
    void putAll(java.util.Map,kotlin.Pair[]) -> a
    void putAll(java.util.Map,java.lang.Iterable) -> a
    java.util.Map toMap(java.lang.Iterable) -> a
    java.util.Map toMap(java.lang.Iterable,java.util.Map) -> a
    java.util.Map toMap(java.util.Map) -> a
    java.util.Map toMutableMap(java.util.Map) -> b
    java.util.Set plus(java.util.Set,java.lang.Object) -> a
    java.util.Set plus(java.util.Set,java.lang.Iterable) -> a
    java.lang.String getExtension(java.io.File) -> a
arrow.core.Eval$Companion$$special$$inlined$let$lambda$1 -> a.a.d:
    arrow.core.Eval$FlatMap $currComp$inlined -> a
    void <init>(arrow.core.Eval$FlatMap) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
arrow.core.Eval$Companion$collapse$1 -> a.a.e:
    arrow.core.Eval $fa -> a
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    void <init>(arrow.core.Eval) -> <init>
arrow.core.Eval$Companion$evaluate$1$1 -> a.a.f:
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
arrow.core.Eval$Companion$evaluate$1$1$1 -> a.a.g:
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
arrow.core.Eval$Companion$evaluate$1$2$inStartFun$1 -> a.a.h:
    arrow.core.Eval $cc -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(arrow.core.Eval) -> <init>
arrow.core.Eval$Defer -> a.a.i:
    kotlin.jvm.functions.Function0 thunk -> a
    java.lang.Object value() -> a
    void <init>(kotlin.jvm.functions.Function0) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Eval$FlatMap -> a.a.j:
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    java.lang.Object value() -> a
    void <init>() -> <init>
arrow.core.Eval$Memoize -> a.a.k:
    java.lang.Object value() -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Eval$Now -> a.a.l:
    java.lang.Object value -> a
    java.lang.Object value() -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Eval$flatMap$1 -> a.a.m:
    arrow.core.Eval this$0 -> a
    kotlin.jvm.functions.Function1 $f -> a
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    void <init>(arrow.core.Eval,kotlin.jvm.functions.Function1) -> <init>
arrow.core.Eval$flatMap$1$run$1 -> a.a.n:
    arrow.core.Eval$flatMap$1 this$0 -> a
    java.lang.Object $s -> a
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    void <init>(arrow.core.Eval$flatMap$1,java.lang.Object) -> <init>
arrow.core.Eval$flatMap$2 -> a.a.o:
    arrow.core.Eval this$0 -> a
    kotlin.jvm.functions.Function1 $f -> a
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    void <init>(arrow.core.Eval,kotlin.jvm.functions.Function1) -> <init>
arrow.core.Eval$flatMap$3 -> a.a.p:
    arrow.core.Eval this$0 -> a
    kotlin.jvm.functions.Function1 $f -> a
    arrow.core.Eval start() -> a
    arrow.core.Eval run(java.lang.Object) -> a
    void <init>(arrow.core.Eval,kotlin.jvm.functions.Function1) -> <init>
arrow.core.Eval$map$1 -> a.a.q:
    kotlin.jvm.functions.Function1 $f -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.jvm.functions.Function1) -> <init>
arrow.core.ListK -> a.a.r:
    java.util.List list -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(java.util.List) -> <init>
    void <clinit>() -> <clinit>
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.util.List access$getList$p(arrow.core.ListK) -> a
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    java.lang.Object remove(int) -> remove
    void replaceAll(java.util.function.UnaryOperator) -> replaceAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object set(int,java.lang.Object) -> set
    void sort(java.util.Comparator) -> sort
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
arrow.core.ListK$Companion -> a.a.s:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.ListK$foldRight$1 -> a.a.t:
    arrow.core.Eval $lb -> a
    kotlin.jvm.functions.Function2 $f -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    arrow.core.Eval invoke(arrow.core.ListK) -> a
    void <init>(arrow.core.Eval,kotlin.jvm.functions.Function2) -> <init>
arrow.core.ListK$foldRight$1$1 -> a.a.u:
    arrow.core.ListK$foldRight$1 this$0 -> a
    arrow.core.ListK $fa_p -> a
    java.lang.Object invoke() -> invoke
    void <init>(arrow.core.ListK$foldRight$1,arrow.core.ListK) -> <init>
arrow.core.ListK$foldRight$2 -> a.a.v:
    arrow.core.ListK this$0 -> a
    arrow.core.ListK$foldRight$1 $loop$1 -> a
    java.lang.Object invoke() -> invoke
    void <init>(arrow.core.ListK,arrow.core.ListK$foldRight$1) -> <init>
arrow.core.ListK$traverse$1 -> a.a.w:
    arrow.typeclasses.Applicative $GA -> a
    java.lang.Object invoke() -> invoke
    void <init>(arrow.typeclasses.Applicative) -> <init>
arrow.core.ListK$traverse$2 -> a.a.x:
    arrow.typeclasses.Applicative $GA -> a
    kotlin.jvm.functions.Function1 $f -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>(arrow.typeclasses.Applicative,kotlin.jvm.functions.Function1) -> <init>
arrow.core.ListK$traverse$2$1$1 -> a.a.y:
    arrow.core.ListK$traverse$2$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.core.NonEmptyList -> a.a.z:
    java.lang.Object head -> a
    java.util.List tail -> a
    java.util.List all -> b
    arrow.core.NonEmptyList$Companion Companion -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.Object,java.util.List,java.util.List) -> <init>
    void <init>(java.lang.Object,java.util.List) -> <init>
    void <init>(java.util.List) -> <init>
    void <clinit>() -> <clinit>
arrow.core.NonEmptyList$Companion -> a.a.A:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.None -> a.a.B:
    arrow.core.None INSTANCE -> a
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.core.Option -> a.a.C:
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(byte) -> <init>
arrow.core.Option$Companion -> a.a.D:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.PredefKt -> a.a.E:
    java.lang.Object identity(java.lang.Object) -> a
arrow.core.Some -> a.a.F:
    java.lang.Object t -> a
    java.lang.String toString() -> toString
    void <init>(java.lang.Object) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Try -> a.a.G:
    arrow.core.Try$Companion Companion -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(byte) -> <init>
arrow.core.Try$Companion -> a.a.H:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.Try$Failure -> a.a.I:
    java.lang.Throwable exception -> a
    void <init>(java.lang.Throwable) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Try$Success -> a.a.J:
    java.lang.Object value -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Tuple2 -> a.a.K:
    java.lang.Object a -> a
    java.lang.Object b -> b
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    void <clinit>() -> <clinit>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Tuple2$Companion -> a.a.L:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.Validated -> a.a.M:
    arrow.core.Validated$Companion Companion -> a
    arrow.core.Validated bimap(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> a
    arrow.core.Validated map(kotlin.jvm.functions.Function1) -> a
    arrow.core.Validated leftMap(kotlin.jvm.functions.Function1) -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(byte) -> <init>
arrow.core.Validated$Companion -> a.a.N:
    void <init>() -> <init>
    void <init>(byte) -> <init>
arrow.core.Validated$Invalid -> a.a.O:
    java.lang.Object e -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Validated$Valid -> a.a.P:
    java.lang.Object a -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
arrow.core.Validated$leftMap$1 -> a.a.Q:
    kotlin.jvm.functions.Function1 $f -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.jvm.functions.Function1) -> <init>
arrow.core.Validated$leftMap$2 -> a.a.R:
    arrow.core.Validated$leftMap$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.core.Validated$map$1 -> a.a.S:
    arrow.core.Validated$map$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.core.Validated$map$2 -> a.a.T:
    kotlin.jvm.functions.Function1 $f -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.jvm.functions.Function1) -> <init>
arrow.core.extensions.ListKTraverse -> a.a.a.a:
arrow.core.extensions.ListKTraverse$DefaultImpls -> a.a.a.b:
    java.lang.String KOTLIN_JVM_FUNCTIONS -> KOTLIN_JVM_FUNCTIONS
    void <init>() -> <init>
    kotlin.reflect.KClass createKotlinClass(java.lang.Class) -> createKotlinClass
    kotlin.reflect.KClass createKotlinClass(java.lang.Class,java.lang.String) -> createKotlinClass
    kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String) -> getOrCreateKotlinPackage
    kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class) -> getOrCreateKotlinClass
    kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class,java.lang.String) -> getOrCreateKotlinClass
    java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda) -> renderLambdaToString
    java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase) -> renderLambdaToString
    kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference) -> function
    kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0) -> property0
    kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0) -> mutableProperty0
    kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1) -> property1
    kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1) -> mutableProperty1
    kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2) -> property2
    kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2) -> mutableProperty2
    kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean) -> typeOf
    kotlin.reflect.KTypeParameter typeParameter(java.lang.Object,java.lang.String,kotlin.reflect.KVariance,boolean) -> typeParameter
    void setUpperBounds(kotlin.reflect.KTypeParameter,java.util.List) -> setUpperBounds
arrow.core.extensions.NonEmptyListSemigroup -> a.a.a.c:
arrow.core.extensions.NonEmptyListSemigroup$DefaultImpls -> a.a.a.d:
    java.util.ArrayList list -> a
    void <init>(int) -> <init>
    void addSpread(java.lang.Object) -> a
    void add(java.lang.Object) -> b
    java.lang.Object[] toArray(java.lang.Object[]) -> a
arrow.core.extensions.ValidatedApplicative -> a.a.a.e:
    arrow.typeclasses.Semigroup SE() -> a
arrow.core.extensions.ValidatedFunctor -> a.a.a.f:
arrow.core.extensions.list.traverse.List -> a.a.a.a.a.a:
    arrow.core.extensions.list.traverse.List INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.core.extensions.list.traverse.ListKTraverseKt -> a.a.a.a.a.b:
    arrow.core.extensions.ListKTraverse traverse_singleton -> a
    arrow.Kind sequence(java.util.List,arrow.typeclasses.Applicative) -> a
    void <clinit>() -> <clinit>
arrow.core.extensions.list.traverse.ListKTraverseKt$traverse_singleton$1 -> a.a.a.a.a.c:
    void <init>() -> <init>
    arrow.Kind map(arrow.Kind,kotlin.jvm.functions.Function1) -> a
    arrow.Kind traverse(arrow.Kind,arrow.typeclasses.Applicative,kotlin.jvm.functions.Function1) -> a
    arrow.Kind sequence(arrow.Kind,arrow.typeclasses.Applicative) -> a
arrow.core.extensions.nonemptylist.semigroup.NonEmptyListSemigroupKt -> a.a.a.b.a.a:
    arrow.core.extensions.NonEmptyListSemigroup semigroup_singleton -> a
    arrow.core.extensions.NonEmptyListSemigroup getSemigroup_singleton() -> a
    void <clinit>() -> <clinit>
arrow.core.extensions.nonemptylist.semigroup.NonEmptyListSemigroupKt$semigroup_singleton$1 -> a.a.a.b.a.b:
    void <init>() -> <init>
    java.lang.Object combine(java.lang.Object,java.lang.Object) -> a
arrow.typeclasses.Applicative -> a.b.a:
    arrow.Kind just(java.lang.Object) -> a
arrow.typeclasses.Apply -> a.b.b:
    arrow.Kind ap(arrow.Kind,arrow.Kind) -> a
    arrow.Kind map2(arrow.Kind,arrow.Kind,kotlin.jvm.functions.Function1) -> a
    arrow.core.Eval map2Eval(arrow.Kind,arrow.core.Eval,kotlin.jvm.functions.Function1) -> a
    arrow.Kind product(arrow.Kind,arrow.Kind) -> b
arrow.typeclasses.Apply$DefaultImpls -> a.b.c:
arrow.typeclasses.Apply$map2Eval$1 -> a.b.d:
    arrow.typeclasses.Apply this$0 -> a
    arrow.Kind $this_map2Eval -> a
    kotlin.jvm.functions.Function1 $f -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(arrow.typeclasses.Apply,arrow.Kind,kotlin.jvm.functions.Function1) -> <init>
arrow.typeclasses.Apply$product$1 -> a.b.e:
    arrow.typeclasses.Apply$product$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
arrow.typeclasses.Apply$product$1$1 -> a.b.f:
    java.lang.Object $a -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(java.lang.Object) -> <init>
arrow.typeclasses.Functor -> a.b.g:
    arrow.Kind map(arrow.Kind,kotlin.jvm.functions.Function1) -> a
arrow.typeclasses.Semigroup -> a.b.h:
    java.lang.Object combine(java.lang.Object,java.lang.Object) -> a
arrow.typeclasses.Traverse -> a.b.i:
    arrow.Kind traverse(arrow.Kind,arrow.typeclasses.Applicative,kotlin.jvm.functions.Function1) -> a
    arrow.Kind sequence(arrow.Kind,arrow.typeclasses.Applicative) -> a
arrow.typeclasses.Traverse$DefaultImpls -> a.b.j:
arrow.typeclasses.Traverse$sequence$1 -> a.b.k:
    arrow.typeclasses.Traverse$sequence$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigException -> b.a.a.a:
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
com.sksamuel.hoplite.ConfigFailure -> b.a.a.b:
    java.lang.String description() -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.ConfigFailure$EmptyDecoderRegistry -> b.a.a.c:
    com.sksamuel.hoplite.ConfigFailure$EmptyDecoderRegistry INSTANCE -> a
    java.lang.String description() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigFailure$MultipleFailures -> b.a.a.d:
    arrow.core.NonEmptyList failures -> a
    java.lang.String description() -> a
    void <init>(arrow.core.NonEmptyList) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.ConfigFailure$MultipleFailures$description$1 -> b.a.a.e:
    com.sksamuel.hoplite.ConfigFailure$MultipleFailures$description$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigFailure$NoDataClassDecoder -> b.a.a.f:
    com.sksamuel.hoplite.ConfigFailure$NoDataClassDecoder INSTANCE -> a
    java.lang.String description() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigFailure$NoSuchDecoder -> b.a.a.g:
    kotlin.reflect.KType type -> a
    java.lang.String description() -> a
    void <init>(kotlin.reflect.KType) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.ConfigFailure$NoSuchParser -> b.a.a.h:
    java.lang.String file -> a
    java.util.Map map -> a
    java.lang.String description() -> a
    void <init>(java.lang.String,java.util.Map) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.ConfigFailure$UnknownSource -> b.a.a.i:
    java.lang.String source -> a
    java.lang.String description() -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.ConfigFilePropertySource -> b.a.a.j:
    com.sksamuel.hoplite.FileSource file -> a
    com.sksamuel.hoplite.parsers.ParserRegistry parserRegistry -> a
    arrow.core.Validated node() -> a
    void <init>(com.sksamuel.hoplite.FileSource,com.sksamuel.hoplite.parsers.ParserRegistry) -> <init>
com.sksamuel.hoplite.ConfigFilePropertySource$node$1 -> b.a.a.k:
    com.sksamuel.hoplite.ConfigFilePropertySource this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(com.sksamuel.hoplite.ConfigFilePropertySource) -> <init>
com.sksamuel.hoplite.ConfigLoader -> b.a.a.l:
    com.sksamuel.hoplite.decoder.DecoderRegistry decoderRegistry -> a
    java.util.List propertySources -> a
    com.sksamuel.hoplite.parsers.ParserRegistry parserRegistry -> a
    java.util.List preprocessors -> b
    java.util.List paramMappers -> c
    com.sksamuel.hoplite.ConfigLoader$Companion Companion -> a
    java.lang.Object returnOrThrow(arrow.core.Validated) -> a
    arrow.core.Validated loadNode(java.util.List) -> a
    void <init>(com.sksamuel.hoplite.decoder.DecoderRegistry,java.util.List,com.sksamuel.hoplite.parsers.ParserRegistry,java.util.List,java.util.List) -> <init>
    void <clinit>() -> <clinit>
    arrow.core.Validated access$decode$5babfdb9(com.sksamuel.hoplite.ConfigLoader,kotlin.reflect.KClass) -> a
    com.sksamuel.hoplite.decoder.DecoderRegistry access$getDecoderRegistry$p(com.sksamuel.hoplite.ConfigLoader) -> a
    java.util.List access$getParamMappers$p(com.sksamuel.hoplite.ConfigLoader) -> a
    java.util.List access$getPreprocessors$p(com.sksamuel.hoplite.ConfigLoader) -> b
com.sksamuel.hoplite.ConfigLoader$Companion -> b.a.a.m:
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.ConfigLoader$decode$1 -> b.a.a.n:
    com.sksamuel.hoplite.ConfigLoader this$0 -> a
    kotlin.reflect.KClass $kclass -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(com.sksamuel.hoplite.ConfigLoader,kotlin.reflect.KClass) -> <init>
com.sksamuel.hoplite.ConfigLoader$loadConfig$4 -> b.a.a.o:
    com.sksamuel.hoplite.ConfigLoader this$0 -> a
    kotlin.reflect.KClass $klass -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(com.sksamuel.hoplite.ConfigLoader,kotlin.reflect.KClass) -> <init>
com.sksamuel.hoplite.ConfigLoader$loadNode$2 -> b.a.a.p:
    com.sksamuel.hoplite.ConfigLoader$loadNode$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigLoader$loadNode$3 -> b.a.a.q:
    com.sksamuel.hoplite.ConfigLoader$loadNode$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ConfigLoader$returnOrThrow$1 -> b.a.a.r:
    com.sksamuel.hoplite.ConfigLoader$returnOrThrow$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.ContainerNode -> b.a.a.s:
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.DecoderContext -> b.a.a.t:
    com.sksamuel.hoplite.decoder.DecoderRegistry decoders -> a
    java.util.List paramMappers -> a
    java.util.List preprocessors -> b
    void <init>(com.sksamuel.hoplite.decoder.DecoderRegistry,java.util.List,java.util.List) -> <init>
    void <clinit>() -> <clinit>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.DecoderContext$Companion -> b.a.a.u:
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.DefaultParamMapper -> b.a.a.v:
    com.sksamuel.hoplite.DefaultParamMapper INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.EnvironmentVariablesPropertySource -> b.a.a.w:
    com.sksamuel.hoplite.EnvironmentVariablesPropertySource INSTANCE -> a
    arrow.core.Validated node() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.FileSource -> b.a.a.x:
    com.sksamuel.hoplite.FileSource$Companion Companion -> a
    arrow.core.Validated open() -> a
    java.lang.String describe() -> a
    java.lang.String ext() -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.FileSource$Companion -> b.a.a.y:
    arrow.core.Validated fromPaths(java.util.List) -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.FileSource$Companion$fromPaths$2 -> b.a.a.z:
    com.sksamuel.hoplite.FileSource$Companion$fromPaths$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.FileSource$PathSource -> b.a.a.A:
    java.nio.file.Path path -> a
    java.lang.String describe() -> a
    java.lang.String ext() -> b
    arrow.core.Validated open() -> a
    void <init>(java.nio.file.Path) -> <init>
com.sksamuel.hoplite.FileSource$PathSource$open$2 -> b.a.a.B:
    com.sksamuel.hoplite.FileSource$PathSource this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(com.sksamuel.hoplite.FileSource$PathSource) -> <init>
com.sksamuel.hoplite.KebabCaseParamMapper -> b.a.a.C:
    com.sksamuel.hoplite.KebabCaseParamMapper INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.MapNode -> b.a.a.D:
    java.util.Map map -> a
    com.sksamuel.hoplite.Pos pos -> a
    com.sksamuel.hoplite.Node value -> a
    com.sksamuel.hoplite.Node atKey(java.lang.String) -> a
    com.sksamuel.hoplite.Pos getPos() -> a
    void <init>(java.util.Map,com.sksamuel.hoplite.Pos,com.sksamuel.hoplite.Node) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.Node -> b.a.a.E:
    com.sksamuel.hoplite.Pos getPos() -> a
    com.sksamuel.hoplite.Node atKey(java.lang.String) -> a
com.sksamuel.hoplite.ParameterMapper -> b.a.a.F:
com.sksamuel.hoplite.Pos -> b.a.a.G:
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.Pos$FilePos -> b.a.a.H:
    java.lang.String source -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.Pos$NoPos -> b.a.a.I:
    com.sksamuel.hoplite.Pos$NoPos INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.PrimitiveNode -> b.a.a.J:
    com.sksamuel.hoplite.Node atKey(java.lang.String) -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.sksamuel.hoplite.PropertySource -> b.a.a.K:
    arrow.core.Validated node() -> a
com.sksamuel.hoplite.SnakeCaseParamMapper -> b.a.a.L:
    com.sksamuel.hoplite.SnakeCaseParamMapper INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.StringNode -> b.a.a.M:
    java.lang.String value -> a
    com.sksamuel.hoplite.Pos pos -> a
    com.sksamuel.hoplite.Pos getPos() -> a
    void <init>(java.lang.String,com.sksamuel.hoplite.Pos) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.sksamuel.hoplite.SystemPropertiesPropertySource -> b.a.a.N:
    com.sksamuel.hoplite.SystemPropertiesPropertySource INSTANCE -> a
    arrow.core.Validated node() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.Undefined -> b.a.a.O:
    com.sksamuel.hoplite.Pos pos -> a
    com.sksamuel.hoplite.Undefined INSTANCE -> a
    com.sksamuel.hoplite.Pos getPos() -> a
    com.sksamuel.hoplite.Node atKey(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.UserSettingsPropertySource -> b.a.a.P:
    com.sksamuel.hoplite.parsers.ParserRegistry parserRegistry -> a
    java.nio.file.Path path(java.lang.String) -> a
    arrow.core.Validated node() -> a
    void <init>(com.sksamuel.hoplite.parsers.ParserRegistry) -> <init>
com.sksamuel.hoplite.UserSettingsPropertySource$node$1 -> b.a.a.Q:
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
com.sksamuel.hoplite.arrow.ValidationsKt -> b.a.a.a.a:
    arrow.core.Validated sequence(java.util.List) -> a
com.sksamuel.hoplite.arrow.ValidationsKt$sequence$$inlined$applicative$1 -> b.a.a.a.b:
    arrow.typeclasses.Semigroup $SE -> a
    void <init>(arrow.typeclasses.Semigroup) -> <init>
    arrow.typeclasses.Semigroup SE() -> a
    arrow.Kind just(java.lang.Object) -> a
    arrow.Kind map(arrow.Kind,kotlin.jvm.functions.Function1) -> a
    arrow.Kind ap(arrow.Kind,arrow.Kind) -> a
    arrow.Kind map2(arrow.Kind,arrow.Kind,kotlin.jvm.functions.Function1) -> a
    arrow.core.Eval map2Eval(arrow.Kind,arrow.core.Eval,kotlin.jvm.functions.Function1) -> a
    arrow.Kind product(arrow.Kind,arrow.Kind) -> b
com.sksamuel.hoplite.arrow.ValidationsKt$sequence$2 -> b.a.a.a.c:
    com.sksamuel.hoplite.arrow.ValidationsKt$sequence$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.decoder.Decoder -> b.a.a.b.a:
    boolean supports$780f04bd() -> a
    arrow.core.Validated decode$6567699f() -> a
com.sksamuel.hoplite.decoder.DecoderRegistry -> b.a.a.b.b:
    com.sksamuel.hoplite.decoder.DecoderRegistry$Companion Companion -> a
    arrow.core.Validated decoder(kotlin.reflect.KClass) -> a
    com.sksamuel.hoplite.decoder.DecoderRegistry register(com.sksamuel.hoplite.decoder.Decoder) -> a
    int getSize() -> a
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.decoder.DecoderRegistry$Companion -> b.a.a.b.c:
    com.sksamuel.hoplite.decoder.DecoderRegistry zero -> a
    com.sksamuel.hoplite.decoder.DecoderRegistry$Companion $$INSTANCE -> a
    com.sksamuel.hoplite.decoder.DecoderRegistry getZero() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.decoder.DefaultDecoderRegistry -> b.a.a.b.d:
    int size -> a
    java.util.List decoders -> a
    arrow.core.Validated decoder(kotlin.reflect.KClass) -> a
    com.sksamuel.hoplite.decoder.DecoderRegistry register(com.sksamuel.hoplite.decoder.Decoder) -> a
    int getSize() -> a
    void <init>(java.util.List) -> <init>
com.sksamuel.hoplite.decoder.DefaultDecoderRegistry$decoder$1 -> b.a.a.b.e:
    com.sksamuel.hoplite.decoder.DefaultDecoderRegistry$decoder$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.parsers.DefaultParserRegistry -> b.a.a.c.a:
    java.util.Map map -> a
    arrow.core.Validated locate(java.lang.String) -> a
    java.util.Set registeredExtensions() -> a
    com.sksamuel.hoplite.parsers.ParserRegistry register(java.lang.String,com.sksamuel.hoplite.parsers.Parser) -> a
    void <init>(java.util.Map) -> <init>
com.sksamuel.hoplite.parsers.LoadPropsKt -> b.a.a.c.b:
    com.sksamuel.hoplite.Node toNode(java.util.Properties,java.lang.String) -> a
com.sksamuel.hoplite.parsers.LoadPropsKt$toNode$2 -> b.a.a.c.c:
    com.sksamuel.hoplite.Pos$FilePos $pos -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    com.sksamuel.hoplite.Node invoke(java.util.Map) -> a
    void <init>(com.sksamuel.hoplite.Pos$FilePos) -> <init>
com.sksamuel.hoplite.parsers.Parser -> b.a.a.c.d:
    com.sksamuel.hoplite.Node load$50053e8d() -> a
    java.util.List defaultFileExtensions() -> a
com.sksamuel.hoplite.parsers.ParserRegistry -> b.a.a.c.e:
    com.sksamuel.hoplite.parsers.ParserRegistry$Companion Companion -> a
    arrow.core.Validated locate(java.lang.String) -> a
    com.sksamuel.hoplite.parsers.ParserRegistry register(java.lang.String,com.sksamuel.hoplite.parsers.Parser) -> a
    java.util.Set registeredExtensions() -> a
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.parsers.ParserRegistry$Companion -> b.a.a.c.f:
    com.sksamuel.hoplite.parsers.ParserRegistry zero -> a
    com.sksamuel.hoplite.parsers.ParserRegistry$Companion $$INSTANCE -> a
    com.sksamuel.hoplite.parsers.ParserRegistry getZero() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.EnvVarPreprocessor -> b.a.a.d.a:
    com.sksamuel.hoplite.preprocessor.EnvVarPreprocessor INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor -> b.a.a.d.b:
    kotlin.jvm.functions.Function1 oldRule -> a
    kotlin.jvm.functions.Function1 intRule -> b
    kotlin.jvm.functions.Function1 booleanRule -> c
    kotlin.jvm.functions.Function1 intWithMaxRule -> d
    kotlin.jvm.functions.Function1 intWithRangeRule -> e
    kotlin.jvm.functions.Function1 longRule -> f
    kotlin.jvm.functions.Function1 doubleRule -> g
    kotlin.jvm.functions.Function1 stringRule -> h
    kotlin.jvm.functions.Function1 uuidRule -> i
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$booleanRule$1 -> b.a.a.d.c:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$booleanRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$booleanRule$1$1 -> b.a.a.d.d:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$booleanRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$doubleRule$1 -> b.a.a.d.e:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$doubleRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$doubleRule$1$1 -> b.a.a.d.f:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$doubleRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intRule$1 -> b.a.a.d.g:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intRule$1$1 -> b.a.a.d.h:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithMaxRule$1 -> b.a.a.d.i:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithMaxRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithMaxRule$1$1 -> b.a.a.d.j:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithMaxRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithRangeRule$1 -> b.a.a.d.k:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithRangeRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithRangeRule$1$1 -> b.a.a.d.l:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$intWithRangeRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$longRule$1 -> b.a.a.d.m:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$longRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$longRule$1$1 -> b.a.a.d.n:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$longRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$oldRule$1 -> b.a.a.d.o:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$oldRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$oldRule$1$1 -> b.a.a.d.p:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$oldRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$stringRule$1 -> b.a.a.d.q:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$stringRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$stringRule$1$1 -> b.a.a.d.r:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$stringRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$uuidRule$1 -> b.a.a.d.s:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$uuidRule$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.RandomPreprocessor$uuidRule$1$1 -> b.a.a.d.t:
    com.sksamuel.hoplite.preprocessor.RandomPreprocessor$uuidRule$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.sksamuel.hoplite.preprocessor.StringNodePreprocessor -> b.a.a.d.u:
    void <init>() -> <init>
com.sksamuel.hoplite.preprocessor.SystemPropertyPreprocessor -> b.a.a.d.v:
    com.sksamuel.hoplite.preprocessor.SystemPropertyPreprocessor INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.CObfuscator -> dev.binclub.binscure.a:
    java.security.SecureRandom random -> a
    java.util.Map mappings -> a
    dev.binclub.binscure.CObfuscator INSTANCE -> a
    java.security.SecureRandom getRandom() -> a
    java.util.Map getMappings() -> a
    boolean noMethodInsns(org.objectweb.asm.tree.MethodNode) -> a
    boolean randomWeight(int) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.EntryPoint -> dev.binclub.binscure.EntryPoint:
    java.util.List license -> a
    dev.binclub.binscure.EntryPoint$Companion Companion -> a
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class findClass(java.lang.String) -> findClass
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void main(java.lang.String[]) -> main
dev.binclub.binscure.EntryPoint$Companion -> dev.binclub.binscure.b:
    void <init>() -> <init>
    void <init>(byte) -> <init>
    boolean isExcluded(java.util.Collection,java.lang.String) -> a
    boolean isExcluded(java.util.Collection,org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(java.util.Collection,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
    boolean isExcluded(java.util.Collection,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.FieldNode) -> a
    org.objectweb.asm.tree.InsnList insnBuilder(kotlin.jvm.functions.Function1) -> a
dev.binclub.binscure.IClassProcessor -> dev.binclub.binscure.c:
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.IClassProcessor$DefaultImpls -> dev.binclub.binscure.d:
    org.objectweb.asm.tree.InsnList list -> a
    boolean isExcluded(dev.binclub.binscure.IClassProcessor,org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(dev.binclub.binscure.IClassProcessor,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
    boolean isExcluded(dev.binclub.binscure.IClassProcessor,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.FieldNode) -> a
    void <init>() -> <init>
dev.binclub.binscure.api.Binscure -> dev.binclub.binscure.api.Binscure:
    dev.binclub.binscure.api.Binscure INSTANCE -> INSTANCE
    void main(java.lang.String[]) -> main
    void obfuscate(java.lang.String[]) -> obfuscate
    void obfuscate(java.lang.String) -> obfuscate
    void obfuscate(java.io.File) -> obfuscate
    void obfuscate(dev.binclub.binscure.api.RootConfiguration) -> obfuscate
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.api.RootConfiguration -> dev.binclub.binscure.api.RootConfiguration:
    java.io.File input -> input
    java.io.File output -> output
    java.io.File mappingFile -> mappingFile
    java.util.List libraries -> libraries
    java.util.List exclusions -> exclusions
    java.util.List hardExclusions -> hardExclusions
    dev.binclub.binscure.api.transformers.RemapConfiguration remap -> remap
    dev.binclub.binscure.api.transformers.SourceStripConfiguration sourceStrip -> sourceStrip
    dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration kotlinMetadata -> kotlinMetadata
    dev.binclub.binscure.api.transformers.CrasherConfiguration crasher -> crasher
    dev.binclub.binscure.api.transformers.IndirectionConfiguration indirection -> indirection
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration stringObfuscation -> stringObfuscation
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration flowObfuscation -> flowObfuscation
    dev.binclub.binscure.api.transformers.OptimisationConfiguration optimisation -> optimisation
    dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration numberObfuscation -> numberObfuscation
    boolean ignoreClassPathNotFound -> ignoreClassPathNotFound
    boolean useJavaClassloader -> useJavaClassloader
    boolean shuffleClasses -> shuffleClasses
    boolean shuffleMethods -> shuffleMethods
    boolean shuffleFields -> shuffleFields
    boolean resetLineProgress -> resetLineProgress
    boolean printProgress -> printProgress
    boolean watermark -> watermark
    boolean lazyLibraryLoading -> lazyLibraryLoading
    char getLineChar() -> getLineChar
    java.lang.String toString() -> toString
    java.io.File getInput() -> getInput
    java.io.File getOutput() -> getOutput
    java.io.File getMappingFile() -> getMappingFile
    java.util.List getLibraries() -> getLibraries
    java.util.List getHardExclusions() -> getHardExclusions
    dev.binclub.binscure.api.transformers.RemapConfiguration getRemap() -> getRemap
    dev.binclub.binscure.api.transformers.SourceStripConfiguration getSourceStrip() -> getSourceStrip
    dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration getKotlinMetadata() -> getKotlinMetadata
    dev.binclub.binscure.api.transformers.CrasherConfiguration getCrasher() -> getCrasher
    dev.binclub.binscure.api.transformers.IndirectionConfiguration getIndirection() -> getIndirection
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration getStringObfuscation() -> getStringObfuscation
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration getFlowObfuscation() -> getFlowObfuscation
    dev.binclub.binscure.api.transformers.OptimisationConfiguration getOptimisation() -> getOptimisation
    dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration getNumberObfuscation() -> getNumberObfuscation
    boolean getIgnoreClassPathNotFound() -> getIgnoreClassPathNotFound
    boolean getUseJavaClassloader() -> getUseJavaClassloader
    boolean getShuffleClasses() -> getShuffleClasses
    boolean getShuffleMethods() -> getShuffleMethods
    boolean getShuffleFields() -> getShuffleFields
    boolean getResetLineProgress() -> getResetLineProgress
    boolean getPrintProgress() -> getPrintProgress
    boolean getWatermark() -> getWatermark
    boolean getLazyLibraryLoading() -> getLazyLibraryLoading
    void <init>(java.io.File,java.io.File,java.io.File,java.util.List,java.util.List,java.util.List,dev.binclub.binscure.api.transformers.RemapConfiguration,dev.binclub.binscure.api.transformers.SourceStripConfiguration,dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration,dev.binclub.binscure.api.transformers.CrasherConfiguration,dev.binclub.binscure.api.transformers.IndirectionConfiguration,dev.binclub.binscure.api.transformers.StringObfuscationConfiguration,dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration,dev.binclub.binscure.api.transformers.OptimisationConfiguration,dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean) -> <init>
    void <init>(java.io.File,java.io.File,java.io.File,java.util.List,java.util.List,java.util.List,dev.binclub.binscure.api.transformers.RemapConfiguration,dev.binclub.binscure.api.transformers.SourceStripConfiguration,dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration,dev.binclub.binscure.api.transformers.CrasherConfiguration,dev.binclub.binscure.api.transformers.IndirectionConfiguration,dev.binclub.binscure.api.transformers.StringObfuscationConfiguration,dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration,dev.binclub.binscure.api.transformers.OptimisationConfiguration,dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.io.File component1() -> component1
    java.io.File component2() -> component2
    java.io.File component3() -> component3
    java.util.List component4() -> component4
    java.util.List component5() -> component5
    java.util.List component6() -> component6
    dev.binclub.binscure.api.transformers.RemapConfiguration component7() -> component7
    dev.binclub.binscure.api.transformers.SourceStripConfiguration component8() -> component8
    dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration component9() -> component9
    dev.binclub.binscure.api.transformers.CrasherConfiguration component10() -> component10
    dev.binclub.binscure.api.transformers.IndirectionConfiguration component11() -> component11
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration component12() -> component12
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration component13() -> component13
    dev.binclub.binscure.api.transformers.OptimisationConfiguration component14() -> component14
    dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration component15() -> component15
    boolean component16() -> component16
    boolean component17() -> component17
    boolean component18() -> component18
    boolean component19() -> component19
    boolean component20() -> component20
    boolean component21() -> component21
    boolean component22() -> component22
    boolean component23() -> component23
    boolean component24() -> component24
    dev.binclub.binscure.api.RootConfiguration copy(java.io.File,java.io.File,java.io.File,java.util.List,java.util.List,java.util.List,dev.binclub.binscure.api.transformers.RemapConfiguration,dev.binclub.binscure.api.transformers.SourceStripConfiguration,dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration,dev.binclub.binscure.api.transformers.CrasherConfiguration,dev.binclub.binscure.api.transformers.IndirectionConfiguration,dev.binclub.binscure.api.transformers.StringObfuscationConfiguration,dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration,dev.binclub.binscure.api.transformers.OptimisationConfiguration,dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean) -> copy
    dev.binclub.binscure.api.RootConfiguration copy$default(dev.binclub.binscure.api.RootConfiguration,java.io.File,java.io.File,java.io.File,java.util.List,java.util.List,java.util.List,dev.binclub.binscure.api.transformers.RemapConfiguration,dev.binclub.binscure.api.transformers.SourceStripConfiguration,dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration,dev.binclub.binscure.api.transformers.CrasherConfiguration,dev.binclub.binscure.api.transformers.IndirectionConfiguration,dev.binclub.binscure.api.transformers.StringObfuscationConfiguration,dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration,dev.binclub.binscure.api.transformers.OptimisationConfiguration,dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,java.lang.Object) -> copy$default
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.TransformerConfiguration -> dev.binclub.binscure.api.TransformerConfiguration:
    java.util.List tExclusions -> tExclusions
    boolean enabled -> enabled
    java.util.List getTExclusions() -> getTExclusions
    boolean getEnabled() -> getEnabled
    void <init>(boolean,java.util.List) -> <init>
    void <init>(boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
dev.binclub.binscure.api.postcompile.BinscurePostCompile -> dev.binclub.binscure.api.postcompile.BinscurePostCompile:
    dev.binclub.binscure.api.postcompile.BinscurePostCompile$Companion Companion -> Companion
    void ldc(java.lang.String) -> ldc
    void ldc(java.lang.Class) -> ldc
    void pop() -> pop
    java.lang.Object invokeStatic(java.lang.Class,java.lang.String,java.lang.String) -> invokeStatic
    java.lang.Object invokeStatic(java.lang.String,java.lang.String,java.lang.String) -> invokeStatic
    java.lang.Object invokeVirtual(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String) -> invokeVirtual
    java.lang.Object invokeVirtual(java.lang.Object,java.lang.String,java.lang.String,java.lang.String) -> invokeVirtual
    void <clinit>() -> <clinit>
dev.binclub.binscure.api.postcompile.BinscurePostCompile$Companion -> dev.binclub.binscure.api.postcompile.BinscurePostCompile$Companion:
    dev.binclub.binscure.api.postcompile.BinscurePostCompile$Companion $$INSTANCE -> $$INSTANCE
    void ldc(java.lang.String) -> ldc
    void ldc(java.lang.Class) -> ldc
    void pop() -> pop
    java.lang.Object invokeStatic(java.lang.Class,java.lang.String,java.lang.String) -> invokeStatic
    java.lang.Object invokeStatic(java.lang.String,java.lang.String,java.lang.String) -> invokeStatic
    java.lang.Object invokeVirtual(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String) -> invokeVirtual
    java.lang.Object invokeVirtual(java.lang.Object,java.lang.String,java.lang.String,java.lang.String) -> invokeVirtual
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.api.postcompile.PostCompileKt -> dev.binclub.binscure.api.postcompile.PostCompileKt:
    void example() -> example
dev.binclub.binscure.api.runtime.NativeRuntime -> dev.binclub.binscure.api.runtime.NativeRuntime:
    java.util.logging.Logger logger -> logger
    dev.binclub.binscure.api.runtime.NativeRuntime INSTANCE -> INSTANCE
    java.lang.Object a(java.lang.Object,java.lang.Object) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.api.transformers.CrasherConfiguration -> dev.binclub.binscure.api.transformers.CrasherConfiguration:
    boolean enabled -> enabled
    boolean checksums -> checksums
    boolean antiAsm -> antiAsm
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    boolean getChecksums() -> getChecksums
    boolean getAntiAsm() -> getAntiAsm
    void <init>(boolean,boolean,boolean,java.util.List) -> <init>
    void <init>(boolean,boolean,boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    boolean component2() -> component2
    boolean component3() -> component3
    java.util.List component4() -> component4
    dev.binclub.binscure.api.transformers.CrasherConfiguration copy(boolean,boolean,boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.CrasherConfiguration copy$default(dev.binclub.binscure.api.transformers.CrasherConfiguration,boolean,boolean,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration -> dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration:
    boolean enabled -> enabled
    int severity -> severity
    dev.binclub.binscure.api.transformers.MergeMethods mergeMethods -> mergeMethods
    boolean arithmetic -> arithmetic
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    int getSeverity() -> getSeverity
    dev.binclub.binscure.api.transformers.MergeMethods getMergeMethods() -> getMergeMethods
    boolean getArithmetic() -> getArithmetic
    void <init>(boolean,int,dev.binclub.binscure.api.transformers.MergeMethods,boolean,java.util.List) -> <init>
    void <init>(boolean,int,dev.binclub.binscure.api.transformers.MergeMethods,boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    int component2() -> component2
    dev.binclub.binscure.api.transformers.MergeMethods component3() -> component3
    boolean component4() -> component4
    java.util.List component5() -> component5
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration copy(boolean,int,dev.binclub.binscure.api.transformers.MergeMethods,boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration copy$default(dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration,boolean,int,dev.binclub.binscure.api.transformers.MergeMethods,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.IndirectionConfiguration -> dev.binclub.binscure.api.transformers.IndirectionConfiguration:
    boolean enabled -> enabled
    dev.binclub.binscure.api.transformers.IndirectionType type -> type
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    dev.binclub.binscure.api.transformers.IndirectionType getType() -> getType
    void <init>(boolean,dev.binclub.binscure.api.transformers.IndirectionType,java.util.List) -> <init>
    void <init>(boolean,dev.binclub.binscure.api.transformers.IndirectionType,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    dev.binclub.binscure.api.transformers.IndirectionType component2() -> component2
    java.util.List component3() -> component3
    dev.binclub.binscure.api.transformers.IndirectionConfiguration copy(boolean,dev.binclub.binscure.api.transformers.IndirectionType,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.IndirectionConfiguration copy$default(dev.binclub.binscure.api.transformers.IndirectionConfiguration,boolean,dev.binclub.binscure.api.transformers.IndirectionType,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.IndirectionType -> dev.binclub.binscure.api.transformers.IndirectionType:
    dev.binclub.binscure.api.transformers.IndirectionType PROXY -> PROXY
    dev.binclub.binscure.api.transformers.IndirectionType INVOKEDYNAMIC -> INVOKEDYNAMIC
    dev.binclub.binscure.api.transformers.IndirectionType[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    dev.binclub.binscure.api.transformers.IndirectionType[] values() -> values
    dev.binclub.binscure.api.transformers.IndirectionType valueOf(java.lang.String) -> valueOf
dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration -> dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration:
    boolean enabled -> enabled
    dev.binclub.binscure.api.transformers.KotlinMetadataType type -> type
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    dev.binclub.binscure.api.transformers.KotlinMetadataType getType() -> getType
    void <init>(boolean,dev.binclub.binscure.api.transformers.KotlinMetadataType,java.util.List) -> <init>
    void <init>(boolean,dev.binclub.binscure.api.transformers.KotlinMetadataType,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    dev.binclub.binscure.api.transformers.KotlinMetadataType component2() -> component2
    java.util.List component3() -> component3
    dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration copy(boolean,dev.binclub.binscure.api.transformers.KotlinMetadataType,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration copy$default(dev.binclub.binscure.api.transformers.KotlinMetadataConfiguration,boolean,dev.binclub.binscure.api.transformers.KotlinMetadataType,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.KotlinMetadataType -> dev.binclub.binscure.api.transformers.KotlinMetadataType:
    dev.binclub.binscure.api.transformers.KotlinMetadataType REMOVE -> REMOVE
    dev.binclub.binscure.api.transformers.KotlinMetadataType CENSOR -> CENSOR
    dev.binclub.binscure.api.transformers.KotlinMetadataType[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    dev.binclub.binscure.api.transformers.KotlinMetadataType[] values() -> values
    dev.binclub.binscure.api.transformers.KotlinMetadataType valueOf(java.lang.String) -> valueOf
dev.binclub.binscure.api.transformers.LineNumberAction -> dev.binclub.binscure.api.transformers.LineNumberAction:
    dev.binclub.binscure.api.transformers.LineNumberAction KEEP -> KEEP
    dev.binclub.binscure.api.transformers.LineNumberAction REMOVE -> REMOVE
    dev.binclub.binscure.api.transformers.LineNumberAction[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    dev.binclub.binscure.api.transformers.LineNumberAction[] values() -> values
    dev.binclub.binscure.api.transformers.LineNumberAction valueOf(java.lang.String) -> valueOf
dev.binclub.binscure.api.transformers.MergeMethods -> dev.binclub.binscure.api.transformers.MergeMethods:
    dev.binclub.binscure.api.transformers.MergeMethods EXISTING_CLASSES -> EXISTING_CLASSES
    dev.binclub.binscure.api.transformers.MergeMethods BLOAT_CLASSES -> BLOAT_CLASSES
    dev.binclub.binscure.api.transformers.MergeMethods NONE -> NONE
    dev.binclub.binscure.api.transformers.MergeMethods[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    dev.binclub.binscure.api.transformers.MergeMethods[] values() -> values
    dev.binclub.binscure.api.transformers.MergeMethods valueOf(java.lang.String) -> valueOf
dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration -> dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration:
    boolean enabled -> enabled
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    void <init>(boolean,java.util.List) -> <init>
    void <init>(boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    java.util.List component2() -> component2
    dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration copy(boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration copy$default(dev.binclub.binscure.api.transformers.NumberObfuscationConfiguration,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.OptimisationConfiguration -> dev.binclub.binscure.api.transformers.OptimisationConfiguration:
    boolean enabled -> enabled
    boolean mutableEnumValues -> mutableEnumValues
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    boolean getMutableEnumValues() -> getMutableEnumValues
    void <init>(boolean,boolean,java.util.List) -> <init>
    void <init>(boolean,boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    boolean component2() -> component2
    java.util.List component3() -> component3
    dev.binclub.binscure.api.transformers.OptimisationConfiguration copy(boolean,boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.OptimisationConfiguration copy$default(dev.binclub.binscure.api.transformers.OptimisationConfiguration,boolean,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.RemapConfiguration -> dev.binclub.binscure.api.transformers.RemapConfiguration:
    boolean enabled -> enabled
    java.lang.String dictionary -> dictionary
    boolean classes -> classes
    boolean methods -> methods
    boolean fields -> fields
    java.lang.String classPrefix -> classPrefix
    java.lang.String methodPrefix -> methodPrefix
    java.lang.String fieldPrefix -> fieldPrefix
    java.lang.String localVariableName -> localVariableName
    boolean localVariables -> localVariables
    boolean aggressiveOverloading -> aggressiveOverloading
    boolean obfuscateEnums -> obfuscateEnums
    java.util.List exclusions -> exclusions
    boolean areClassesEnabled() -> areClassesEnabled
    boolean areMethodsEnabled() -> areMethodsEnabled
    boolean areFieldsEnabled() -> areFieldsEnabled
    boolean areLocalsEnabled() -> areLocalsEnabled
    boolean getEnabled() -> getEnabled
    java.lang.String getDictionary() -> getDictionary
    boolean getClasses() -> getClasses
    boolean getMethods() -> getMethods
    boolean getFields() -> getFields
    java.lang.String getClassPrefix() -> getClassPrefix
    java.lang.String getMethodPrefix() -> getMethodPrefix
    java.lang.String getFieldPrefix() -> getFieldPrefix
    java.lang.String getLocalVariableName() -> getLocalVariableName
    boolean getLocalVariables() -> getLocalVariables
    boolean getAggressiveOverloading() -> getAggressiveOverloading
    boolean getObfuscateEnums() -> getObfuscateEnums
    void <init>(boolean,java.lang.String,boolean,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.util.List) -> <init>
    void <init>(boolean,java.lang.String,boolean,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    java.lang.String component2() -> component2
    boolean component3() -> component3
    boolean component4() -> component4
    boolean component5() -> component5
    java.lang.String component6() -> component6
    java.lang.String component7() -> component7
    java.lang.String component8() -> component8
    java.lang.String component9() -> component9
    boolean component10() -> component10
    boolean component11() -> component11
    boolean component12() -> component12
    java.util.List component13() -> component13
    dev.binclub.binscure.api.transformers.RemapConfiguration copy(boolean,java.lang.String,boolean,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.RemapConfiguration copy$default(dev.binclub.binscure.api.transformers.RemapConfiguration,boolean,java.lang.String,boolean,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.SourceStripConfiguration -> dev.binclub.binscure.api.transformers.SourceStripConfiguration:
    boolean enabled -> enabled
    dev.binclub.binscure.api.transformers.LineNumberAction lineNumbers -> lineNumbers
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    dev.binclub.binscure.api.transformers.LineNumberAction getLineNumbers() -> getLineNumbers
    void <init>(boolean,dev.binclub.binscure.api.transformers.LineNumberAction,java.util.List) -> <init>
    void <init>(boolean,dev.binclub.binscure.api.transformers.LineNumberAction,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    dev.binclub.binscure.api.transformers.LineNumberAction component2() -> component2
    java.util.List component3() -> component3
    dev.binclub.binscure.api.transformers.SourceStripConfiguration copy(boolean,dev.binclub.binscure.api.transformers.LineNumberAction,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.SourceStripConfiguration copy$default(dev.binclub.binscure.api.transformers.SourceStripConfiguration,boolean,dev.binclub.binscure.api.transformers.LineNumberAction,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.api.transformers.StringObfuscationConfiguration -> dev.binclub.binscure.api.transformers.StringObfuscationConfiguration:
    boolean enabled -> enabled
    java.util.List exclusions -> exclusions
    boolean getEnabled() -> getEnabled
    void <init>(boolean,java.util.List) -> <init>
    void <init>(boolean,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    boolean component1() -> component1
    java.util.List component2() -> component2
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration copy(boolean,java.util.List) -> copy
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration copy$default(dev.binclub.binscure.api.transformers.StringObfuscationConfiguration,boolean,java.util.List,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.classpath.ClassPath -> dev.binclub.binscure.a.a:
    java.util.Map classes -> a
    java.util.Map classPath -> b
    java.util.Map passThrough -> c
    java.util.HashMap treeEntries -> a
    java.util.HashMap hierachy -> b
    java.util.Set warnings -> a
    java.util.ArrayList librarySources -> a
    dev.binclub.binscure.classpath.ClassPath INSTANCE -> a
    java.util.Map getClasses() -> a
    java.util.Map getClassPath() -> b
    java.util.Map getPassThrough() -> c
    java.util.HashMap getHierachy() -> a
    java.lang.Object warn(java.lang.String,java.lang.Object) -> a
    dev.binclub.binscure.classpath.ClassTree getHierarchy(java.lang.String) -> a
    void constructTreeSuperClasses(dev.binclub.binscure.classpath.tree.ClassTreeEntry) -> a
    void constructHierarchy() -> a
    void constructTreeHiearchy(java.lang.String,dev.binclub.binscure.classpath.tree.ClassTreeEntry) -> a
    void loadClassPath(java.io.File[]) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPath$LibrarySource -> dev.binclub.binscure.a.b:
    void <init>() -> <init>
dev.binclub.binscure.classpath.ClassPath$ZipLibrarySource -> dev.binclub.binscure.a.c:
    java.io.File file -> a
    java.lang.String toString() -> toString
    void <init>(java.io.File) -> <init>
dev.binclub.binscure.classpath.ClassPathIO -> dev.binclub.binscure.a.d:
    kotlin.Lazy namesField$delegate -> a
    kotlin.Lazy crcField$delegate -> b
    dev.binclub.binscure.classpath.ClassPathIO INSTANCE -> a
    void loadInputJar(java.io.File) -> a
    void loadInputClassNode(java.lang.String,byte[],org.objectweb.asm.tree.ClassNode) -> a
    void loadClassPath(java.util.Collection) -> a
    void writeOutput(java.io.File) -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$DummyCRC -> dev.binclub.binscure.a.e:
    boolean overwrite -> a
    long getValue() -> getValue
    void <init>() -> <init>
dev.binclub.binscure.classpath.ClassPathIO$commentField$2 -> dev.binclub.binscure.a.f:
    dev.binclub.binscure.classpath.ClassPathIO$commentField$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$crcField$2 -> dev.binclub.binscure.a.g:
    dev.binclub.binscure.classpath.ClassPathIO$crcField$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$emptyClass$2 -> dev.binclub.binscure.a.h:
    dev.binclub.binscure.classpath.ClassPathIO$emptyClass$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$namesField$2 -> dev.binclub.binscure.a.i:
    dev.binclub.binscure.classpath.ClassPathIO$namesField$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$timeField$2 -> dev.binclub.binscure.a.j:
    dev.binclub.binscure.classpath.ClassPathIO$timeField$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.classpath.ClassPathIO$writeOutput$1$1 -> dev.binclub.binscure.a.k:
    kotlin.jvm.internal.Ref$LongRef $lastPrint -> a
    java.lang.Object invoke() -> invoke
    boolean invoke() -> a
    void <init>(kotlin.jvm.internal.Ref$LongRef) -> <init>
dev.binclub.binscure.classpath.ClassTree -> dev.binclub.binscure.a.l:
    java.util.Set parents -> a
    java.util.Set children -> b
    kotlin.Lazy allParents$delegate -> a
    dev.binclub.binscure.classpath.tree.ClassTreeEntry thisClass -> a
    void <init>(dev.binclub.binscure.classpath.tree.ClassTreeEntry) -> <init>
dev.binclub.binscure.classpath.ClassTree$allParents$2 -> dev.binclub.binscure.a.m:
    dev.binclub.binscure.classpath.ClassTree this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.ClassTree) -> <init>
dev.binclub.binscure.classpath.CustomClassWriter -> dev.binclub.binscure.a.n:
    java.lang.String getCommonSuperClass(java.lang.String,java.lang.String) -> a
    java.lang.String getCommonSuperClass1(java.lang.String,java.lang.String) -> b
    java.lang.String getCommonSuperClass0(java.lang.String,java.lang.String) -> c
    boolean isAssignableFrom(java.lang.String,java.lang.String) -> a
    void <init>(int) -> <init>
    void <init>(int,byte) -> <init>
dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry -> dev.binclub.binscure.a.a.a:
    kotlin.Lazy supers$delegate -> a
    kotlin.Lazy methods0$delegate -> b
    org.objectweb.asm.tree.ClassNode classNode -> a
    int getAccess() -> a
    java.lang.String getDirectSuper() -> a
    java.lang.String getName() -> b
    java.util.Set getSuperClasses() -> a
    java.util.Set getMethods() -> b
    void <init>(org.objectweb.asm.tree.ClassNode) -> <init>
dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry$fields0$2 -> dev.binclub.binscure.a.a.b:
    dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry$methods0$2 -> dev.binclub.binscure.a.a.c:
    dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry$supers$2 -> dev.binclub.binscure.a.a.d:
    dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassNodeTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassPathTreeEntry -> dev.binclub.binscure.a.a.e:
    kotlin.Lazy supers$delegate -> a
    kotlin.Lazy methods0$delegate -> b
    java.lang.Class clazz -> a
    int getAccess() -> a
    java.lang.String getDirectSuper() -> a
    java.lang.String getName() -> b
    java.util.Set getSuperClasses() -> a
    java.util.Set getMethods() -> b
    void <init>(java.lang.Class) -> <init>
dev.binclub.binscure.classpath.tree.ClassPathTreeEntry$fields0$2 -> dev.binclub.binscure.a.a.f:
    dev.binclub.binscure.classpath.tree.ClassPathTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassPathTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassPathTreeEntry$methods0$2 -> dev.binclub.binscure.a.a.g:
    dev.binclub.binscure.classpath.tree.ClassPathTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassPathTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassPathTreeEntry$supers$2 -> dev.binclub.binscure.a.a.h:
    dev.binclub.binscure.classpath.tree.ClassPathTreeEntry this$0 -> a
    java.lang.Object invoke() -> invoke
    void <init>(dev.binclub.binscure.classpath.tree.ClassPathTreeEntry) -> <init>
dev.binclub.binscure.classpath.tree.ClassTreeEntry -> dev.binclub.binscure.a.a.i:
    java.lang.String getName() -> b
    java.lang.String getDirectSuper() -> a
    java.util.Set getSuperClasses() -> a
    int getAccess() -> a
    java.util.Set getMethods() -> b
    void <init>() -> <init>
dev.binclub.binscure.classpath.tree.FieldInfo -> dev.binclub.binscure.a.a.j:
    java.lang.String owner -> a
    java.lang.String name -> b
    java.lang.String description -> c
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.classpath.tree.MethodInfo -> dev.binclub.binscure.a.a.k:
    java.lang.String owner -> c
    java.lang.String name -> a
    java.lang.String desc -> b
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.configuration.ConfigurationManager -> dev.binclub.binscure.b.a:
    dev.binclub.binscure.api.RootConfiguration rootConfig -> a
    dev.binclub.binscure.configuration.ConfigurationManager INSTANCE -> a
    dev.binclub.binscure.api.RootConfiguration getRootConfig() -> a
    void setRootConfig(dev.binclub.binscure.api.RootConfiguration) -> a
    dev.binclub.binscure.api.RootConfiguration parse(java.io.File) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.configuration.ConfigurationManager$parse$$inlined$loadConfigOrThrow$1 -> dev.binclub.binscure.b.b:
    com.sksamuel.hoplite.ConfigLoader this$0 -> a
    void <init>(com.sksamuel.hoplite.ConfigLoader) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
dev.binclub.binscure.configuration.exclusions.ExclusionConfiguration -> dev.binclub.binscure.b.a.a:
    boolean isExcluded(java.lang.String) -> a
    void <init>() -> <init>
dev.binclub.binscure.configuration.exclusions.PackageBlacklistExcluder -> dev.binclub.binscure.b.a.b:
    java.lang.String aPackage -> a
    boolean isExcluded(java.lang.String) -> a
    java.lang.String toString() -> toString
    void <init>(java.lang.String) -> <init>
dev.binclub.binscure.processors.AbstractMethodImplementor -> dev.binclub.binscure.c.a:
    dev.binclub.binscure.api.TransformerConfiguration config -> a
    dev.binclub.binscure.processors.AbstractMethodImplementor INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.AbstractMethodImplementor$process$1$1$1 -> dev.binclub.binscure.c.b:
    dev.binclub.binscure.processors.AbstractMethodImplementor$process$1$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer -> dev.binclub.binscure.c.a.a:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$1$1 -> dev.binclub.binscure.c.a.b:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$2$1 -> dev.binclub.binscure.c.a.c:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$2$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$3$1 -> dev.binclub.binscure.c.a.d:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$3$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$4$1 -> dev.binclub.binscure.c.a.e:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$4$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$5$1 -> dev.binclub.binscure.c.a.f:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$5$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$6$1 -> dev.binclub.binscure.c.a.g:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$6$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$7$1 -> dev.binclub.binscure.c.a.h:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$7$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$8$1 -> dev.binclub.binscure.c.a.i:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$8$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$9$1 -> dev.binclub.binscure.c.a.j:
    dev.binclub.binscure.processors.arithmetic.ArithmeticSubstitutionTransformer$process$1$1$9$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.classmerge.StaticMethodMerger -> dev.binclub.binscure.c.b.a:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.classmerge.StaticMethodMerger INSTANCE -> a
    boolean containsSpecial(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.InsnList) -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    java.util.Collection incrementLocalVars(java.util.Collection,boolean) -> a
    org.objectweb.asm.tree.InsnList incAllVarInsn(org.objectweb.asm.tree.InsnList,boolean,java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.classmerge.StaticMethodMerger$process$1 -> dev.binclub.binscure.c.b.b:
    dev.binclub.binscure.processors.classmerge.StaticMethodMerger$process$1 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.constants.FieldInitialiser -> dev.binclub.binscure.c.c.a:
    dev.binclub.binscure.processors.constants.FieldInitialiser INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.constants.NumberObfuscation -> dev.binclub.binscure.c.c.b:
    dev.binclub.binscure.processors.constants.NumberObfuscation INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.constants.string.StringDecryptGenerator -> dev.binclub.binscure.c.c.a.a:
    dev.binclub.binscure.processors.constants.string.StringDecryptGenerator INSTANCE -> a
    org.objectweb.asm.tree.MethodNode generateDecrypterMethod(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.FieldNode,java.util.ArrayList) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.constants.string.StringDecryptGenerator$generateDecrypterMethod$$inlined$run$lambda$1 -> dev.binclub.binscure.c.c.a.b:
    void <init>() -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
dev.binclub.binscure.processors.constants.string.StringObfuscator -> dev.binclub.binscure.c.c.a.c:
    kotlin.reflect.KProperty[] $$delegatedProperties -> a
    int key -> a
    java.lang.Integer[] keys -> a
    org.objectweb.asm.tree.ClassNode decryptNode -> a
    kotlin.properties.ReadWriteProperty decryptMethod$delegate -> a
    kotlin.properties.ReadWriteProperty fastDecryptMethod$delegate -> b
    kotlin.properties.ReadWriteProperty keysField$delegate -> c
    dev.binclub.binscure.api.transformers.StringObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.constants.string.StringObfuscator INSTANCE -> a
    void <clinit>() -> <clinit>
    int getKey() -> a
    java.lang.Integer[] getKeys() -> a
    org.objectweb.asm.tree.ClassNode getDecryptNode() -> a
    org.objectweb.asm.tree.MethodNode getFastDecryptMethod() -> a
    org.objectweb.asm.tree.FieldNode getKeysField() -> a
    java.lang.String getProgressDescription() -> a
    void process(java.util.Collection,java.util.Map) -> a
    org.objectweb.asm.tree.MethodNode generateStaticBlock(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.FieldNode) -> a
    dev.binclub.binscure.processors.constants.string.StringObfuscator$EncryptedString encryptString(java.lang.String,int,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode,org.objectweb.asm.tree.LdcInsnNode) -> a
    java.lang.String decryptString(java.lang.String,int,int,int) -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void <init>() -> <init>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.constants.string.StringObfuscator$EncryptedString -> dev.binclub.binscure.c.c.a.d:
    java.lang.String original -> b
    java.lang.String encrypted -> a
    int key -> a
    org.objectweb.asm.tree.ClassNode classNode -> a
    org.objectweb.asm.tree.MethodNode methodNode -> a
    org.objectweb.asm.tree.LdcInsnNode insn -> a
    void <init>(java.lang.String,java.lang.String,int,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode,org.objectweb.asm.tree.LdcInsnNode) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.processors.constants.string.StringObfuscator$generateStaticBlock$$inlined$also$lambda$1 -> dev.binclub.binscure.c.c.a.e:
    org.objectweb.asm.tree.ClassNode $classNode$inlined -> a
    void <init>(org.objectweb.asm.tree.ClassNode) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
dev.binclub.binscure.processors.constants.string.StringProxyGenerator -> dev.binclub.binscure.c.c.a.f:
    org.objectweb.asm.tree.ClassNode classNode -> a
    dev.binclub.binscure.processors.constants.string.StringProxyGenerator INSTANCE -> a
    void genClinit(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode,java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.constants.string.StringProxyGenerator$genClinit$1 -> dev.binclub.binscure.c.c.a.g:
    dev.binclub.binscure.processors.constants.string.StringProxyGenerator$genClinit$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.constants.string.StringProxyGenerator$generateStringProxy$$inlined$apply$lambda$1 -> dev.binclub.binscure.c.c.a.h:
    org.objectweb.asm.tree.ClassNode $actual$inlined -> a
    org.objectweb.asm.tree.MethodNode $decryptMethod$inlined -> a
    void <init>(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
dev.binclub.binscure.processors.constants.string.StringProxyGenerator$generateStringProxy$$inlined$apply$lambda$2 -> dev.binclub.binscure.c.c.a.i:
    org.objectweb.asm.tree.ClassNode $actual$inlined -> a
    org.objectweb.asm.tree.MethodNode $decryptMethod$inlined -> a
    void <init>(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
dev.binclub.binscure.processors.debug.AccessStripper -> dev.binclub.binscure.c.d.a:
    dev.binclub.binscure.processors.debug.AccessStripper INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    int makePublic(int,boolean) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.debug.KotlinMetadataStripper -> dev.binclub.binscure.c.d.b:
    dev.binclub.binscure.processors.debug.KotlinMetadataStripper INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.debug.SourceStripper -> dev.binclub.binscure.c.d.c:
    dev.binclub.binscure.api.transformers.SourceStripConfiguration config -> a
    dev.binclub.binscure.processors.debug.SourceStripper INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.exploit.BadAttributeExploit -> dev.binclub.binscure.c.e.a:
    dev.binclub.binscure.api.transformers.CrasherConfiguration config -> a
    dev.binclub.binscure.processors.exploit.BadAttributeExploit INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.exploit.BadAttributeExploit$DummyAttribute -> dev.binclub.binscure.c.e.b:
    void <init>(java.lang.String,byte[]) -> <init>
    void <init>(java.lang.String) -> <init>
dev.binclub.binscure.processors.exploit.BadIndyConstant -> dev.binclub.binscure.c.e.c:
    dev.binclub.binscure.api.transformers.CrasherConfiguration config -> a
    java.lang.String[] descriptors -> a
    dev.binclub.binscure.processors.exploit.BadIndyConstant INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.flow.CfgFucker -> dev.binclub.binscure.c.f.a:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.flow.CfgFucker INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.flow.classinit.ClassInitMonitor -> dev.binclub.binscure.c.f.a.a:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.flow.classinit.ClassInitMonitor INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.flow.trycatch.FakeTryCatch -> dev.binclub.binscure.c.f.b.a:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.flow.trycatch.FakeTryCatch INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.flow.trycatch.UselessTryCatch -> dev.binclub.binscure.c.f.b.b:
    dev.binclub.binscure.api.transformers.FlowObfuscationConfiguration config -> a
    dev.binclub.binscure.processors.flow.trycatch.UselessTryCatch INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.indirection.DynamicCallObfuscation -> dev.binclub.binscure.c.g.a:
    java.lang.Integer[] targetOps -> a
    boolean isInit -> a
    kotlin.Lazy decryptNode$delegate -> a
    kotlin.Lazy stringDecryptMethod$delegate -> b
    kotlin.Lazy bootStrapMethod$delegate -> c
    kotlin.Lazy handler$delegate -> d
    dev.binclub.binscure.api.transformers.IndirectionConfiguration config -> a
    dev.binclub.binscure.processors.indirection.DynamicCallObfuscation INSTANCE -> a
    org.objectweb.asm.tree.ClassNode getDecryptNode() -> b
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    java.lang.String encryptName(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode,java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
    void access$setInit$p$2db51c99() -> a
    org.objectweb.asm.tree.ClassNode access$getDecryptNode$p$2bb9cf96() -> a
    org.objectweb.asm.tree.MethodNode access$getStringDecryptMethod$p$48fa0103() -> a
    org.objectweb.asm.tree.MethodNode access$getBootStrapMethod$p$48fa0103() -> b
dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$bootStrapMethod$2 -> dev.binclub.binscure.c.g.b:
    dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$bootStrapMethod$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$decryptNode$2 -> dev.binclub.binscure.c.g.c:
    dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$decryptNode$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$handler$2 -> dev.binclub.binscure.c.g.d:
    dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$handler$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$stringDecryptMethod$2 -> dev.binclub.binscure.c.g.e:
    dev.binclub.binscure.processors.indirection.DynamicCallObfuscation$stringDecryptMethod$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.optimisers.EnumValuesOptimiser -> dev.binclub.binscure.c.h.a:
    dev.binclub.binscure.api.transformers.OptimisationConfiguration config -> a
    dev.binclub.binscure.processors.optimisers.EnumValuesOptimiser INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.renaming.AbstractRenamer -> dev.binclub.binscure.c.i.a:
    dev.binclub.binscure.api.transformers.RemapConfiguration config -> a
    dev.binclub.binscure.api.transformers.RemapConfiguration getConfig() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void remap(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,java.util.Collection,java.util.Map) -> a
    boolean isEnabled() -> a
    void <init>() -> <init>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.renaming.generation.NameGenerator -> dev.binclub.binscure.c.i.a.a:
    int index -> a
    java.lang.String prefix -> a
    char[] CHARSET -> a
    java.lang.String uniqueRandomString() -> a
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.renaming.generation.NameGenerator$Companion -> dev.binclub.binscure.c.i.a.b:
    java.lang.String intToStr(int,char[]) -> b
    void <init>() -> <init>
    java.lang.String access$intToStr$60f5090(int,char[]) -> a
    void <init>(byte) -> <init>
dev.binclub.binscure.processors.renaming.impl.ClassRenamer -> dev.binclub.binscure.c.i.b.a:
    dev.binclub.binscure.processors.renaming.generation.NameGenerator namer -> a
    boolean keepPackages -> a
    dev.binclub.binscure.processors.renaming.impl.ClassRenamer INSTANCE -> a
    boolean isEnabled() -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.processors.renaming.generation.NameGenerator getNamer() -> a
    void remap(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.renaming.impl.FieldRenamer -> dev.binclub.binscure.c.i.b.b:
    dev.binclub.binscure.processors.renaming.impl.FieldRenamer INSTANCE -> a
    boolean isEnabled() -> a
    java.lang.String getProgressDescription() -> a
    void remap(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,java.util.Collection,java.util.Map) -> a
    boolean checkConflictingDownwardsRemaps(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,dev.binclub.binscure.classpath.ClassTree,java.lang.String,java.lang.String) -> a
    void remapChildren(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,dev.binclub.binscure.classpath.ClassTree,java.lang.String,java.lang.String,java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.renaming.impl.LocalVariableRenamer -> dev.binclub.binscure.c.i.b.c:
    dev.binclub.binscure.api.transformers.RemapConfiguration config -> a
    dev.binclub.binscure.processors.renaming.impl.LocalVariableRenamer INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.renaming.impl.MethodRenamer -> dev.binclub.binscure.c.i.b.d:
    dev.binclub.binscure.processors.renaming.impl.MethodRenamer INSTANCE -> a
    boolean isEnabled() -> a
    java.lang.String getProgressDescription() -> a
    void remap(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,java.util.Collection,java.util.Map) -> a
    boolean checkConflictingDownwardsRemaps(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,dev.binclub.binscure.classpath.ClassTree,java.lang.String,java.lang.String) -> a
    void remapChildren(dev.binclub.binscure.processors.renaming.utils.CustomRemapper,dev.binclub.binscure.classpath.ClassTree,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean parentsHaveMethod(dev.binclub.binscure.classpath.ClassTree,org.objectweb.asm.tree.MethodNode) -> a
    boolean hasMethod(dev.binclub.binscure.classpath.ClassTree,org.objectweb.asm.tree.MethodNode) -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.renaming.impl.MethodRenamer$remap$generator$1 -> dev.binclub.binscure.c.i.b.e:
    dev.binclub.binscure.processors.renaming.impl.MethodRenamer$remap$generator$1 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.renaming.utils.CustomRemapper -> dev.binclub.binscure.c.i.c.a:
    java.util.HashMap map -> a
    java.util.HashMap reversedMap -> b
    java.util.HashMap packageMap -> c
    java.util.HashMap fieldMap -> d
    java.util.HashMap reversedFieldMap -> e
    java.util.HashMap methodMap -> f
    java.util.HashMap reversedMethodMap -> g
    java.lang.String mapMethodName(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean mapMethodName(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    boolean newMethodMappingExists(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String mapInvokeDynamicMethodName$7157d249(java.lang.String) -> a
    java.lang.String mapFieldName(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean mapFieldName(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> b
    boolean newFieldMappingExists(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String map(java.lang.String) -> b
    java.util.Map dumpMappings() -> a
    void <init>() -> <init>
dev.binclub.binscure.processors.resources.ManifestResourceProcessor -> dev.binclub.binscure.c.j.a:
    dev.binclub.binscure.api.RootConfiguration config -> a
    dev.binclub.binscure.processors.resources.ManifestResourceProcessor INSTANCE -> a
    java.lang.String getProgressDescription() -> a
    dev.binclub.binscure.api.TransformerConfiguration getConfig() -> a
    void process(java.util.Collection,java.util.Map) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isExcluded(org.objectweb.asm.tree.ClassNode) -> a
    boolean isExcluded(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.tree.MethodNode) -> a
dev.binclub.binscure.processors.resources.ManifestResourceProcessor$process$$inlined$sortedByDescending$1 -> dev.binclub.binscure.c.j.b:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
dev.binclub.binscure.processors.resources.ManifestResourceProcessor$process$1 -> dev.binclub.binscure.c.j.c:
    java.util.List $sorted -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(java.util.jar.Attributes) -> a
    void <init>(java.util.List) -> <init>
dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager -> dev.binclub.binscure.c.k.a:
    dev.binclub.binscure.processors.renaming.generation.NameGenerator namer -> a
    kotlin.Lazy classNodeDelegate -> a
    kotlin.Lazy classNode$delegate -> b
    org.objectweb.asm.tree.MethodNode clinit -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager$FieldInfo[] fields -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager INSTANCE -> a
    org.objectweb.asm.tree.ClassNode getClassNode() -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager$FieldInfo[] getFields() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager$FieldInfo -> dev.binclub.binscure.c.k.b:
    org.objectweb.asm.tree.FieldNode fieldNode -> a
    int trueOpcode -> a
    int falseOpcode -> b
    void <init>(org.objectweb.asm.tree.FieldNode,int,int) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager$classNodeDelegate$1 -> dev.binclub.binscure.c.k.c:
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager$classNodeDelegate$1 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt -> dev.binclub.binscure.c.k.d:
    byte[] data -> a
    int length -> a
    org.objectweb.asm.tree.InsnList randomOpaqueJump(org.objectweb.asm.tree.LabelNode,boolean) -> a
    kotlin.Pair opaqueSwitchJump(kotlin.jvm.functions.Function1) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(byte[]) -> <init>
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putByte$6b2efa13(int) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt put11$30f4db0c(int,int) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putShort$6b2efa13(int) -> b
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt put12$30f4db0c(int,int) -> b
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt put112$23eb1933$30e5ad5b(int,int) -> c
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putInt$6b2efa13(int) -> c
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt put122$23eb1933(int,int,int) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putLong$ca0c60e(long) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putUTF8$71228be2(java.lang.String) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt encodeUtf8$7b417342(java.lang.String,int,int) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt putByteArray$1f1bbea5(byte[],int,int) -> a
    void enlarge(int) -> a
dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt$opaqueSwitchJump$1 -> dev.binclub.binscure.c.k.e:
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt$opaqueSwitchJump$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.AnnotationFieldRemapper -> dev.binclub.binscure.d.a:
    dev.binclub.binscure.utils.AnnotationFieldRemapper INSTANCE -> a
    void remap(org.objectweb.asm.tree.ClassNode,org.objectweb.asm.commons.Remapper) -> a
    void remap(org.objectweb.asm.tree.AnnotationNode,org.objectweb.asm.commons.Remapper) -> a
    java.lang.String remapNameValue(org.objectweb.asm.tree.AnnotationNode,java.lang.String,java.lang.Object,org.objectweb.asm.commons.Remapper) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.BlameableLabelNode -> dev.binclub.binscure.d.b:
    java.lang.String toString() -> toString
    void <init>(org.objectweb.asm.Label) -> <init>
    void <init>() -> <init>
dev.binclub.binscure.utils.DummyHashSet -> dev.binclub.binscure.d.c:
    boolean add(java.lang.Object) -> add
    void <init>() -> <init>
    int size() -> size
dev.binclub.binscure.utils.ExtensionsKt -> dev.binclub.binscure.d.d:
    java.lang.String replaceLast$68bc1f08(java.lang.String,java.lang.String) -> a
    char xor(char,int) -> a
    java.lang.Object getOrPutLazy(java.util.Map,java.lang.Object,kotlin.jvm.functions.Function0) -> a
    java.lang.Object random(java.lang.Object[],java.security.SecureRandom) -> a
    void add(org.objectweb.asm.tree.InsnList,int) -> a
    int removeAccess(int,int) -> a
    int addAccess$255f288(int) -> a
    boolean hasAccess(int,int) -> a
    boolean versionAtLeast$66f96fa5(org.objectweb.asm.tree.ClassNode) -> a
    boolean versionAtMost$66f96fa5(org.objectweb.asm.tree.ClassNode) -> b
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.ExtensionsKt$opcodes$2 -> dev.binclub.binscure.d.e:
    dev.binclub.binscure.utils.ExtensionsKt$opcodes$2 INSTANCE -> a
    java.lang.Object invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.InstructionModifier -> dev.binclub.binscure.d.f:
    java.util.HashMap replacements -> a
    java.util.HashMap appends -> b
    java.util.HashMap prepends -> c
    org.objectweb.asm.tree.InsnList EMPTY_LIST -> a
    void append(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.InsnList) -> a
    void prepend(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.InsnList) -> b
    void replace(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.AbstractInsnNode[]) -> a
    void replace(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.InsnList) -> c
    void remove(org.objectweb.asm.tree.AbstractInsnNode) -> a
    void apply(org.objectweb.asm.tree.MethodNode) -> a
    void apply(org.objectweb.asm.tree.InsnList) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.InstructionModifier$Companion -> dev.binclub.binscure.d.g:
    void <init>() -> <init>
    void <init>(byte) -> <init>
dev.binclub.binscure.utils.UtilsKt -> dev.binclub.binscure.d.h:
    java.lang.String[] throwables -> a
    java.util.Map numOps -> a
    org.objectweb.asm.tree.AbstractInsnNode ldcInt(int) -> a
    org.objectweb.asm.tree.AbstractInsnNode ldcLong(long) -> a
    org.objectweb.asm.tree.AbstractInsnNode ldcDouble(double) -> a
    org.objectweb.asm.tree.AbstractInsnNode ldcFloat(float) -> a
    java.lang.String randomThrowable$default$3c8140e0$3da8d3c4() -> a
    boolean isNumberLdc(org.objectweb.asm.tree.AbstractInsnNode) -> a
    java.lang.Number getNumFromLdc(org.objectweb.asm.tree.AbstractInsnNode) -> a
    org.objectweb.asm.tree.InsnList printlnAsm() -> a
    int getRetForType(org.objectweb.asm.Type) -> a
    int getLoadForType(org.objectweb.asm.Type) -> b
    org.objectweb.asm.tree.LabelNode newLabel() -> a
    int randomInt() -> a
    org.objectweb.asm.tree.MethodNode getClinit(org.objectweb.asm.tree.ClassNode) -> a
    float xor(float,float) -> a
    double xor(double,double) -> a
    org.objectweb.asm.Type downCastType(org.objectweb.asm.Type) -> a
    org.objectweb.asm.tree.InsnList insnListOf(org.objectweb.asm.tree.AbstractInsnNode[]) -> a
    void disableIllegalAccessWarning() -> a
    void <clinit>() -> <clinit>
dev.binclub.binscure.utils.UtilsKt$constructLookupSwitch$1 -> dev.binclub.binscure.d.i:
    dev.binclub.binscure.utils.UtilsKt$constructLookupSwitch$1 INSTANCE -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.DeprecationLevel -> kotlin.a:
    kotlin.DeprecationLevel WARNING -> a
    kotlin.DeprecationLevel ERROR -> b
    kotlin.DeprecationLevel HIDDEN -> c
    kotlin.DeprecationLevel[] $VALUES -> a
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.DeprecationLevel[] values() -> values
    kotlin.DeprecationLevel valueOf(java.lang.String) -> valueOf
kotlin.Function -> kotlin.b:
kotlin.InitializedLazyImpl -> kotlin.c:
    java.lang.Object value -> a
    boolean isInitialized() -> a
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> a
    void <init>(java.lang.Object) -> <init>
kotlin.KotlinNullPointerException -> kotlin.d:
    void <init>() -> <init>
kotlin.Lazy -> kotlin.e:
    java.lang.Object getValue() -> a
    boolean isInitialized() -> a
kotlin.LazyKt$WhenMappings -> kotlin.f:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.LazyThreadSafetyMode -> kotlin.g:
    kotlin.LazyThreadSafetyMode SYNCHRONIZED -> a
    kotlin.LazyThreadSafetyMode PUBLICATION -> b
    kotlin.LazyThreadSafetyMode NONE -> c
    kotlin.LazyThreadSafetyMode[] $VALUES -> a
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.LazyThreadSafetyMode[] values() -> values
    kotlin.LazyThreadSafetyMode valueOf(java.lang.String) -> valueOf
kotlin.Metadata -> kotlin.h:
    int[] mv() -> a
    java.lang.String[] d1() -> a
    java.lang.String[] d2() -> b
    int xi() -> a
kotlin.NoWhenBranchMatchedException -> kotlin.i:
    void <init>() -> <init>
kotlin.NotImplementedError -> kotlin.j:
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
kotlin.Pair -> kotlin.k:
    java.lang.Object first -> a
    java.lang.Object second -> b
    java.lang.String toString() -> toString
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.Result -> kotlin.l:
    kotlin.Result$Companion Companion -> a
    java.lang.String toString() -> toString
    java.lang.Object constructor-impl(java.lang.Object) -> a
    void <clinit>() -> <clinit>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.Result$Companion -> kotlin.m:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.Result$Failure -> kotlin.n:
    java.lang.Throwable exception -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.Throwable) -> <init>
kotlin.SafePublicationLazyImpl -> kotlin.o:
    kotlin.jvm.functions.Function0 initializer -> a
    java.lang.Object _value -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater -> a
    java.lang.Object getValue() -> a
    boolean isInitialized() -> a
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    void <init>(kotlin.jvm.functions.Function0) -> <init>
    void <clinit>() -> <clinit>
kotlin.SafePublicationLazyImpl$Companion -> kotlin.p:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.SynchronizedLazyImpl -> kotlin.q:
    kotlin.jvm.functions.Function0 initializer -> a
    java.lang.Object _value -> a
    java.lang.Object lock -> b
    java.lang.Object getValue() -> a
    boolean isInitialized() -> a
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    void <init>(kotlin.jvm.functions.Function0) -> <init>
    void <init>(kotlin.jvm.functions.Function0,byte) -> <init>
kotlin.Triple -> kotlin.r:
    java.lang.Object first -> a
    java.lang.Object second -> b
    java.lang.Object third -> c
    java.lang.String toString() -> toString
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.TypeCastException -> kotlin.s:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
kotlin.UNINITIALIZED_VALUE -> kotlin.t:
    kotlin.UNINITIALIZED_VALUE INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.UninitializedPropertyAccessException -> kotlin.u:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
kotlin.Unit -> kotlin.v:
    kotlin.Unit INSTANCE -> a
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.UnsafeLazyImpl -> kotlin.w:
    kotlin.jvm.functions.Function0 initializer -> a
    java.lang.Object _value -> a
    java.lang.Object getValue() -> a
    boolean isInitialized() -> a
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    void <init>(kotlin.jvm.functions.Function0) -> <init>
kotlin._Assertions -> kotlin.x:
    boolean ENABLED -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.collections.AbstractCollection -> kotlin.a.a:
    int getSize() -> a
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void <init>() -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
kotlin.collections.AbstractCollection$toString$1 -> kotlin.a.b:
    kotlin.collections.AbstractCollection this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.collections.AbstractCollection) -> <init>
kotlin.collections.AbstractList -> kotlin.a.c:
    kotlin.collections.AbstractList$Companion Companion -> a
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
kotlin.collections.AbstractList$Companion -> kotlin.a.d:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.collections.AbstractList$IteratorImpl -> kotlin.a.e:
    int index -> a
    kotlin.collections.AbstractList this$0 -> a
    int getIndex() -> a
    void setIndex(int) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void <init>(kotlin.collections.AbstractList) -> <init>
    void remove() -> remove
kotlin.collections.AbstractList$ListIteratorImpl -> kotlin.a.f:
    kotlin.collections.AbstractList this$0 -> a
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void <init>(kotlin.collections.AbstractList,int) -> <init>
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
kotlin.collections.AbstractList$SubList -> kotlin.a.g:
    int _size -> a
    kotlin.collections.AbstractList list -> a
    int fromIndex -> b
    java.lang.Object get(int) -> get
    int getSize() -> a
    void <init>(kotlin.collections.AbstractList,int,int) -> <init>
kotlin.collections.AbstractMutableList -> kotlin.a.h:
    java.lang.Object removeAt(int) -> a
    java.lang.Object remove(int) -> remove
    void <init>() -> <init>
    int size() -> size
    int getSize() -> a
kotlin.collections.ArrayAsCollection -> kotlin.a.i:
    java.lang.Object[] values -> a
    boolean isVarargs -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    void <init>(java.lang.Object[],boolean) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
kotlin.collections.ArraysKt___ArraysJvmKt -> kotlin.a.j:
    java.util.List asList(java.lang.Object[]) -> c
    java.lang.Object[] copyOfRange(java.lang.Object[],int,int) -> a
    void sortWith(java.lang.Object[],java.util.Comparator) -> a
kotlin.collections.ArraysKt___ArraysJvmKt$asList$3 -> kotlin.a.k:
    int[] $this_asList -> a
    int getSize() -> a
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    void <init>(int[]) -> <init>
kotlin.collections.ArraysKt___ArraysKt -> kotlin.a.l:
    boolean contains(java.lang.Object[],java.lang.Object) -> a
    java.lang.Object first(java.lang.Object[]) -> a
    java.lang.Object firstOrNull(java.lang.Object[]) -> b
    java.lang.Integer getOrNull(int[],int) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    int indexOf(int[],int) -> a
    java.lang.Object last(java.lang.Object[]) -> c
    java.lang.Object single(java.lang.Object[]) -> d
    char single(char[]) -> a
    java.util.Collection filterNotNullTo(java.lang.Object[],java.util.Collection) -> a
    int getLastIndex(java.lang.Object[]) -> a
    java.util.Collection toCollection(java.lang.Object[],java.util.Collection) -> b
    java.util.List toList(java.lang.Object[]) -> d
    java.util.List toList(short[]) -> a
    java.util.List toList(int[]) -> a
    java.util.List toList(long[]) -> a
    java.util.List toList(float[]) -> a
    java.util.List toList(double[]) -> a
    java.util.List toList(boolean[]) -> a
    java.util.List toList(char[]) -> a
    java.util.List toMutableList(java.lang.Object[]) -> e
    java.util.Set toSet(java.lang.Object[]) -> c
    java.lang.Iterable withIndex(java.lang.Object[]) -> a
    java.lang.Appendable joinTo$7bfe839f(java.lang.Object[],java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    java.lang.Appendable joinTo$default$2ca16864$7fe78948(java.lang.Object[],java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    java.lang.String joinToString$default$788621c6$4cb89aa2(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    kotlin.sequences.Sequence asSequence(java.lang.Object[]) -> a
kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$1 -> kotlin.a.m:
    java.lang.Object[] $this_asSequence$inlined -> a
    void <init>(java.lang.Object[]) -> <init>
    java.util.Iterator iterator() -> a
kotlin.collections.ArraysKt___ArraysKt$withIndex$1 -> kotlin.a.n:
    java.lang.Object[] $this_withIndex -> a
    java.lang.Object invoke() -> invoke
    void <init>(java.lang.Object[]) -> <init>
kotlin.collections.CollectionsKt__IteratorsJVMKt -> kotlin.a.o:
    java.util.Iterator iterator(java.util.Enumeration) -> a
    void sortWith(java.util.List,java.util.Comparator) -> a
    boolean addAll(java.util.Collection,java.lang.Iterable) -> a
    boolean retainAll(java.lang.Iterable,kotlin.jvm.functions.Function1) -> a
    int access$reverseElementIndex(java.util.List,int) -> a
kotlin.collections.CollectionsKt__IteratorsJVMKt$iterator$1 -> kotlin.a.p:
    java.util.Enumeration $this_iterator -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void <init>(java.util.Enumeration) -> <init>
    void remove() -> remove
kotlin.collections.CollectionsKt___CollectionsKt -> kotlin.a.q:
    boolean contains(java.lang.Iterable,java.lang.Object) -> a
    java.lang.Object first(java.lang.Iterable) -> a
    java.lang.Object first(java.util.List) -> a
    java.lang.Object firstOrNull(java.lang.Iterable) -> b
    java.lang.Object firstOrNull(java.util.List) -> b
    java.lang.Object getOrNull(java.util.List,int) -> a
    java.lang.Object last(java.lang.Iterable) -> c
    java.lang.Object last(java.util.List) -> c
    java.lang.Object lastOrNull(java.util.List) -> d
    java.lang.Object single(java.lang.Iterable) -> d
    java.lang.Object single(java.util.List) -> e
    java.lang.Object singleOrNull(java.lang.Iterable) -> e
    java.lang.Object singleOrNull(java.util.List) -> f
    java.util.List drop$13bfd71e(java.lang.Iterable) -> a
    java.util.List dropLast$7294ab4a(java.util.List) -> b
    java.util.List filter(java.lang.Iterable,kotlin.jvm.functions.Function1) -> a
    java.util.List takeLast(java.util.List,int) -> a
    java.util.List sortedWith(java.lang.Iterable,java.util.Comparator) -> a
    int[] toIntArray(java.util.Collection) -> a
    java.util.Collection toCollection(java.lang.Iterable,java.util.Collection) -> a
    java.util.List toList(java.lang.Iterable) -> b
    java.util.List toMutableList(java.lang.Iterable) -> c
    java.util.List toMutableList(java.util.Collection) -> a
    java.util.Set toSet(java.lang.Iterable) -> a
    java.util.List map(java.lang.Iterable,kotlin.jvm.functions.Function1) -> b
    java.lang.Iterable withIndex(java.lang.Iterable) -> a
    java.util.Set toMutableSet(java.lang.Iterable) -> b
    java.lang.Comparable max(java.lang.Iterable) -> a
    java.util.List minus(java.lang.Iterable,java.lang.Object) -> a
    java.util.List plus(java.lang.Iterable,java.lang.Object) -> b
    java.util.List plus(java.util.Collection,java.lang.Object) -> a
    java.util.List plus(java.util.Collection,java.lang.Iterable) -> a
    java.util.List zip(java.lang.Iterable,java.lang.Iterable) -> a
    java.lang.Appendable joinTo(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    java.lang.Appendable joinTo$default$1296cf06(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int) -> a
    java.lang.String joinToString(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    java.lang.String joinToString$default$1494b5c(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int) -> a
    kotlin.sequences.Sequence asSequence(java.lang.Iterable) -> a
kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1 -> kotlin.a.r:
    java.lang.Iterable $this_asSequence$inlined -> a
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> a
kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1 -> kotlin.a.s:
    java.lang.Iterable $this_withIndex -> a
    java.lang.Object invoke() -> invoke
    void <init>(java.lang.Iterable) -> <init>
kotlin.collections.EmptyIterator -> kotlin.a.t:
    kotlin.collections.EmptyIterator INSTANCE -> a
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void remove() -> remove
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
kotlin.collections.EmptyList -> kotlin.a.u:
    long serialVersionUID -> serialVersionUID
    kotlin.collections.EmptyList INSTANCE -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean addAll(int,java.util.Collection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
kotlin.collections.EmptyMap -> kotlin.a.v:
    long serialVersionUID -> serialVersionUID
    kotlin.collections.EmptyMap INSTANCE -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.lang.Object readResolve() -> readResolve
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
kotlin.collections.EmptySet -> kotlin.a.w:
    long serialVersionUID -> serialVersionUID
    kotlin.collections.EmptySet INSTANCE -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.util.Iterator iterator() -> iterator
    java.lang.Object readResolve() -> readResolve
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
kotlin.collections.IndexedValue -> kotlin.a.x:
    int index -> a
    java.lang.Object value -> a
    void <init>(int,java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.collections.IndexingIterable -> kotlin.a.y:
    kotlin.jvm.functions.Function0 iteratorFactory -> a
    java.util.Iterator iterator() -> iterator
    void <init>(kotlin.jvm.functions.Function0) -> <init>
kotlin.collections.IndexingIterator -> kotlin.a.z:
    int index -> a
    java.util.Iterator iterator -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void <init>(java.util.Iterator) -> <init>
    void remove() -> remove
kotlin.collections.IntIterator -> kotlin.a.A:
    java.lang.Object next() -> next
    int nextInt() -> a
    void <init>() -> <init>
    void remove() -> remove
kotlin.collections.MapWithDefault -> kotlin.a.B:
    java.lang.Object getOrImplicitDefault$7713a341() -> a
kotlin.collections.ReversedList -> kotlin.a.C:
    java.util.List delegate -> a
    int getSize() -> a
    java.lang.Object get(int) -> get
    void clear() -> clear
    java.lang.Object removeAt(int) -> a
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    void <init>(java.util.List) -> <init>
kotlin.coroutines.Continuation -> kotlin.b.a:
    kotlin.coroutines.CoroutineContext getContext() -> getContext
    void resumeWith(java.lang.Object) -> resumeWith
kotlin.coroutines.ContinuationInterceptor -> kotlin.b.b:
    kotlin.coroutines.ContinuationInterceptor$Key Key -> a
    kotlin.coroutines.Continuation interceptContinuation$5799e341() -> a
    void <clinit>() -> <clinit>
kotlin.coroutines.ContinuationInterceptor$Key -> kotlin.b.c:
    kotlin.coroutines.ContinuationInterceptor$Key $$INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.coroutines.CoroutineContext -> kotlin.b.d:
    kotlin.coroutines.CoroutineContext$Element get$7cafe664() -> a
kotlin.coroutines.CoroutineContext$Element -> kotlin.b.e:
kotlin.coroutines.intrinsics.CoroutineSingletons -> kotlin.b.a.a:
    kotlin.coroutines.intrinsics.CoroutineSingletons COROUTINE_SUSPENDED -> a
    kotlin.coroutines.intrinsics.CoroutineSingletons[] $VALUES -> a
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.coroutines.intrinsics.CoroutineSingletons[] values() -> values
    kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String) -> valueOf
kotlin.coroutines.jvm.internal.BaseContinuationImpl -> kotlin.b.b.a.a:
    kotlin.coroutines.Continuation completion -> completion
    void resumeWith(java.lang.Object) -> resumeWith
    java.lang.Object invokeSuspend(java.lang.Object) -> invokeSuspend
    void releaseIntercepted() -> releaseIntercepted
    kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation) -> create
    kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation) -> create
    java.lang.String toString() -> toString
    kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame() -> getCallerFrame
    java.lang.StackTraceElement getStackTraceElement() -> getStackTraceElement
    kotlin.coroutines.Continuation getCompletion() -> getCompletion
    void <init>(kotlin.coroutines.Continuation) -> <init>
kotlin.coroutines.jvm.internal.CompletedContinuation -> kotlin.b.b.a.b:
    kotlin.coroutines.jvm.internal.CompletedContinuation INSTANCE -> a
    kotlin.coroutines.CoroutineContext getContext() -> getContext
    void resumeWith(java.lang.Object) -> resumeWith
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.coroutines.jvm.internal.ContinuationImpl -> kotlin.b.b.a.c:
    kotlin.coroutines.Continuation intercepted -> intercepted
    kotlin.coroutines.CoroutineContext _context -> _context
    kotlin.coroutines.CoroutineContext getContext() -> getContext
    kotlin.coroutines.Continuation intercepted() -> intercepted
    void releaseIntercepted() -> releaseIntercepted
    void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext) -> <init>
    void <init>(kotlin.coroutines.Continuation) -> <init>
kotlin.coroutines.jvm.internal.CoroutineStackFrame -> kotlin.b.b.a.d:
kotlin.coroutines.jvm.internal.DebugMetadata -> kotlin.b.b.a.e:
    int v() -> a
    java.lang.String f() -> a
    int[] l() -> a
    java.lang.String m() -> b
    java.lang.String c() -> c
kotlin.coroutines.jvm.internal.ModuleNameRetriever -> kotlin.b.b.a.f:
    kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9 -> a
    kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache -> b
    kotlin.coroutines.jvm.internal.ModuleNameRetriever INSTANCE -> a
    kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache -> kotlin.b.b.a.g:
    java.lang.reflect.Method getModuleMethod -> a
    java.lang.reflect.Method getDescriptorMethod -> b
    java.lang.reflect.Method nameMethod -> c
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
kotlin.internal.PlatformImplementations -> kotlin.c.a:
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    kotlin.random.Random defaultPlatformRandom() -> a
    void <init>() -> <init>
kotlin.internal.PlatformImplementations$ReflectThrowable -> kotlin.c.b:
    java.lang.reflect.Method addSuppressed -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.internal.PlatformImplementationsKt -> kotlin.c.c:
    kotlin.internal.PlatformImplementations IMPLEMENTATIONS -> a
    int getJavaVersion() -> a
    void <clinit>() -> <clinit>
kotlin.internal.jdk7.JDK7PlatformImplementations -> kotlin.c.a.a:
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    void <init>() -> <init>
kotlin.io.ExposingBufferByteArrayOutputStream -> kotlin.d.a:
    byte[] getBuffer() -> a
    void <init>() -> <init>
kotlin.jvm.KotlinReflectionNotSupportedError -> kotlin.e.a:
    void <init>() -> <init>
kotlin.jvm.functions.Function0 -> kotlin.e.a.a:
    java.lang.Object invoke() -> invoke
kotlin.jvm.functions.Function1 -> kotlin.e.a.b:
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.jvm.functions.Function10 -> kotlin.e.a.c:
kotlin.jvm.functions.Function11 -> kotlin.e.a.d:
kotlin.jvm.functions.Function12 -> kotlin.e.a.e:
kotlin.jvm.functions.Function13 -> kotlin.e.a.f:
kotlin.jvm.functions.Function14 -> kotlin.e.a.g:
kotlin.jvm.functions.Function15 -> kotlin.e.a.h:
kotlin.jvm.functions.Function16 -> kotlin.e.a.i:
kotlin.jvm.functions.Function17 -> kotlin.e.a.j:
kotlin.jvm.functions.Function18 -> kotlin.e.a.k:
kotlin.jvm.functions.Function19 -> kotlin.e.a.l:
kotlin.jvm.functions.Function2 -> kotlin.e.a.m:
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
kotlin.jvm.functions.Function20 -> kotlin.e.a.n:
kotlin.jvm.functions.Function21 -> kotlin.e.a.o:
kotlin.jvm.functions.Function22 -> kotlin.e.a.p:
kotlin.jvm.functions.Function3 -> kotlin.e.a.q:
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
kotlin.jvm.functions.Function4 -> kotlin.e.a.r:
kotlin.jvm.functions.Function5 -> kotlin.e.a.s:
kotlin.jvm.functions.Function6 -> kotlin.e.a.t:
kotlin.jvm.functions.Function7 -> kotlin.e.a.u:
kotlin.jvm.functions.Function8 -> kotlin.e.a.v:
kotlin.jvm.functions.Function9 -> kotlin.e.a.w:
kotlin.jvm.internal.ArrayIterator -> kotlin.e.b.a:
    int index -> a
    java.lang.Object[] array -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void <init>(java.lang.Object[]) -> <init>
    void remove() -> remove
kotlin.jvm.internal.CallableReference -> kotlin.e.b.b:
    kotlin.reflect.KCallable reflected -> reflected
    java.lang.Object receiver -> receiver
    java.lang.Class owner -> owner
    java.lang.String name -> name
    java.lang.String signature -> signature
    boolean isTopLevel -> isTopLevel
    java.lang.Object NO_RECEIVER -> NO_RECEIVER
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean) -> <init>
    kotlin.reflect.KCallable computeReflected() -> computeReflected
    java.lang.Object getBoundReceiver() -> getBoundReceiver
    kotlin.reflect.KCallable compute() -> compute
    kotlin.reflect.KCallable getReflected() -> getReflected
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    java.util.List getParameters() -> getParameters
    kotlin.reflect.KType getReturnType() -> getReturnType
    java.util.List getAnnotations() -> getAnnotations
    java.util.List getTypeParameters() -> getTypeParameters
    java.lang.Object call(java.lang.Object[]) -> call
    java.lang.Object callBy(java.util.Map) -> callBy
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isSuspend() -> isSuspend
    void <clinit>() -> <clinit>
kotlin.jvm.internal.CallableReference$NoReceiver -> kotlin.e.b.c:
    kotlin.jvm.internal.CallableReference$NoReceiver INSTANCE -> a
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
    kotlin.jvm.internal.CallableReference$NoReceiver access$000() -> a
    void <clinit>() -> <clinit>
kotlin.jvm.internal.ClassBasedDeclarationContainer -> kotlin.e.b.d:
    java.lang.Class getJClass() -> getJClass
kotlin.jvm.internal.ClassReference -> kotlin.e.b.e:
    java.lang.Class jClass -> a
    java.util.Map FUNCTION_CLASSES -> a
    java.util.HashMap primitiveFqNames -> a
    java.util.HashMap primitiveWrapperFqNames -> b
    java.util.HashMap classFqNames -> c
    java.util.Map simpleNames -> b
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getQualifiedName() -> getQualifiedName
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getConstructors() -> getConstructors
    java.util.Collection getNestedClasses() -> getNestedClasses
    java.util.List getAnnotations() -> getAnnotations
    java.lang.Object getObjectInstance() -> getObjectInstance
    boolean isInstance(java.lang.Object) -> isInstance
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getSupertypes() -> getSupertypes
    java.util.List getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isSealed() -> isSealed
    boolean isData() -> isData
    boolean isInner() -> isInner
    boolean isCompanion() -> isCompanion
    boolean isFun() -> isFun
    java.lang.Void error() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class getJClass() -> getJClass
    void <init>(java.lang.Class) -> <init>
    void <clinit>() -> <clinit>
kotlin.jvm.internal.ClassReference$Companion -> kotlin.e.b.f:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.jvm.internal.CollectionToArray -> kotlin.e.b.g:
    java.lang.Object[] EMPTY -> a
    java.lang.Object[] toArray(java.util.Collection) -> a
    java.lang.Object[] toArray(java.util.Collection,java.lang.Object[]) -> a
    void <clinit>() -> <clinit>
kotlin.jvm.internal.DefaultConstructorMarker -> kotlin.e.b.h:
    void <init>() -> <init>
kotlin.jvm.internal.FunctionBase -> kotlin.e.b.i:
    int getArity() -> getArity
kotlin.jvm.internal.FunctionReference -> kotlin.e.b.j:
    int arity -> arity
    int flags -> flags
    void <init>(int) -> <init>
    void <init>(int,java.lang.Object) -> <init>
    void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    int getArity() -> getArity
    kotlin.reflect.KFunction getReflected() -> getReflected
    kotlin.reflect.KCallable computeReflected() -> computeReflected
    boolean isInline() -> isInline
    boolean isExternal() -> isExternal
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isSuspend() -> isSuspend
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.KCallable getReflected() -> getReflected
kotlin.jvm.internal.FunctionReferenceImpl -> kotlin.e.b.k:
    void <init>(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String) -> <init>
    void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
kotlin.jvm.internal.Intrinsics -> kotlin.e.b.l:
    void <init>() -> <init>
    void throwNpe() -> a
    void throwJavaNpe() -> b
    void throwUninitializedProperty(java.lang.String) -> b
    void throwUninitializedPropertyAccessException(java.lang.String) -> a
    void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String) -> a
    void checkNotNullExpressionValue(java.lang.Object,java.lang.String) -> b
    void checkNotNullParameter(java.lang.Object,java.lang.String) -> c
    void throwParameterIsNullNPE(java.lang.String) -> c
    java.lang.String createParameterIsNullExceptionMessage(java.lang.String) -> a
    int compare(int,int) -> a
    boolean areEqual(java.lang.Object,java.lang.Object) -> a
    void reifiedOperationMarker$4f708078() -> c
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable) -> a
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String) -> a
kotlin.jvm.internal.KTypeBase -> kotlin.e.b.m:
    java.lang.reflect.Type getJavaType() -> a
kotlin.jvm.internal.Lambda -> kotlin.e.b.n:
    int arity -> arity
    java.lang.String toString() -> toString
    int getArity() -> getArity
    void <init>(int) -> <init>
kotlin.jvm.internal.MutablePropertyReference -> kotlin.e.b.o:
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
kotlin.jvm.internal.MutablePropertyReference0 -> kotlin.e.b.p:
kotlin.jvm.internal.MutablePropertyReference1 -> kotlin.e.b.q:
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    kotlin.reflect.KCallable computeReflected() -> computeReflected
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.KProperty1$Getter getGetter() -> getGetter
    kotlin.reflect.KMutableProperty1$Setter getSetter() -> getSetter
    java.lang.Object getDelegate(java.lang.Object) -> getDelegate
    kotlin.reflect.KMutableProperty$Setter getSetter() -> getSetter
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
kotlin.jvm.internal.MutablePropertyReference1Impl -> kotlin.e.b.r:
    void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.Class,java.lang.String,java.lang.String) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    void set(java.lang.Object,java.lang.Object) -> set
kotlin.jvm.internal.MutablePropertyReference2 -> kotlin.e.b.s:
kotlin.jvm.internal.PackageReference -> kotlin.e.b.t:
    java.lang.Class jClass -> a
    java.util.Collection getMembers() -> getMembers
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class getJClass() -> getJClass
    void <init>(java.lang.Class,java.lang.String) -> <init>
kotlin.jvm.internal.PropertyReference -> kotlin.e.b.u:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    kotlin.reflect.KProperty getReflected() -> getReflected
    boolean isLateinit() -> isLateinit
    boolean isConst() -> isConst
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.KCallable getReflected() -> getReflected
kotlin.jvm.internal.PropertyReference0 -> kotlin.e.b.v:
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    kotlin.reflect.KCallable computeReflected() -> computeReflected
    java.lang.Object invoke() -> invoke
    kotlin.reflect.KProperty0$Getter getGetter() -> getGetter
    java.lang.Object getDelegate() -> getDelegate
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
kotlin.jvm.internal.PropertyReference0Impl -> kotlin.e.b.w:
    void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.Class,java.lang.String,java.lang.String) -> <init>
    java.lang.Object get() -> get
kotlin.jvm.internal.PropertyReference1 -> kotlin.e.b.x:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int) -> <init>
    kotlin.reflect.KCallable computeReflected() -> computeReflected
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.KProperty1$Getter getGetter() -> getGetter
    java.lang.Object getDelegate(java.lang.Object) -> getDelegate
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
kotlin.jvm.internal.PropertyReference1Impl -> kotlin.e.b.y:
    void <init>(kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String) -> <init>
    java.lang.Object get(java.lang.Object) -> get
kotlin.jvm.internal.PropertyReference2 -> kotlin.e.b.z:
kotlin.jvm.internal.Ref -> kotlin.e.b.A:
kotlin.jvm.internal.Ref$LongRef -> kotlin.e.b.B:
    long element -> a
    void <init>() -> <init>
    java.lang.String toString() -> toString
kotlin.jvm.internal.Ref$ObjectRef -> kotlin.e.b.C:
    java.lang.Object element -> a
    void <init>() -> <init>
    java.lang.String toString() -> toString
kotlin.jvm.internal.Reflection -> kotlin.e.b.D:
    arrow.core.extensions.ListKTraverse$DefaultImpls factory$2fb20bc2 -> a
    kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class) -> a
    kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String) -> a
    kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class) -> a
    java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda) -> a
    kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference) -> a
    kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0) -> a
    kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1) -> a
    kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1) -> a
    kotlin.reflect.KType nullableTypeOf(java.lang.Class) -> a
    void <clinit>() -> <clinit>
kotlin.jvm.internal.TypeIntrinsics -> kotlin.e.b.E:
    void <init>() -> <init>
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable) -> a
    void throwCce(java.lang.Object,java.lang.String) -> a
    java.util.Collection asMutableCollection(java.lang.Object) -> a
    java.util.Collection castToCollection(java.lang.Object) -> b
    java.util.Set asMutableSet(java.lang.Object) -> a
    java.util.Set castToSet(java.lang.Object) -> b
    boolean isMutableMap(java.lang.Object) -> a
    java.util.Map asMutableMap(java.lang.Object) -> a
    java.util.Map castToMap(java.lang.Object) -> b
    boolean isFunctionOfArity(java.lang.Object,int) -> a
kotlin.jvm.internal.TypeParameterReference -> kotlin.e.b.F:
    java.util.List bounds -> a
    java.lang.Object container -> a
    java.lang.String name -> a
    kotlin.reflect.KVariance variance -> a
    boolean isReified -> a
    java.util.List getUpperBounds() -> getUpperBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    kotlin.reflect.KVariance getVariance() -> getVariance
    boolean isReified() -> isReified
    void <init>(java.lang.Object,java.lang.String,kotlin.reflect.KVariance,boolean) -> <init>
    void <clinit>() -> <clinit>
kotlin.jvm.internal.TypeParameterReference$Companion -> kotlin.e.b.G:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.jvm.internal.TypeParameterReference$Companion$WhenMappings -> kotlin.e.b.H:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.jvm.internal.TypeReference -> kotlin.e.b.I:
    kotlin.reflect.KClassifier classifier -> a
    java.util.List arguments -> a
    boolean isMarkedNullable -> a
    java.util.List getAnnotations() -> getAnnotations
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String asString() -> a
    java.lang.String getArrayClassName(java.lang.Class) -> a
    kotlin.reflect.KClassifier getClassifier() -> getClassifier
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    void <init>(kotlin.reflect.KClassifier,java.util.List,boolean) -> <init>
    java.lang.String access$asString$41d0c014(kotlin.reflect.KTypeProjection) -> a
kotlin.jvm.internal.TypeReference$WhenMappings -> kotlin.e.b.J:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.jvm.internal.TypeReference$asString$args$1 -> kotlin.e.b.K:
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
kotlin.jvm.internal.markers.KMappedMarker -> kotlin.e.b.a.a:
kotlin.jvm.internal.markers.KMutableCollection -> kotlin.e.b.a.b:
kotlin.jvm.internal.markers.KMutableIterable -> kotlin.e.b.a.c:
kotlin.jvm.internal.markers.KMutableIterator -> kotlin.e.b.a.d:
kotlin.jvm.internal.markers.KMutableList -> kotlin.e.b.a.e:
kotlin.jvm.internal.markers.KMutableMap -> kotlin.e.b.a.f:
kotlin.jvm.internal.markers.KMutableSet -> kotlin.e.b.a.g:
kotlin.properties.Delegates -> kotlin.f.a:
    kotlin.properties.Delegates INSTANCE -> a
    kotlin.properties.ReadWriteProperty notNull() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.properties.NotNullVar -> kotlin.f.b:
    java.lang.Object value -> a
    java.lang.Object getValue(java.lang.Object,kotlin.reflect.KProperty) -> getValue
    void setValue(java.lang.Object,kotlin.reflect.KProperty,java.lang.Object) -> setValue
    void <init>() -> <init>
kotlin.properties.ObservableProperty -> kotlin.f.c:
    java.lang.Object value -> value
    boolean beforeChange(kotlin.reflect.KProperty,java.lang.Object,java.lang.Object) -> beforeChange
    void afterChange(kotlin.reflect.KProperty,java.lang.Object,java.lang.Object) -> afterChange
    java.lang.Object getValue(java.lang.Object,kotlin.reflect.KProperty) -> getValue
    void setValue(java.lang.Object,kotlin.reflect.KProperty,java.lang.Object) -> setValue
    void <init>(java.lang.Object) -> <init>
kotlin.properties.ReadWriteProperty -> kotlin.f.d:
    java.lang.Object getValue(java.lang.Object,kotlin.reflect.KProperty) -> getValue
    void setValue(java.lang.Object,kotlin.reflect.KProperty,java.lang.Object) -> setValue
kotlin.random.AbstractPlatformRandom -> kotlin.g.a:
    java.util.Random getImpl() -> a
    int nextBits(int) -> a
    int nextInt() -> a
    long nextLong() -> a
    boolean nextBoolean() -> a
    void <init>() -> <init>
kotlin.random.FallbackThreadLocalRandom -> kotlin.g.b:
    kotlin.random.FallbackThreadLocalRandom$implStorage$1 implStorage -> a
    java.util.Random getImpl() -> a
    void <init>() -> <init>
kotlin.random.FallbackThreadLocalRandom$implStorage$1 -> kotlin.g.c:
    java.lang.Object initialValue() -> initialValue
    void <init>() -> <init>
kotlin.random.Random -> kotlin.g.d:
    kotlin.random.Random defaultRandom -> a
    kotlin.random.Random$Default Default -> a
    int nextBits(int) -> a
    int nextInt() -> a
    int nextInt(int,int) -> a
    long nextLong() -> a
    boolean nextBoolean() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.random.Random access$getDefaultRandom$cp() -> a
kotlin.random.Random$Default -> kotlin.g.e:
    int nextBits(int) -> a
    int nextInt() -> a
    int nextInt(int,int) -> a
    long nextLong() -> a
    boolean nextBoolean() -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.ranges.IntProgression -> kotlin.h.a:
    int first -> a
    int last -> b
    int step -> c
    kotlin.ranges.IntProgression$Companion Companion -> a
    java.util.Iterator iterator() -> iterator
    boolean isEmpty() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.ranges.IntProgression$Companion -> kotlin.h.b:
    kotlin.ranges.IntProgression fromClosedRange(int,int,int) -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.ranges.IntProgressionIterator -> kotlin.h.c:
    int finalElement -> a
    boolean hasNext -> a
    int next -> b
    int step -> c
    boolean hasNext() -> hasNext
    int nextInt() -> a
    void <init>(int,int,int) -> <init>
kotlin.ranges.IntRange -> kotlin.h.d:
    kotlin.ranges.IntRange EMPTY -> a
    kotlin.ranges.IntRange$Companion Companion -> a
    boolean isEmpty() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(int,int) -> <init>
    void <clinit>() -> <clinit>
    kotlin.ranges.IntRange access$getEMPTY$cp() -> a
kotlin.ranges.IntRange$Companion -> kotlin.h.e:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.reflect.GenericArrayTypeImpl -> kotlin.reflect.GenericArrayTypeImpl:
    java.lang.reflect.Type elementType -> elementType
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    java.lang.String getTypeName() -> getTypeName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.reflect.Type) -> <init>
kotlin.reflect.KAnnotatedElement -> kotlin.reflect.KAnnotatedElement:
    java.util.List getAnnotations() -> getAnnotations
kotlin.reflect.KCallable -> kotlin.reflect.KCallable:
    java.lang.String getName() -> getName
    java.util.List getParameters() -> getParameters
    kotlin.reflect.KType getReturnType() -> getReturnType
    java.util.List getTypeParameters() -> getTypeParameters
    java.lang.Object call(java.lang.Object[]) -> call
    java.lang.Object callBy(java.util.Map) -> callBy
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isSuspend() -> isSuspend
kotlin.reflect.KCallable$DefaultImpls -> kotlin.reflect.KCallable$DefaultImpls:
    void getTypeParameters$annotations() -> getTypeParameters$annotations
    void getVisibility$annotations() -> getVisibility$annotations
    void isFinal$annotations() -> isFinal$annotations
    void isOpen$annotations() -> isOpen$annotations
    void isAbstract$annotations() -> isAbstract$annotations
    void isSuspend$annotations() -> isSuspend$annotations
kotlin.reflect.KClass -> kotlin.reflect.KClass:
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getQualifiedName() -> getQualifiedName
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getConstructors() -> getConstructors
    java.util.Collection getNestedClasses() -> getNestedClasses
    java.lang.Object getObjectInstance() -> getObjectInstance
    boolean isInstance(java.lang.Object) -> isInstance
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getSupertypes() -> getSupertypes
    java.util.List getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isSealed() -> isSealed
    boolean isData() -> isData
    boolean isInner() -> isInner
    boolean isCompanion() -> isCompanion
    boolean isFun() -> isFun
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
kotlin.reflect.KClass$DefaultImpls -> kotlin.reflect.KClass$DefaultImpls:
    void getTypeParameters$annotations() -> getTypeParameters$annotations
    void getSupertypes$annotations() -> getSupertypes$annotations
    void getSealedSubclasses$annotations() -> getSealedSubclasses$annotations
    void getVisibility$annotations() -> getVisibility$annotations
    void isFinal$annotations() -> isFinal$annotations
    void isOpen$annotations() -> isOpen$annotations
    void isAbstract$annotations() -> isAbstract$annotations
    void isSealed$annotations() -> isSealed$annotations
    void isData$annotations() -> isData$annotations
    void isInner$annotations() -> isInner$annotations
    void isCompanion$annotations() -> isCompanion$annotations
    void isFun$annotations() -> isFun$annotations
kotlin.reflect.KClasses -> kotlin.reflect.KClasses:
    java.lang.Object cast(kotlin.reflect.KClass,java.lang.Object) -> cast
    java.lang.Object safeCast(kotlin.reflect.KClass,java.lang.Object) -> safeCast
kotlin.reflect.KClassesImplKt -> kotlin.reflect.KClassesImplKt:
    java.lang.String getQualifiedOrSimpleName(kotlin.reflect.KClass) -> getQualifiedOrSimpleName
kotlin.reflect.KClassifier -> kotlin.reflect.KClassifier:
kotlin.reflect.KDeclarationContainer -> kotlin.reflect.KDeclarationContainer:
    java.util.Collection getMembers() -> getMembers
kotlin.reflect.KFunction -> kotlin.reflect.KFunction:
    boolean isInline() -> isInline
    boolean isExternal() -> isExternal
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isSuspend() -> isSuspend
kotlin.reflect.KFunction$DefaultImpls -> kotlin.reflect.KFunction$DefaultImpls:
    void isInline$annotations() -> isInline$annotations
    void isExternal$annotations() -> isExternal$annotations
    void isOperator$annotations() -> isOperator$annotations
    void isInfix$annotations() -> isInfix$annotations
    void isSuspend$annotations() -> isSuspend$annotations
kotlin.reflect.KMutableProperty -> kotlin.reflect.KMutableProperty:
    kotlin.reflect.KMutableProperty$Setter getSetter() -> getSetter
kotlin.reflect.KMutableProperty$Setter -> kotlin.reflect.KMutableProperty$Setter:
kotlin.reflect.KMutableProperty0 -> kotlin.reflect.KMutableProperty0:
    void set(java.lang.Object) -> set
    kotlin.reflect.KMutableProperty0$Setter getSetter() -> getSetter
kotlin.reflect.KMutableProperty0$Setter -> kotlin.reflect.KMutableProperty0$Setter:
kotlin.reflect.KMutableProperty1 -> kotlin.reflect.KMutableProperty1:
    void set(java.lang.Object,java.lang.Object) -> set
    kotlin.reflect.KMutableProperty1$Setter getSetter() -> getSetter
kotlin.reflect.KMutableProperty1$Setter -> kotlin.reflect.KMutableProperty1$Setter:
kotlin.reflect.KMutableProperty2 -> kotlin.reflect.KMutableProperty2:
    void set(java.lang.Object,java.lang.Object,java.lang.Object) -> set
    kotlin.reflect.KMutableProperty2$Setter getSetter() -> getSetter
kotlin.reflect.KMutableProperty2$Setter -> kotlin.reflect.KMutableProperty2$Setter:
kotlin.reflect.KParameter -> kotlin.reflect.KParameter:
    int getIndex() -> getIndex
    java.lang.String getName() -> getName
    kotlin.reflect.KType getType() -> getType
    kotlin.reflect.KParameter$Kind getKind() -> getKind
    boolean isOptional() -> isOptional
    boolean isVararg() -> isVararg
kotlin.reflect.KParameter$DefaultImpls -> kotlin.reflect.KParameter$DefaultImpls:
    void isVararg$annotations() -> isVararg$annotations
kotlin.reflect.KParameter$Kind -> kotlin.reflect.KParameter$Kind:
    kotlin.reflect.KParameter$Kind INSTANCE -> INSTANCE
    kotlin.reflect.KParameter$Kind EXTENSION_RECEIVER -> EXTENSION_RECEIVER
    kotlin.reflect.KParameter$Kind VALUE -> VALUE
    kotlin.reflect.KParameter$Kind[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.KParameter$Kind[] values() -> values
    kotlin.reflect.KParameter$Kind valueOf(java.lang.String) -> valueOf
kotlin.reflect.KProperty -> kotlin.reflect.KProperty:
    boolean isLateinit() -> isLateinit
    boolean isConst() -> isConst
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
kotlin.reflect.KProperty$Accessor -> kotlin.reflect.KProperty$Accessor:
    kotlin.reflect.KProperty getProperty() -> getProperty
kotlin.reflect.KProperty$DefaultImpls -> kotlin.reflect.KProperty$DefaultImpls:
    void isLateinit$annotations() -> isLateinit$annotations
    void isConst$annotations() -> isConst$annotations
kotlin.reflect.KProperty$Getter -> kotlin.reflect.KProperty$Getter:
kotlin.reflect.KProperty0 -> kotlin.reflect.KProperty0:
    java.lang.Object get() -> get
    java.lang.Object getDelegate() -> getDelegate
    kotlin.reflect.KProperty0$Getter getGetter() -> getGetter
kotlin.reflect.KProperty0$Getter -> kotlin.reflect.KProperty0$Getter:
kotlin.reflect.KProperty1 -> kotlin.reflect.KProperty1:
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getDelegate(java.lang.Object) -> getDelegate
    kotlin.reflect.KProperty1$Getter getGetter() -> getGetter
kotlin.reflect.KProperty1$Getter -> kotlin.reflect.KProperty1$Getter:
kotlin.reflect.KProperty2 -> kotlin.reflect.KProperty2:
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object getDelegate(java.lang.Object,java.lang.Object) -> getDelegate
    kotlin.reflect.KProperty2$Getter getGetter() -> getGetter
kotlin.reflect.KProperty2$Getter -> kotlin.reflect.KProperty2$Getter:
kotlin.reflect.KType -> kotlin.reflect.KType:
    kotlin.reflect.KClassifier getClassifier() -> getClassifier
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
kotlin.reflect.KType$DefaultImpls -> kotlin.reflect.KType$DefaultImpls:
    void getClassifier$annotations() -> getClassifier$annotations
    void getArguments$annotations() -> getArguments$annotations
kotlin.reflect.KTypeParameter -> kotlin.reflect.KTypeParameter:
    java.lang.String getName() -> getName
    java.util.List getUpperBounds() -> getUpperBounds
    kotlin.reflect.KVariance getVariance() -> getVariance
    boolean isReified() -> isReified
kotlin.reflect.KTypeProjection -> kotlin.reflect.KTypeProjection:
    kotlin.reflect.KVariance variance -> variance
    kotlin.reflect.KType type -> type
    kotlin.reflect.KTypeProjection star -> star
    kotlin.reflect.KTypeProjection$Companion Companion -> Companion
    java.lang.String toString() -> toString
    kotlin.reflect.KVariance getVariance() -> getVariance
    kotlin.reflect.KType getType() -> getType
    void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.KVariance component1() -> component1
    kotlin.reflect.KType component2() -> component2
    kotlin.reflect.KTypeProjection copy(kotlin.reflect.KVariance,kotlin.reflect.KType) -> copy
    kotlin.reflect.KTypeProjection copy$default(kotlin.reflect.KTypeProjection,kotlin.reflect.KVariance,kotlin.reflect.KType,int,java.lang.Object) -> copy$default
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType) -> invariant
    kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType) -> contravariant
    kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType) -> covariant
kotlin.reflect.KTypeProjection$Companion -> kotlin.reflect.KTypeProjection$Companion:
    void getStar$annotations() -> getStar$annotations
    kotlin.reflect.KTypeProjection getSTAR() -> getSTAR
    kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType) -> invariant
    kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType) -> contravariant
    kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType) -> covariant
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.KTypeProjection$WhenMappings -> kotlin.reflect.KTypeProjection$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.KVariance -> kotlin.reflect.KVariance:
    kotlin.reflect.KVariance INVARIANT -> INVARIANT
    kotlin.reflect.KVariance IN -> IN
    kotlin.reflect.KVariance OUT -> OUT
    kotlin.reflect.KVariance[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.KVariance[] values() -> values
    kotlin.reflect.KVariance valueOf(java.lang.String) -> valueOf
kotlin.reflect.KVisibility -> kotlin.reflect.KVisibility:
    kotlin.reflect.KVisibility PUBLIC -> PUBLIC
    kotlin.reflect.KVisibility PROTECTED -> PROTECTED
    kotlin.reflect.KVisibility INTERNAL -> INTERNAL
    kotlin.reflect.KVisibility PRIVATE -> PRIVATE
    kotlin.reflect.KVisibility[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.KVisibility[] values() -> values
    kotlin.reflect.KVisibility valueOf(java.lang.String) -> valueOf
kotlin.reflect.ParameterizedTypeImpl -> kotlin.reflect.ParameterizedTypeImpl:
    java.lang.reflect.Type[] typeArguments -> typeArguments
    java.lang.Class rawType -> rawType
    java.lang.reflect.Type ownerType -> ownerType
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.String getTypeName() -> getTypeName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List) -> <init>
kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 -> kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1:
    kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.reflect.Type) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.TypeImpl -> kotlin.reflect.TypeImpl:
    java.lang.String getTypeName() -> getTypeName
kotlin.reflect.TypeOfKt -> kotlin.reflect.TypeOfKt:
    kotlin.reflect.KType typeOf() -> typeOf
kotlin.reflect.TypeVariableImpl -> kotlin.reflect.TypeVariableImpl:
    kotlin.reflect.KTypeParameter typeParameter -> typeParameter
    java.lang.String getName() -> getName
    java.lang.reflect.GenericDeclaration getGenericDeclaration() -> getGenericDeclaration
    java.lang.reflect.Type[] getBounds() -> getBounds
    java.lang.String getTypeName() -> getTypeName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    java.lang.annotation.Annotation[] getAnnotatedBounds() -> getAnnotatedBounds
    void <init>(kotlin.reflect.KTypeParameter) -> <init>
kotlin.reflect.TypesJVMKt -> kotlin.reflect.TypesJVMKt:
    void getJavaType$annotations(kotlin.reflect.KType) -> getJavaType$annotations
    java.lang.reflect.Type getJavaType(kotlin.reflect.KType) -> getJavaType
    java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean) -> computeJavaType
    java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType,boolean,int,java.lang.Object) -> computeJavaType$default
    java.lang.reflect.Type createPossiblyInnerType(java.lang.Class,java.util.List) -> createPossiblyInnerType
    void getJavaType$annotations(kotlin.reflect.KTypeProjection) -> getJavaType$annotations
    java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection) -> getJavaType
    java.lang.String typeToString(java.lang.reflect.Type) -> typeToString
    java.lang.reflect.Type access$computeJavaType(kotlin.reflect.KType,boolean) -> access$computeJavaType
    java.lang.String access$typeToString(java.lang.reflect.Type) -> access$typeToString
kotlin.reflect.TypesJVMKt$WhenMappings -> kotlin.reflect.TypesJVMKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 -> kotlin.reflect.TypesJVMKt$typeToString$unwrap$1:
    kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Class invoke(java.lang.Class) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.WildcardTypeImpl -> kotlin.reflect.WildcardTypeImpl:
    java.lang.reflect.Type upperBound -> upperBound
    java.lang.reflect.Type lowerBound -> lowerBound
    kotlin.reflect.WildcardTypeImpl STAR -> STAR
    kotlin.reflect.WildcardTypeImpl$Companion Companion -> Companion
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    java.lang.String getTypeName() -> getTypeName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.reflect.Type,java.lang.reflect.Type) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.WildcardTypeImpl access$getSTAR$cp() -> access$getSTAR$cp
kotlin.reflect.WildcardTypeImpl$Companion -> kotlin.reflect.WildcardTypeImpl$Companion:
    kotlin.reflect.WildcardTypeImpl getSTAR() -> getSTAR
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.full.IllegalCallableAccessException -> kotlin.reflect.full.IllegalCallableAccessException:
    void <init>(java.lang.IllegalAccessException) -> <init>
kotlin.reflect.full.IllegalPropertyDelegateAccessException -> kotlin.reflect.full.IllegalPropertyDelegateAccessException:
    void <init>(java.lang.IllegalAccessException) -> <init>
kotlin.reflect.full.KAnnotatedElements -> kotlin.reflect.full.KAnnotatedElements:
    java.lang.annotation.Annotation findAnnotation(kotlin.reflect.KAnnotatedElement) -> findAnnotation
    boolean hasAnnotation(kotlin.reflect.KAnnotatedElement) -> hasAnnotation
kotlin.reflect.full.KCallables -> kotlin.reflect.full.KCallables:
    void instanceParameter$annotations(kotlin.reflect.KCallable) -> instanceParameter$annotations
    kotlin.reflect.KParameter getInstanceParameter(kotlin.reflect.KCallable) -> getInstanceParameter
    void extensionReceiverParameter$annotations(kotlin.reflect.KCallable) -> extensionReceiverParameter$annotations
    kotlin.reflect.KParameter getExtensionReceiverParameter(kotlin.reflect.KCallable) -> getExtensionReceiverParameter
    void valueParameters$annotations(kotlin.reflect.KCallable) -> valueParameters$annotations
    java.util.List getValueParameters(kotlin.reflect.KCallable) -> getValueParameters
    kotlin.reflect.KParameter findParameterByName(kotlin.reflect.KCallable,java.lang.String) -> findParameterByName
    java.lang.Object callSuspend(kotlin.reflect.KCallable,java.lang.Object[],kotlin.coroutines.Continuation) -> callSuspend
    java.lang.Object callSuspendBy(kotlin.reflect.KCallable,java.util.Map,kotlin.coroutines.Continuation) -> callSuspendBy
kotlin.reflect.full.KCallables$callSuspend$1 -> kotlin.reflect.full.KCallables$callSuspend$1:
    java.lang.Object result -> result
    int label -> label
    java.lang.Object L$0 -> L$0
    java.lang.Object L$1 -> L$1
    java.lang.Object invokeSuspend(java.lang.Object) -> invokeSuspend
    void <init>(kotlin.coroutines.Continuation) -> <init>
kotlin.reflect.full.KCallables$callSuspendBy$1 -> kotlin.reflect.full.KCallables$callSuspendBy$1:
    java.lang.Object result -> result
    int label -> label
    java.lang.Object L$0 -> L$0
    java.lang.Object L$1 -> L$1
    java.lang.Object L$2 -> L$2
    java.lang.Object invokeSuspend(java.lang.Object) -> invokeSuspend
    void <init>(kotlin.coroutines.Continuation) -> <init>
kotlin.reflect.full.KClasses -> kotlin.reflect.full.KClasses:
    void primaryConstructor$annotations(kotlin.reflect.KClass) -> primaryConstructor$annotations
    kotlin.reflect.KFunction getPrimaryConstructor(kotlin.reflect.KClass) -> getPrimaryConstructor
    void companionObject$annotations(kotlin.reflect.KClass) -> companionObject$annotations
    kotlin.reflect.KClass getCompanionObject(kotlin.reflect.KClass) -> getCompanionObject
    void companionObjectInstance$annotations(kotlin.reflect.KClass) -> companionObjectInstance$annotations
    java.lang.Object getCompanionObjectInstance(kotlin.reflect.KClass) -> getCompanionObjectInstance
    void defaultType$annotations(kotlin.reflect.KClass) -> defaultType$annotations
    kotlin.reflect.KType getDefaultType(kotlin.reflect.KClass) -> getDefaultType
    void declaredMembers$annotations(kotlin.reflect.KClass) -> declaredMembers$annotations
    java.util.Collection getDeclaredMembers(kotlin.reflect.KClass) -> getDeclaredMembers
    void functions$annotations(kotlin.reflect.KClass) -> functions$annotations
    java.util.Collection getFunctions(kotlin.reflect.KClass) -> getFunctions
    void staticFunctions$annotations(kotlin.reflect.KClass) -> staticFunctions$annotations
    java.util.Collection getStaticFunctions(kotlin.reflect.KClass) -> getStaticFunctions
    void memberFunctions$annotations(kotlin.reflect.KClass) -> memberFunctions$annotations
    java.util.Collection getMemberFunctions(kotlin.reflect.KClass) -> getMemberFunctions
    void memberExtensionFunctions$annotations(kotlin.reflect.KClass) -> memberExtensionFunctions$annotations
    java.util.Collection getMemberExtensionFunctions(kotlin.reflect.KClass) -> getMemberExtensionFunctions
    void declaredFunctions$annotations(kotlin.reflect.KClass) -> declaredFunctions$annotations
    java.util.Collection getDeclaredFunctions(kotlin.reflect.KClass) -> getDeclaredFunctions
    void declaredMemberFunctions$annotations(kotlin.reflect.KClass) -> declaredMemberFunctions$annotations
    java.util.Collection getDeclaredMemberFunctions(kotlin.reflect.KClass) -> getDeclaredMemberFunctions
    void declaredMemberExtensionFunctions$annotations(kotlin.reflect.KClass) -> declaredMemberExtensionFunctions$annotations
    java.util.Collection getDeclaredMemberExtensionFunctions(kotlin.reflect.KClass) -> getDeclaredMemberExtensionFunctions
    void staticProperties$annotations(kotlin.reflect.KClass) -> staticProperties$annotations
    java.util.Collection getStaticProperties(kotlin.reflect.KClass) -> getStaticProperties
    void memberProperties$annotations(kotlin.reflect.KClass) -> memberProperties$annotations
    java.util.Collection getMemberProperties(kotlin.reflect.KClass) -> getMemberProperties
    void memberExtensionProperties$annotations(kotlin.reflect.KClass) -> memberExtensionProperties$annotations
    java.util.Collection getMemberExtensionProperties(kotlin.reflect.KClass) -> getMemberExtensionProperties
    void declaredMemberProperties$annotations(kotlin.reflect.KClass) -> declaredMemberProperties$annotations
    java.util.Collection getDeclaredMemberProperties(kotlin.reflect.KClass) -> getDeclaredMemberProperties
    void declaredMemberExtensionProperties$annotations(kotlin.reflect.KClass) -> declaredMemberExtensionProperties$annotations
    java.util.Collection getDeclaredMemberExtensionProperties(kotlin.reflect.KClass) -> getDeclaredMemberExtensionProperties
    boolean isExtension(kotlin.reflect.jvm.internal.KCallableImpl) -> isExtension
    boolean isNotExtension(kotlin.reflect.jvm.internal.KCallableImpl) -> isNotExtension
    void superclasses$annotations(kotlin.reflect.KClass) -> superclasses$annotations
    java.util.List getSuperclasses(kotlin.reflect.KClass) -> getSuperclasses
    void allSupertypes$annotations(kotlin.reflect.KClass) -> allSupertypes$annotations
    java.util.Collection getAllSupertypes(kotlin.reflect.KClass) -> getAllSupertypes
    void allSuperclasses$annotations(kotlin.reflect.KClass) -> allSuperclasses$annotations
    java.util.Collection getAllSuperclasses(kotlin.reflect.KClass) -> getAllSuperclasses
    boolean isSubclassOf(kotlin.reflect.KClass,kotlin.reflect.KClass) -> isSubclassOf
    boolean isSuperclassOf(kotlin.reflect.KClass,kotlin.reflect.KClass) -> isSuperclassOf
    java.lang.Object cast(kotlin.reflect.KClass,java.lang.Object) -> cast
    java.lang.Object safeCast(kotlin.reflect.KClass,java.lang.Object) -> safeCast
    java.lang.Object createInstance(kotlin.reflect.KClass) -> createInstance
kotlin.reflect.full.KClasses$allSupertypes$1 -> kotlin.reflect.full.KClasses$allSupertypes$1:
    kotlin.reflect.full.KClasses$allSupertypes$1 INSTANCE -> INSTANCE
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.lang.Iterable getNeighbors(kotlin.reflect.KType) -> getNeighbors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.full.KClasses$allSupertypes$1$1$1$1 -> kotlin.reflect.full.KClasses$allSupertypes$1$1$1$1:
    kotlin.reflect.full.KClasses$allSupertypes$1$1$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke() -> invoke
    java.lang.Void invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.full.KClasses$allSupertypes$2 -> kotlin.reflect.full.KClasses$allSupertypes$2:
    boolean beforeChildren(kotlin.reflect.KType) -> beforeChildren
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    void <init>() -> <init>
kotlin.reflect.full.KClasses$defaultType$1 -> kotlin.reflect.full.KClasses$defaultType$1:
    kotlin.reflect.KClass $this_defaultType -> $this_defaultType
    java.lang.Object invoke() -> invoke
    java.lang.Class invoke() -> invoke
    void <init>(kotlin.reflect.KClass) -> <init>
kotlin.reflect.full.KClasses$isSubclassOf$1 -> kotlin.reflect.full.KClasses$isSubclassOf$1:
    kotlin.reflect.KProperty1 INSTANCE -> INSTANCE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.Object get(java.lang.Object) -> get
kotlin.reflect.full.KClasses$isSubclassOf$2 -> kotlin.reflect.full.KClasses$isSubclassOf$2:
    kotlin.reflect.KClass $base -> $base
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.KClass) -> invoke
    void <init>(kotlin.reflect.KClass) -> <init>
kotlin.reflect.full.KClasses$sam$org_jetbrains_kotlin_utils_DFS_Neighbors$0 -> kotlin.reflect.full.KClasses$sam$org_jetbrains_kotlin_utils_DFS_Neighbors$0:
    kotlin.jvm.functions.Function1 function -> function
    void <init>(kotlin.jvm.functions.Function1) -> <init>
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
kotlin.reflect.full.KClassifiers -> kotlin.reflect.full.KClassifiers:
    kotlin.reflect.KType createType(kotlin.reflect.KClassifier,java.util.List,boolean,java.util.List) -> createType
    kotlin.reflect.KType createType$default(kotlin.reflect.KClassifier,java.util.List,boolean,java.util.List,int,java.lang.Object) -> createType$default
    kotlin.reflect.jvm.internal.impl.types.SimpleType createKotlinType(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean) -> createKotlinType
    void starProjectedType$annotations(kotlin.reflect.KClassifier) -> starProjectedType$annotations
    kotlin.reflect.KType getStarProjectedType(kotlin.reflect.KClassifier) -> getStarProjectedType
kotlin.reflect.full.KClassifiers$WhenMappings -> kotlin.reflect.full.KClassifiers$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.full.KClassifiers$createType$1 -> kotlin.reflect.full.KClassifiers$createType$1:
    kotlin.reflect.KClassifier $this_createType -> $this_createType
    java.lang.Object invoke() -> invoke
    java.lang.Void invoke() -> invoke
    void <init>(kotlin.reflect.KClassifier) -> <init>
kotlin.reflect.full.KProperties -> kotlin.reflect.full.KProperties:
    java.lang.Object getExtensionDelegate(kotlin.reflect.KProperty1) -> getExtensionDelegate
    java.lang.Object getExtensionDelegate(kotlin.reflect.KProperty2,java.lang.Object) -> getExtensionDelegate
kotlin.reflect.full.KTypes -> kotlin.reflect.full.KTypes:
    kotlin.reflect.KType withNullability(kotlin.reflect.KType,boolean) -> withNullability
    boolean isSubtypeOf(kotlin.reflect.KType,kotlin.reflect.KType) -> isSubtypeOf
    boolean isSupertypeOf(kotlin.reflect.KType,kotlin.reflect.KType) -> isSupertypeOf
kotlin.reflect.full.KTypes$withNullability$1 -> kotlin.reflect.full.KTypes$withNullability$1:
    kotlin.reflect.KType $this_withNullability -> $this_withNullability
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
    void <init>(kotlin.reflect.KType) -> <init>
kotlin.reflect.full.KTypes$withNullability$2 -> kotlin.reflect.full.KTypes$withNullability$2:
    kotlin.reflect.KType $this_withNullability -> $this_withNullability
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
    void <init>(kotlin.reflect.KType) -> <init>
kotlin.reflect.full.KTypes$withNullability$3 -> kotlin.reflect.full.KTypes$withNullability$3:
    kotlin.reflect.KType $this_withNullability -> $this_withNullability
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
    void <init>(kotlin.reflect.KType) -> <init>
kotlin.reflect.full.NoSuchPropertyException -> kotlin.reflect.full.NoSuchPropertyException:
    void <init>(java.lang.Exception) -> <init>
    void <init>(java.lang.Exception,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
kotlin.reflect.jvm.KCallablesJvm -> kotlin.reflect.jvm.KCallablesJvm:
    boolean isAccessible(kotlin.reflect.KCallable) -> isAccessible
    void setAccessible(kotlin.reflect.KCallable,boolean) -> setAccessible
kotlin.reflect.jvm.KClassesJvm -> kotlin.reflect.jvm.KClassesJvm:
    java.lang.String getJvmName(kotlin.reflect.KClass) -> getJvmName
kotlin.reflect.jvm.KTypesJvm -> kotlin.reflect.jvm.KTypesJvm:
    void jvmErasure$annotations(kotlin.reflect.KType) -> jvmErasure$annotations
    kotlin.reflect.KClass getJvmErasure(kotlin.reflect.KType) -> getJvmErasure
    kotlin.reflect.KClass getJvmErasure(kotlin.reflect.KClassifier) -> getJvmErasure
kotlin.reflect.jvm.ReflectJvmMapping -> kotlin.reflect.jvm.ReflectJvmMapping:
    java.lang.reflect.Field getJavaField(kotlin.reflect.KProperty) -> getJavaField
    java.lang.reflect.Method getJavaGetter(kotlin.reflect.KProperty) -> getJavaGetter
    java.lang.reflect.Method getJavaSetter(kotlin.reflect.KMutableProperty) -> getJavaSetter
    java.lang.reflect.Method getJavaMethod(kotlin.reflect.KFunction) -> getJavaMethod
    void javaConstructor$annotations(kotlin.reflect.KFunction) -> javaConstructor$annotations
    java.lang.reflect.Constructor getJavaConstructor(kotlin.reflect.KFunction) -> getJavaConstructor
    java.lang.reflect.Type getJavaType(kotlin.reflect.KType) -> getJavaType
    kotlin.reflect.KProperty getKotlinProperty(java.lang.reflect.Field) -> getKotlinProperty
    kotlin.reflect.KDeclarationContainer getKPackage(java.lang.reflect.Member) -> getKPackage
    kotlin.reflect.KFunction getKotlinFunction(java.lang.reflect.Method) -> getKotlinFunction
    kotlin.reflect.KFunction getKotlinFunction(java.lang.reflect.Constructor) -> getKotlinFunction
kotlin.reflect.jvm.ReflectJvmMapping$WhenMappings -> kotlin.reflect.jvm.ReflectJvmMapping$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.ReflectLambdaKt -> kotlin.reflect.jvm.ReflectLambdaKt:
    kotlin.reflect.KFunction reflect(kotlin.Function) -> reflect
kotlin.reflect.jvm.ReflectLambdaKt$reflect$descriptor$1 -> kotlin.reflect.jvm.ReflectLambdaKt$reflect$descriptor$1:
    kotlin.reflect.jvm.ReflectLambdaKt$reflect$descriptor$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor invoke(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.EmptyContainerForLocal -> kotlin.reflect.jvm.internal.EmptyContainerForLocal:
    kotlin.reflect.jvm.internal.EmptyContainerForLocal INSTANCE -> INSTANCE
    java.lang.Class getJClass() -> getJClass
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getConstructorDescriptors() -> getConstructorDescriptors
    java.util.Collection getProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> getProperties
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> getFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getLocalProperty(int) -> getLocalProperty
    java.lang.Void fail() -> fail
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.FunctionWithAllInvokes -> kotlin.reflect.jvm.internal.FunctionWithAllInvokes:
kotlin.reflect.jvm.internal.FunctionWithAllInvokes$DefaultImpls -> kotlin.reflect.jvm.internal.FunctionWithAllInvokes$DefaultImpls:
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(kotlin.reflect.jvm.internal.FunctionWithAllInvokes,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.JvmFunctionSignature -> kotlin.reflect.jvm.internal.JvmFunctionSignature:
    java.lang.String asString() -> asString
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor -> kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor:
    java.util.List methods -> methods
    java.lang.Class jClass -> jClass
    java.util.List getMethods() -> getMethods
    java.lang.String asString() -> asString
    void <init>(java.lang.Class) -> <init>
kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor$$special$$inlined$sortedBy$1 -> kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor$$special$$inlined$sortedBy$1:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor$asString$1 -> kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor$asString$1:
    kotlin.reflect.jvm.internal.JvmFunctionSignature$FakeJavaAnnotationConstructor$asString$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.reflect.Method) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaConstructor -> kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaConstructor:
    java.lang.reflect.Constructor constructor -> constructor
    java.lang.String asString() -> asString
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    void <init>(java.lang.reflect.Constructor) -> <init>
kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaConstructor$asString$1 -> kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaConstructor$asString$1:
    kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaConstructor$asString$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.Class) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaMethod -> kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaMethod:
    java.lang.reflect.Method method -> method
    java.lang.String asString() -> asString
    java.lang.reflect.Method getMethod() -> getMethod
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinConstructor -> kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinConstructor:
    java.lang.String _signature -> _signature
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method signature -> signature
    java.lang.String getConstructorDesc() -> getConstructorDesc
    java.lang.String asString() -> asString
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method) -> <init>
kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction -> kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction:
    java.lang.String _signature -> _signature
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method signature -> signature
    java.lang.String getMethodName() -> getMethodName
    java.lang.String getMethodDesc() -> getMethodDesc
    java.lang.String asString() -> asString
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method) -> <init>
kotlin.reflect.jvm.internal.JvmPropertySignature -> kotlin.reflect.jvm.internal.JvmPropertySignature:
    java.lang.String asString() -> asString
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.JvmPropertySignature$JavaField -> kotlin.reflect.jvm.internal.JvmPropertySignature$JavaField:
    java.lang.reflect.Field field -> field
    java.lang.String asString() -> asString
    java.lang.reflect.Field getField() -> getField
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.JvmPropertySignature$JavaMethodProperty -> kotlin.reflect.jvm.internal.JvmPropertySignature$JavaMethodProperty:
    java.lang.reflect.Method getterMethod -> getterMethod
    java.lang.reflect.Method setterMethod -> setterMethod
    java.lang.String asString() -> asString
    java.lang.reflect.Method getGetterMethod() -> getGetterMethod
    java.lang.reflect.Method getSetterMethod() -> getSetterMethod
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.JvmPropertySignature$KotlinProperty -> kotlin.reflect.jvm.internal.JvmPropertySignature$KotlinProperty:
    java.lang.String string -> string
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor descriptor -> descriptor
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property proto -> proto
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature signature -> signature
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    java.lang.String getManglingSuffix() -> getManglingSuffix
    java.lang.String asString() -> asString
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature getSignature() -> getSignature
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> <init>
kotlin.reflect.jvm.internal.JvmPropertySignature$MappedKotlinProperty -> kotlin.reflect.jvm.internal.JvmPropertySignature$MappedKotlinProperty:
    kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction getterSignature -> getterSignature
    kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction setterSignature -> setterSignature
    java.lang.String asString() -> asString
    kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction getGetterSignature() -> getGetterSignature
    kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction getSetterSignature() -> getSetterSignature
    void <init>(kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction,kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl -> kotlin.reflect.jvm.internal.KCallableImpl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal _annotations -> _annotations
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal _parameters -> _parameters
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal _returnType -> _returnType
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal _typeParameters -> _typeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.calls.Caller getCaller() -> getCaller
    kotlin.reflect.jvm.internal.calls.Caller getDefaultCaller() -> getDefaultCaller
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl getContainer() -> getContainer
    boolean isBound() -> isBound
    java.util.List getAnnotations() -> getAnnotations
    java.util.List getParameters() -> getParameters
    kotlin.reflect.KType getReturnType() -> getReturnType
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isAnnotationConstructor() -> isAnnotationConstructor
    java.lang.Object call(java.lang.Object[]) -> call
    java.lang.Object callBy(java.util.Map) -> callBy
    java.lang.Object callDefaultMethod$kotlin_reflection(java.util.Map,kotlin.coroutines.Continuation) -> callDefaultMethod$kotlin_reflection
    java.lang.Object callAnnotationConstructor(java.util.Map) -> callAnnotationConstructor
    java.lang.Object defaultPrimitiveValue(java.lang.reflect.Type) -> defaultPrimitiveValue
    java.lang.reflect.Type extractContinuationArgument() -> extractContinuationArgument
    void <init>() -> <init>
    java.lang.reflect.Type access$extractContinuationArgument(kotlin.reflect.jvm.internal.KCallableImpl) -> access$extractContinuationArgument
kotlin.reflect.jvm.internal.KCallableImpl$_annotations$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_annotations$1:
    kotlin.reflect.jvm.internal.KCallableImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1:
    kotlin.reflect.jvm.internal.KCallableImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.ArrayList invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$$special$$inlined$sortBy$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$$special$$inlined$sortBy$1:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$1:
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor $instanceReceiver -> $instanceReceiver
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$2 -> kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$2:
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor $extensionReceiver -> $extensionReceiver
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$3 -> kotlin.reflect.jvm.internal.KCallableImpl$_parameters$1$3:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor $descriptor -> $descriptor
    int $i -> $i
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,int) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1:
    kotlin.reflect.jvm.internal.KCallableImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KTypeImpl invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1$1:
    kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1 this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl$_returnType$1) -> <init>
kotlin.reflect.jvm.internal.KCallableImpl$_typeParameters$1 -> kotlin.reflect.jvm.internal.KCallableImpl$_typeParameters$1:
    kotlin.reflect.jvm.internal.KCallableImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl) -> <init>
kotlin.reflect.jvm.internal.KClassCacheKt -> kotlin.reflect.jvm.internal.KClassCacheKt:
    kotlin.reflect.jvm.internal.pcollections.HashPMap K_CLASS_CACHE -> K_CLASS_CACHE
    kotlin.reflect.jvm.internal.KClassImpl getOrCreateKotlinClass(java.lang.Class) -> getOrCreateKotlinClass
    void clearKClassCache() -> clearKClassCache
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KClassImpl -> kotlin.reflect.jvm.internal.KClassImpl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal data -> data
    java.lang.Class jClass -> jClass
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal getData() -> getData
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDescriptor() -> getDescriptor
    java.util.List getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope$kotlin_reflection() -> getMemberScope$kotlin_reflection
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope$kotlin_reflection() -> getStaticScope$kotlin_reflection
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getConstructorDescriptors() -> getConstructorDescriptors
    java.util.Collection getProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> getProperties
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> getFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getLocalProperty(int) -> getLocalProperty
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getQualifiedName() -> getQualifiedName
    java.util.Collection getConstructors() -> getConstructors
    java.util.Collection getNestedClasses() -> getNestedClasses
    java.lang.Object getObjectInstance() -> getObjectInstance
    boolean isInstance(java.lang.Object) -> isInstance
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getSupertypes() -> getSupertypes
    java.util.List getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.KVisibility getVisibility() -> getVisibility
    boolean isFinal() -> isFinal
    boolean isOpen() -> isOpen
    boolean isAbstract() -> isAbstract
    boolean isSealed() -> isSealed
    boolean isData() -> isData
    boolean isInner() -> isInner
    boolean isCompanion() -> isCompanion
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Void reportUnresolvedClass() -> reportUnresolvedClass
    java.lang.Class getJClass() -> getJClass
    void <init>(java.lang.Class) -> <init>
    kotlin.reflect.jvm.internal.impl.name.ClassId access$getClassId$p(kotlin.reflect.jvm.internal.KClassImpl) -> access$getClassId$p
    java.lang.Void access$reportUnresolvedClass(kotlin.reflect.jvm.internal.KClassImpl) -> access$reportUnresolvedClass
kotlin.reflect.jvm.internal.KClassImpl$Data -> kotlin.reflect.jvm.internal.KClassImpl$Data:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal descriptor$delegate -> descriptor$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal annotations$delegate -> annotations$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal simpleName$delegate -> simpleName$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal qualifiedName$delegate -> qualifiedName$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal constructors$delegate -> constructors$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal nestedClasses$delegate -> nestedClasses$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal objectInstance$delegate -> objectInstance$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal typeParameters$delegate -> typeParameters$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal supertypes$delegate -> supertypes$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal sealedSubclasses$delegate -> sealedSubclasses$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal declaredNonStaticMembers$delegate -> declaredNonStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal declaredStaticMembers$delegate -> declaredStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal inheritedNonStaticMembers$delegate -> inheritedNonStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal inheritedStaticMembers$delegate -> inheritedStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal allNonStaticMembers$delegate -> allNonStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal allStaticMembers$delegate -> allStaticMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal declaredMembers$delegate -> declaredMembers$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal allMembers$delegate -> allMembers$delegate
    kotlin.reflect.jvm.internal.KClassImpl this$0 -> this$0
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDescriptor() -> getDescriptor
    java.util.List getAnnotations() -> getAnnotations
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getQualifiedName() -> getQualifiedName
    java.lang.String calculateLocalClassName(java.lang.Class) -> calculateLocalClassName
    java.util.Collection getConstructors() -> getConstructors
    java.util.Collection getNestedClasses() -> getNestedClasses
    java.lang.Object getObjectInstance() -> getObjectInstance
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getSupertypes() -> getSupertypes
    java.util.List getSealedSubclasses() -> getSealedSubclasses
    java.util.Collection getDeclaredNonStaticMembers() -> getDeclaredNonStaticMembers
    java.util.Collection getDeclaredStaticMembers() -> getDeclaredStaticMembers
    java.util.Collection getInheritedNonStaticMembers() -> getInheritedNonStaticMembers
    java.util.Collection getInheritedStaticMembers() -> getInheritedStaticMembers
    java.util.Collection getAllNonStaticMembers() -> getAllNonStaticMembers
    java.util.Collection getAllStaticMembers() -> getAllStaticMembers
    java.util.Collection getDeclaredMembers() -> getDeclaredMembers
    java.util.Collection getAllMembers() -> getAllMembers
    void <init>(kotlin.reflect.jvm.internal.KClassImpl) -> <init>
    java.lang.String access$calculateLocalClassName(kotlin.reflect.jvm.internal.KClassImpl$Data,java.lang.Class) -> access$calculateLocalClassName
    java.util.Collection access$getInheritedNonStaticMembers$p(kotlin.reflect.jvm.internal.KClassImpl$Data) -> access$getInheritedNonStaticMembers$p
    java.util.Collection access$getDeclaredStaticMembers$p(kotlin.reflect.jvm.internal.KClassImpl$Data) -> access$getDeclaredStaticMembers$p
    java.util.Collection access$getInheritedStaticMembers$p(kotlin.reflect.jvm.internal.KClassImpl$Data) -> access$getInheritedStaticMembers$p
kotlin.reflect.jvm.internal.KClassImpl$Data$allMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$allMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$allNonStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$allNonStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$allStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$allStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$annotations$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$annotations$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$declaredMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$declaredMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$declaredNonStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$declaredNonStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$declaredStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$declaredStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$inheritedNonStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$inheritedNonStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$inheritedStaticMembers$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$inheritedStaticMembers$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$nestedClasses$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$nestedClasses$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$objectInstance$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$objectInstance$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$qualifiedName$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$qualifiedName$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.String invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$sealedSubclasses$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$sealedSubclasses$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$simpleName$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$simpleName$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.String invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2$$special$$inlined$mapTo$lambda$1 -> kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2$$special$$inlined$mapTo$lambda$1:
    kotlin.reflect.jvm.internal.impl.types.KotlinType $kotlinType -> $kotlinType
    kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2 this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2) -> <init>
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2$3 -> kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2$3:
    kotlin.reflect.jvm.internal.KClassImpl$Data$supertypes$2$3 INSTANCE -> INSTANCE
    java.lang.Object invoke() -> invoke
    java.lang.Class invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KClassImpl$Data$typeParameters$2 -> kotlin.reflect.jvm.internal.KClassImpl$Data$typeParameters$2:
    kotlin.reflect.jvm.internal.KClassImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$WhenMappings -> kotlin.reflect.jvm.internal.KClassImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KClassImpl$data$1 -> kotlin.reflect.jvm.internal.KClassImpl$data$1:
    kotlin.reflect.jvm.internal.KClassImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KClassImpl$Data invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KClassImpl) -> <init>
kotlin.reflect.jvm.internal.KClassImpl$getLocalProperty$2$1$1 -> kotlin.reflect.jvm.internal.KClassImpl$getLocalProperty$2$1$1:
    kotlin.reflect.jvm.internal.KClassImpl$getLocalProperty$2$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor invoke(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KClassifierImpl -> kotlin.reflect.jvm.internal.KClassifierImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDescriptor() -> getDescriptor
kotlin.reflect.jvm.internal.KDeclarationContainerImpl -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl:
    java.lang.Class DEFAULT_CONSTRUCTOR_MARKER -> DEFAULT_CONSTRUCTOR_MARKER
    kotlin.text.Regex LOCAL_PROPERTY_SIGNATURE -> LOCAL_PROPERTY_SIGNATURE
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Companion Companion -> Companion
    java.lang.Class getMethodOwner() -> getMethodOwner
    java.util.Collection getConstructorDescriptors() -> getConstructorDescriptors
    java.util.Collection getProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> getProperties
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> getFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getLocalProperty(int) -> getLocalProperty
    java.util.Collection getMembers(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess) -> getMembers
    kotlin.reflect.jvm.internal.KPropertyImpl createProperty(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> createProperty
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor findPropertyDescriptor(java.lang.String,java.lang.String) -> findPropertyDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor findFunctionDescriptor(java.lang.String,java.lang.String) -> findFunctionDescriptor
    java.lang.reflect.Method lookupMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,boolean) -> lookupMethod
    java.lang.reflect.Method tryGetMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class) -> tryGetMethod
    java.lang.reflect.Constructor tryGetConstructor(java.lang.Class,java.util.List) -> tryGetConstructor
    java.lang.reflect.Method findMethodBySignature(java.lang.String,java.lang.String) -> findMethodBySignature
    java.lang.reflect.Method findDefaultMethod(java.lang.String,java.lang.String,boolean) -> findDefaultMethod
    java.lang.reflect.Constructor findConstructorBySignature(java.lang.String) -> findConstructorBySignature
    java.lang.reflect.Constructor findDefaultConstructor(java.lang.String) -> findDefaultConstructor
    void addParametersAndMasks(java.util.List,java.lang.String,boolean) -> addParametersAndMasks
    java.util.List loadParameterTypes(java.lang.String) -> loadParameterTypes
    java.lang.Class parseType(java.lang.String,int,int) -> parseType
    java.lang.Class loadReturnType(java.lang.String) -> loadReturnType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.KPropertyImpl access$createProperty(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> access$createProperty
    kotlin.text.Regex access$getLOCAL_PROPERTY_SIGNATURE$cp() -> access$getLOCAL_PROPERTY_SIGNATURE$cp
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Companion -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Companion:
    kotlin.text.Regex getLOCAL_PROPERTY_SIGNATURE$kotlin_reflection() -> getLOCAL_PROPERTY_SIGNATURE$kotlin_reflection
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal moduleData$delegate -> moduleData$delegate
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl this$0 -> this$0
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData getModuleData() -> getModuleData
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl) -> <init>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data$moduleData$2 -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data$moduleData$2:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess DECLARED -> DECLARED
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess INHERITED -> INHERITED
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    boolean accept(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> accept
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess[] values() -> values
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$MemberBelonginess valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findFunctionDescriptor$allMembers$1 -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findFunctionDescriptor$allMembers$1:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findFunctionDescriptor$allMembers$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$allMembers$1 -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$allMembers$1:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$allMembers$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$mostVisibleProperties$2 -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$mostVisibleProperties$2:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl$findPropertyDescriptor$mostVisibleProperties$2 INSTANCE -> INSTANCE
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compare(kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compare
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KDeclarationContainerImpl$getMembers$visitor$1 -> kotlin.reflect.jvm.internal.KDeclarationContainerImpl$getMembers$visitor$1:
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl this$0 -> this$0
    kotlin.reflect.jvm.internal.KCallableImpl visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.Unit) -> visitPropertyDescriptor
    java.lang.Object visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.Object) -> visitPropertyDescriptor
    kotlin.reflect.jvm.internal.KCallableImpl visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.Unit) -> visitFunctionDescriptor
    java.lang.Object visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object) -> visitFunctionDescriptor
    kotlin.reflect.jvm.internal.KCallableImpl visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.Unit) -> visitConstructorDescriptor
    java.lang.Object visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.Object) -> visitConstructorDescriptor
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl) -> <init>
kotlin.reflect.jvm.internal.KFunctionImpl -> kotlin.reflect.jvm.internal.KFunctionImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal descriptor$delegate -> descriptor$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal caller$delegate -> caller$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal defaultCaller$delegate -> defaultCaller$delegate
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl container -> container
    java.lang.String signature -> signature
    java.lang.Object rawBoundReceiver -> rawBoundReceiver
    void <clinit>() -> <clinit>
    boolean isBound() -> isBound
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getDescriptor() -> getDescriptor
    java.lang.String getName() -> getName
    kotlin.reflect.jvm.internal.calls.Caller getCaller() -> getCaller
    kotlin.reflect.jvm.internal.calls.Caller getDefaultCaller() -> getDefaultCaller
    java.lang.Object getBoundReceiver() -> getBoundReceiver
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method createStaticMethodCaller(java.lang.reflect.Method) -> createStaticMethodCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method createJvmStaticInObjectCaller(java.lang.reflect.Method) -> createJvmStaticInObjectCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method createInstanceMethodCaller(java.lang.reflect.Method) -> createInstanceMethodCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl createConstructorCaller(java.lang.reflect.Constructor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> createConstructorCaller
    int getArity() -> getArity
    boolean isInline() -> isInline
    boolean isExternal() -> isExternal
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isSuspend() -> isSuspend
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl getContainer() -> getContainer
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> <init>
    java.lang.Object invoke() -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.String access$getSignature$p(kotlin.reflect.jvm.internal.KFunctionImpl) -> access$getSignature$p
    kotlin.reflect.jvm.internal.calls.CallerImpl access$createConstructorCaller(kotlin.reflect.jvm.internal.KFunctionImpl,java.lang.reflect.Constructor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> access$createConstructorCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method access$createInstanceMethodCaller(kotlin.reflect.jvm.internal.KFunctionImpl,java.lang.reflect.Method) -> access$createInstanceMethodCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method access$createJvmStaticInObjectCaller(kotlin.reflect.jvm.internal.KFunctionImpl,java.lang.reflect.Method) -> access$createJvmStaticInObjectCaller
    kotlin.reflect.jvm.internal.calls.CallerImpl$Method access$createStaticMethodCaller(kotlin.reflect.jvm.internal.KFunctionImpl,java.lang.reflect.Method) -> access$createStaticMethodCaller
kotlin.reflect.jvm.internal.KFunctionImpl$caller$2 -> kotlin.reflect.jvm.internal.KFunctionImpl$caller$2:
    kotlin.reflect.jvm.internal.KFunctionImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.calls.Caller invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KFunctionImpl) -> <init>
kotlin.reflect.jvm.internal.KFunctionImpl$defaultCaller$2 -> kotlin.reflect.jvm.internal.KFunctionImpl$defaultCaller$2:
    kotlin.reflect.jvm.internal.KFunctionImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.calls.Caller invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KFunctionImpl) -> <init>
kotlin.reflect.jvm.internal.KFunctionImpl$descriptor$2 -> kotlin.reflect.jvm.internal.KFunctionImpl$descriptor$2:
    kotlin.reflect.jvm.internal.KFunctionImpl this$0 -> this$0
    java.lang.String $name -> $name
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KFunctionImpl,java.lang.String) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty0Impl -> kotlin.reflect.jvm.internal.KMutableProperty0Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _setter -> _setter
    kotlin.reflect.jvm.internal.KMutableProperty0Impl$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty0$Setter getSetter() -> getSetter
    void set(java.lang.Object) -> set
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty0Impl$Setter -> kotlin.reflect.jvm.internal.KMutableProperty0Impl$Setter:
    kotlin.reflect.jvm.internal.KMutableProperty0Impl property -> property
    void invoke(java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty0Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty0Impl) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty0Impl$_setter$1 -> kotlin.reflect.jvm.internal.KMutableProperty0Impl$_setter$1:
    kotlin.reflect.jvm.internal.KMutableProperty0Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty0Impl$Setter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty0Impl) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty1Impl -> kotlin.reflect.jvm.internal.KMutableProperty1Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _setter -> _setter
    kotlin.reflect.jvm.internal.KMutableProperty1Impl$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty1$Setter getSetter() -> getSetter
    void set(java.lang.Object,java.lang.Object) -> set
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty1Impl$Setter -> kotlin.reflect.jvm.internal.KMutableProperty1Impl$Setter:
    kotlin.reflect.jvm.internal.KMutableProperty1Impl property -> property
    void invoke(java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty1Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty1Impl) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty1Impl$_setter$1 -> kotlin.reflect.jvm.internal.KMutableProperty1Impl$_setter$1:
    kotlin.reflect.jvm.internal.KMutableProperty1Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty1Impl$Setter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty1Impl) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty2Impl -> kotlin.reflect.jvm.internal.KMutableProperty2Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _setter -> _setter
    kotlin.reflect.jvm.internal.KMutableProperty2Impl$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty$Setter getSetter() -> getSetter
    kotlin.reflect.KMutableProperty2$Setter getSetter() -> getSetter
    void set(java.lang.Object,java.lang.Object,java.lang.Object) -> set
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty2Impl$Setter -> kotlin.reflect.jvm.internal.KMutableProperty2Impl$Setter:
    kotlin.reflect.jvm.internal.KMutableProperty2Impl property -> property
    void invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty2Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty2Impl) -> <init>
kotlin.reflect.jvm.internal.KMutableProperty2Impl$_setter$1 -> kotlin.reflect.jvm.internal.KMutableProperty2Impl$_setter$1:
    kotlin.reflect.jvm.internal.KMutableProperty2Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KMutableProperty2Impl$Setter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KMutableProperty2Impl) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl -> kotlin.reflect.jvm.internal.KPackageImpl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal data -> data
    java.lang.Class jClass -> jClass
    java.lang.String usageModuleName -> usageModuleName
    java.lang.Class getMethodOwner() -> getMethodOwner
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getScope() -> getScope
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getConstructorDescriptors() -> getConstructorDescriptors
    java.util.Collection getProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> getProperties
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> getFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getLocalProperty(int) -> getLocalProperty
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class getJClass() -> getJClass
    void <init>(java.lang.Class,java.lang.String) -> <init>
    void <init>(java.lang.Class,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$Data -> kotlin.reflect.jvm.internal.KPackageImpl$Data:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal kotlinClass$delegate -> kotlinClass$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal scope$delegate -> scope$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal multifileFacade$delegate -> multifileFacade$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal metadata$delegate -> metadata$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal members$delegate -> members$delegate
    kotlin.reflect.jvm.internal.KPackageImpl this$0 -> this$0
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass getKotlinClass() -> getKotlinClass
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getScope() -> getScope
    java.lang.Class getMultifileFacade() -> getMultifileFacade
    kotlin.Triple getMetadata() -> getMetadata
    java.util.Collection getMembers() -> getMembers
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass access$getKotlinClass$p(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> access$getKotlinClass$p
kotlin.reflect.jvm.internal.KPackageImpl$Data$kotlinClass$2 -> kotlin.reflect.jvm.internal.KPackageImpl$Data$kotlinClass$2:
    kotlin.reflect.jvm.internal.KPackageImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$Data$members$2 -> kotlin.reflect.jvm.internal.KPackageImpl$Data$members$2:
    kotlin.reflect.jvm.internal.KPackageImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$Data$metadata$2 -> kotlin.reflect.jvm.internal.KPackageImpl$Data$metadata$2:
    kotlin.reflect.jvm.internal.KPackageImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.Triple invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$Data$multifileFacade$2 -> kotlin.reflect.jvm.internal.KPackageImpl$Data$multifileFacade$2:
    kotlin.reflect.jvm.internal.KPackageImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.Class invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$Data$scope$2 -> kotlin.reflect.jvm.internal.KPackageImpl$Data$scope$2:
    kotlin.reflect.jvm.internal.KPackageImpl$Data this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl$Data) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$data$1 -> kotlin.reflect.jvm.internal.KPackageImpl$data$1:
    kotlin.reflect.jvm.internal.KPackageImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KPackageImpl$Data invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPackageImpl) -> <init>
kotlin.reflect.jvm.internal.KPackageImpl$getLocalProperty$1$1$1 -> kotlin.reflect.jvm.internal.KPackageImpl$getLocalProperty$1$1$1:
    kotlin.reflect.jvm.internal.KPackageImpl$getLocalProperty$1$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor invoke(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KParameterImpl -> kotlin.reflect.jvm.internal.KParameterImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal descriptor$delegate -> descriptor$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal annotations$delegate -> annotations$delegate
    kotlin.reflect.jvm.internal.KCallableImpl callable -> callable
    int index -> index
    kotlin.reflect.KParameter$Kind kind -> kind
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor getDescriptor() -> getDescriptor
    java.util.List getAnnotations() -> getAnnotations
    java.lang.String getName() -> getName
    kotlin.reflect.KType getType() -> getType
    boolean isOptional() -> isOptional
    boolean isVararg() -> isVararg
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.KCallableImpl getCallable() -> getCallable
    int getIndex() -> getIndex
    kotlin.reflect.KParameter$Kind getKind() -> getKind
    void <init>(kotlin.reflect.jvm.internal.KCallableImpl,int,kotlin.reflect.KParameter$Kind,kotlin.jvm.functions.Function0) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor access$getDescriptor$p(kotlin.reflect.jvm.internal.KParameterImpl) -> access$getDescriptor$p
kotlin.reflect.jvm.internal.KParameterImpl$annotations$2 -> kotlin.reflect.jvm.internal.KParameterImpl$annotations$2:
    kotlin.reflect.jvm.internal.KParameterImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KParameterImpl) -> <init>
kotlin.reflect.jvm.internal.KParameterImpl$type$1 -> kotlin.reflect.jvm.internal.KParameterImpl$type$1:
    kotlin.reflect.jvm.internal.KParameterImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KParameterImpl) -> <init>
kotlin.reflect.jvm.internal.KProperty0Impl -> kotlin.reflect.jvm.internal.KProperty0Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _getter -> _getter
    kotlin.Lazy delegateFieldValue -> delegateFieldValue
    kotlin.reflect.jvm.internal.KProperty0Impl$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty0$Getter getGetter() -> getGetter
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter getGetter() -> getGetter
    java.lang.Object get() -> get
    java.lang.Object getDelegate() -> getDelegate
    java.lang.Object invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.KProperty0Impl$Getter -> kotlin.reflect.jvm.internal.KProperty0Impl$Getter:
    kotlin.reflect.jvm.internal.KProperty0Impl property -> property
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KProperty0Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KProperty0Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty0Impl$_getter$1 -> kotlin.reflect.jvm.internal.KProperty0Impl$_getter$1:
    kotlin.reflect.jvm.internal.KProperty0Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KProperty0Impl$Getter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty0Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty0Impl$delegateFieldValue$1 -> kotlin.reflect.jvm.internal.KProperty0Impl$delegateFieldValue$1:
    kotlin.reflect.jvm.internal.KProperty0Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty0Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty1Impl -> kotlin.reflect.jvm.internal.KProperty1Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _getter -> _getter
    kotlin.Lazy delegateField -> delegateField
    kotlin.reflect.jvm.internal.KProperty1Impl$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty1$Getter getGetter() -> getGetter
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter getGetter() -> getGetter
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getDelegate(java.lang.Object) -> getDelegate
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.KProperty1Impl$Getter -> kotlin.reflect.jvm.internal.KProperty1Impl$Getter:
    kotlin.reflect.jvm.internal.KProperty1Impl property -> property
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.KProperty1Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KProperty1Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty1Impl$_getter$1 -> kotlin.reflect.jvm.internal.KProperty1Impl$_getter$1:
    kotlin.reflect.jvm.internal.KProperty1Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KProperty1Impl$Getter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty1Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty1Impl$delegateField$1 -> kotlin.reflect.jvm.internal.KProperty1Impl$delegateField$1:
    kotlin.reflect.jvm.internal.KProperty1Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Field invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty1Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty2Impl -> kotlin.reflect.jvm.internal.KProperty2Impl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _getter -> _getter
    kotlin.Lazy delegateField -> delegateField
    kotlin.reflect.jvm.internal.KProperty2Impl$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty$Getter getGetter() -> getGetter
    kotlin.reflect.KProperty2$Getter getGetter() -> getGetter
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter getGetter() -> getGetter
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object getDelegate(java.lang.Object,java.lang.Object) -> getDelegate
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.KProperty2Impl$Getter -> kotlin.reflect.jvm.internal.KProperty2Impl$Getter:
    kotlin.reflect.jvm.internal.KProperty2Impl property -> property
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.KProperty2Impl getProperty() -> getProperty
    kotlin.reflect.KProperty getProperty() -> getProperty
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    void <init>(kotlin.reflect.jvm.internal.KProperty2Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty2Impl$_getter$1 -> kotlin.reflect.jvm.internal.KProperty2Impl$_getter$1:
    kotlin.reflect.jvm.internal.KProperty2Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.KProperty2Impl$Getter invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty2Impl) -> <init>
kotlin.reflect.jvm.internal.KProperty2Impl$delegateField$1 -> kotlin.reflect.jvm.internal.KProperty2Impl$delegateField$1:
    kotlin.reflect.jvm.internal.KProperty2Impl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Field invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KProperty2Impl) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl -> kotlin.reflect.jvm.internal.KPropertyImpl:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal _javaField -> _javaField
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal _descriptor -> _descriptor
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl container -> container
    java.lang.String name -> name
    java.lang.String signature -> signature
    java.lang.Object rawBoundReceiver -> rawBoundReceiver
    java.lang.Object EXTENSION_PROPERTY_DELEGATE -> EXTENSION_PROPERTY_DELEGATE
    kotlin.reflect.jvm.internal.KPropertyImpl$Companion Companion -> Companion
    java.lang.Object getBoundReceiver() -> getBoundReceiver
    boolean isBound() -> isBound
    java.lang.reflect.Field getJavaField() -> getJavaField
    java.lang.reflect.Field computeDelegateField() -> computeDelegateField
    java.lang.Object getDelegate(java.lang.reflect.Field,java.lang.Object) -> getDelegate
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter getGetter() -> getGetter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.calls.Caller getCaller() -> getCaller
    kotlin.reflect.jvm.internal.calls.Caller getDefaultCaller() -> getDefaultCaller
    boolean isLateinit() -> isLateinit
    boolean isConst() -> isConst
    boolean isSuspend() -> isSuspend
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl getContainer() -> getContainer
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <init>(kotlin.reflect.jvm.internal.KDeclarationContainerImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object access$getEXTENSION_PROPERTY_DELEGATE$cp() -> access$getEXTENSION_PROPERTY_DELEGATE$cp
kotlin.reflect.jvm.internal.KPropertyImpl$Accessor -> kotlin.reflect.jvm.internal.KPropertyImpl$Accessor:
    kotlin.reflect.jvm.internal.KPropertyImpl getProperty() -> getProperty
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl getContainer() -> getContainer
    kotlin.reflect.jvm.internal.calls.Caller getDefaultCaller() -> getDefaultCaller
    boolean isBound() -> isBound
    boolean isInline() -> isInline
    boolean isExternal() -> isExternal
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isSuspend() -> isSuspend
    void <init>() -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Companion -> kotlin.reflect.jvm.internal.KPropertyImpl$Companion:
    java.lang.Object getEXTENSION_PROPERTY_DELEGATE() -> getEXTENSION_PROPERTY_DELEGATE
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Getter -> kotlin.reflect.jvm.internal.KPropertyImpl$Getter:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal descriptor$delegate -> descriptor$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal caller$delegate -> caller$delegate
    void <clinit>() -> <clinit>
    java.lang.String getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.calls.Caller getCaller() -> getCaller
    void <init>() -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Getter$caller$2 -> kotlin.reflect.jvm.internal.KPropertyImpl$Getter$caller$2:
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.calls.Caller invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Getter) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Getter$descriptor$2 -> kotlin.reflect.jvm.internal.KPropertyImpl$Getter$descriptor$2:
    kotlin.reflect.jvm.internal.KPropertyImpl$Getter this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Getter) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Setter -> kotlin.reflect.jvm.internal.KPropertyImpl$Setter:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal descriptor$delegate -> descriptor$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal caller$delegate -> caller$delegate
    void <clinit>() -> <clinit>
    java.lang.String getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.calls.Caller getCaller() -> getCaller
    void <init>() -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Setter$caller$2 -> kotlin.reflect.jvm.internal.KPropertyImpl$Setter$caller$2:
    kotlin.reflect.jvm.internal.KPropertyImpl$Setter this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.calls.Caller invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Setter) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$Setter$descriptor$2 -> kotlin.reflect.jvm.internal.KPropertyImpl$Setter$descriptor$2:
    kotlin.reflect.jvm.internal.KPropertyImpl$Setter this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Setter) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$_descriptor$1 -> kotlin.reflect.jvm.internal.KPropertyImpl$_descriptor$1:
    kotlin.reflect.jvm.internal.KPropertyImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl) -> <init>
kotlin.reflect.jvm.internal.KPropertyImpl$_javaField$1 -> kotlin.reflect.jvm.internal.KPropertyImpl$_javaField$1:
    kotlin.reflect.jvm.internal.KPropertyImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Field invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl) -> <init>
kotlin.reflect.jvm.internal.KPropertyImplKt -> kotlin.reflect.jvm.internal.KPropertyImplKt:
    java.lang.Object getBoundReceiver(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor) -> getBoundReceiver
    kotlin.reflect.jvm.internal.calls.Caller computeCallerForAccessor(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor,boolean) -> computeCallerForAccessor
    boolean isJvmFieldPropertyInCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> isJvmFieldPropertyInCompanionObject
    kotlin.reflect.jvm.internal.calls.Caller access$computeCallerForAccessor(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor,boolean) -> access$computeCallerForAccessor
    boolean access$isJvmFieldPropertyInCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> access$isJvmFieldPropertyInCompanionObject
kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$1 -> kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$1:
    kotlin.reflect.jvm.internal.KPropertyImpl$Accessor $this_computeCallerForAccessor -> $this_computeCallerForAccessor
    java.lang.Object invoke() -> invoke
    boolean invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor) -> <init>
kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$2 -> kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$2:
    kotlin.reflect.jvm.internal.KPropertyImpl$Accessor $this_computeCallerForAccessor -> $this_computeCallerForAccessor
    java.lang.Object invoke() -> invoke
    boolean invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor) -> <init>
kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$3 -> kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$3:
    kotlin.reflect.jvm.internal.KPropertyImpl$Accessor $this_computeCallerForAccessor -> $this_computeCallerForAccessor
    boolean $isGetter -> $isGetter
    kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$2 $isNotNullProperty$2 -> $isNotNullProperty$2
    kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$1 $isJvmStaticProperty$1 -> $isJvmStaticProperty$1
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.calls.CallerImpl invoke(java.lang.reflect.Field) -> invoke
    void <init>(kotlin.reflect.jvm.internal.KPropertyImpl$Accessor,boolean,kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$2,kotlin.reflect.jvm.internal.KPropertyImplKt$computeCallerForAccessor$1) -> <init>
kotlin.reflect.jvm.internal.KTypeImpl -> kotlin.reflect.jvm.internal.KTypeImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal javaType$delegate -> javaType$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal classifier$delegate -> classifier$delegate
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal arguments$delegate -> arguments$delegate
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    void <clinit>() -> <clinit>
    java.lang.reflect.Type getJavaType$kotlin_reflection() -> getJavaType$kotlin_reflection
    kotlin.reflect.KClassifier getClassifier() -> getClassifier
    kotlin.reflect.KClassifier convert(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> convert
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    java.util.List getAnnotations() -> getAnnotations
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.jvm.functions.Function0) -> <init>
    kotlin.reflect.KClassifier access$convert(kotlin.reflect.jvm.internal.KTypeImpl,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> access$convert
kotlin.reflect.jvm.internal.KTypeImpl$WhenMappings -> kotlin.reflect.jvm.internal.KTypeImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KTypeImpl$arguments$2 -> kotlin.reflect.jvm.internal.KTypeImpl$arguments$2:
    kotlin.reflect.jvm.internal.KTypeImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KTypeImpl) -> <init>
kotlin.reflect.jvm.internal.KTypeImpl$arguments$2$$special$$inlined$mapIndexed$lambda$1 -> kotlin.reflect.jvm.internal.KTypeImpl$arguments$2$$special$$inlined$mapIndexed$lambda$1:
    int $i -> $i
    kotlin.reflect.jvm.internal.KTypeImpl$arguments$2 this$0 -> this$0
    kotlin.Lazy $parameterizedTypeArguments$inlined -> $parameterizedTypeArguments$inlined
    kotlin.reflect.KProperty $parameterizedTypeArguments$metadata$inlined -> $parameterizedTypeArguments$metadata$inlined
    void <init>(int,kotlin.reflect.jvm.internal.KTypeImpl$arguments$2,kotlin.Lazy,kotlin.reflect.KProperty) -> <init>
    java.lang.Object invoke() -> invoke
    java.lang.reflect.Type invoke() -> invoke
kotlin.reflect.jvm.internal.KTypeImpl$arguments$2$parameterizedTypeArguments$2 -> kotlin.reflect.jvm.internal.KTypeImpl$arguments$2$parameterizedTypeArguments$2:
    kotlin.reflect.jvm.internal.KTypeImpl$arguments$2 this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KTypeImpl$arguments$2) -> <init>
kotlin.reflect.jvm.internal.KTypeImpl$classifier$2 -> kotlin.reflect.jvm.internal.KTypeImpl$classifier$2:
    kotlin.reflect.jvm.internal.KTypeImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.KClassifier invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KTypeImpl) -> <init>
kotlin.reflect.jvm.internal.KTypeParameterImpl -> kotlin.reflect.jvm.internal.KTypeParameterImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal upperBounds$delegate -> upperBounds$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor descriptor -> descriptor
    void <clinit>() -> <clinit>
    java.lang.String getName() -> getName
    java.util.List getUpperBounds() -> getUpperBounds
    kotlin.reflect.KVariance getVariance() -> getVariance
    boolean isReified() -> isReified
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getDescriptor() -> getDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDescriptor() -> getDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.KTypeParameterImpl$WhenMappings -> kotlin.reflect.jvm.internal.KTypeParameterImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2 -> kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2:
    kotlin.reflect.jvm.internal.KTypeParameterImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.KTypeParameterImpl) -> <init>
kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2$$special$$inlined$map$lambda$1 -> kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2$$special$$inlined$map$lambda$1:
    kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2 this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.KTypeParameterImpl$upperBounds$2) -> <init>
    java.lang.Object invoke() -> invoke
    java.lang.Void invoke() -> invoke
kotlin.reflect.jvm.internal.KotlinReflectionInternalError -> kotlin.reflect.jvm.internal.KotlinReflectionInternalError:
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.ModuleByClassLoaderKt -> kotlin.reflect.jvm.internal.ModuleByClassLoaderKt:
    java.util.concurrent.ConcurrentMap moduleByClassLoader -> moduleByClassLoader
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData getOrCreateModule(java.lang.Class) -> getOrCreateModule
    void clearModuleByClassLoaderCache() -> clearModuleByClassLoaderCache
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.ReflectProperties -> kotlin.reflect.jvm.internal.ReflectProperties:
    kotlin.reflect.jvm.internal.ReflectProperties$LazyVal lazy(kotlin.jvm.functions.Function0) -> lazy
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal lazySoft(java.lang.Object,kotlin.jvm.functions.Function0) -> lazySoft
    kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal lazySoft(kotlin.jvm.functions.Function0) -> lazySoft
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal -> kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal:
    kotlin.jvm.functions.Function0 initializer -> initializer
    java.lang.ref.SoftReference value -> value
    void <init>(java.lang.Object,kotlin.jvm.functions.Function0) -> <init>
    java.lang.Object invoke() -> invoke
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.ReflectProperties$LazyVal -> kotlin.reflect.jvm.internal.ReflectProperties$LazyVal:
    kotlin.jvm.functions.Function0 initializer -> initializer
    java.lang.Object value -> value
    void <init>(kotlin.jvm.functions.Function0) -> <init>
    java.lang.Object invoke() -> invoke
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.ReflectProperties$Val -> kotlin.reflect.jvm.internal.ReflectProperties$Val:
    java.lang.Object NULL_VALUE -> NULL_VALUE
    void <init>() -> <init>
    java.lang.Object getValue(java.lang.Object,java.lang.Object) -> getValue
    java.lang.Object invoke() -> invoke
    java.lang.Object escape(java.lang.Object) -> escape
    java.lang.Object unescape(java.lang.Object) -> unescape
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.ReflectProperties$Val$1 -> kotlin.reflect.jvm.internal.ReflectProperties$Val$1:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.ReflectionFactoryImpl -> kotlin.reflect.jvm.internal.ReflectionFactoryImpl:
    void <init>() -> <init>
    kotlin.reflect.KClass createKotlinClass(java.lang.Class) -> createKotlinClass
    kotlin.reflect.KClass createKotlinClass(java.lang.Class,java.lang.String) -> createKotlinClass
    kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String) -> getOrCreateKotlinPackage
    kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class) -> getOrCreateKotlinClass
    kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class,java.lang.String) -> getOrCreateKotlinClass
    java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda) -> renderLambdaToString
    java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase) -> renderLambdaToString
    kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference) -> function
    kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0) -> property0
    kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0) -> mutableProperty0
    kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1) -> property1
    kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1) -> mutableProperty1
    kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2) -> property2
    kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2) -> mutableProperty2
    kotlin.reflect.jvm.internal.KDeclarationContainerImpl getOwner(kotlin.jvm.internal.CallableReference) -> getOwner
    kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean) -> typeOf
    void clearCaches() -> clearCaches
kotlin.reflect.jvm.internal.ReflectionObjectRenderer -> kotlin.reflect.jvm.internal.ReflectionObjectRenderer:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer renderer -> renderer
    kotlin.reflect.jvm.internal.ReflectionObjectRenderer INSTANCE -> INSTANCE
    void appendReceiverType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> appendReceiverType
    void appendReceivers(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> appendReceivers
    java.lang.String renderCallable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> renderCallable
    java.lang.String renderProperty(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> renderProperty
    java.lang.String renderFunction(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> renderFunction
    java.lang.String renderLambda(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> renderLambda
    java.lang.String renderParameter(kotlin.reflect.jvm.internal.KParameterImpl) -> renderParameter
    java.lang.String renderTypeParameter(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> renderTypeParameter
    java.lang.String renderType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.ReflectionObjectRenderer$WhenMappings -> kotlin.reflect.jvm.internal.ReflectionObjectRenderer$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderFunction$1$1 -> kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderFunction$1$1:
    kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderFunction$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderLambda$1$1 -> kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderLambda$1$1:
    kotlin.reflect.jvm.internal.ReflectionObjectRenderer$renderLambda$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.RuntimeTypeMapper -> kotlin.reflect.jvm.internal.RuntimeTypeMapper:
    kotlin.reflect.jvm.internal.impl.name.ClassId JAVA_LANG_VOID -> JAVA_LANG_VOID
    kotlin.reflect.jvm.internal.RuntimeTypeMapper INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.JvmFunctionSignature mapSignature(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> mapSignature
    kotlin.reflect.jvm.internal.JvmPropertySignature mapPropertySignature(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> mapPropertySignature
    boolean isKnownBuiltInFunction(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isKnownBuiltInFunction
    kotlin.reflect.jvm.internal.JvmFunctionSignature$KotlinFunction mapJvmFunctionSignature(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> mapJvmFunctionSignature
    java.lang.String mapName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> mapName
    kotlin.reflect.jvm.internal.impl.name.ClassId mapJvmClassToKotlinClassId(java.lang.Class) -> mapJvmClassToKotlinClassId
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(java.lang.Class) -> getPrimitiveType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.RuntimeTypeMapperKt -> kotlin.reflect.jvm.internal.RuntimeTypeMapperKt:
    java.lang.String getSignature(java.lang.reflect.Method) -> getSignature
    java.lang.String access$getSignature$p(java.lang.reflect.Method) -> access$getSignature$p
kotlin.reflect.jvm.internal.RuntimeTypeMapperKt$signature$1 -> kotlin.reflect.jvm.internal.RuntimeTypeMapperKt$signature$1:
    kotlin.reflect.jvm.internal.RuntimeTypeMapperKt$signature$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.Class) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.Util -> kotlin.reflect.jvm.internal.Util:
    java.lang.Object getEnumConstantByName(java.lang.Class,java.lang.String) -> getEnumConstantByName
kotlin.reflect.jvm.internal.UtilKt -> kotlin.reflect.jvm.internal.UtilKt:
    kotlin.reflect.jvm.internal.impl.name.FqName JVM_STATIC -> JVM_STATIC
    kotlin.reflect.jvm.internal.impl.name.FqName getJVM_STATIC() -> getJVM_STATIC
    java.lang.Class toJavaClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> toJavaClass
    java.lang.Class loadClass(java.lang.ClassLoader,kotlin.reflect.jvm.internal.impl.name.ClassId,int) -> loadClass
    java.lang.Class loadClass$default(java.lang.ClassLoader,kotlin.reflect.jvm.internal.impl.name.ClassId,int,int,java.lang.Object) -> loadClass$default
    java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String,java.lang.String,int) -> loadClass
    kotlin.reflect.KVisibility toKVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> toKVisibility
    java.util.List computeAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated) -> computeAnnotations
    java.lang.annotation.Annotation toAnnotationInstance(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> toAnnotationInstance
    java.lang.Object toRuntimeValue(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue,java.lang.ClassLoader) -> toRuntimeValue
    kotlin.reflect.jvm.internal.KFunctionImpl asKFunctionImpl(java.lang.Object) -> asKFunctionImpl
    kotlin.reflect.jvm.internal.KPropertyImpl asKPropertyImpl(java.lang.Object) -> asKPropertyImpl
    kotlin.reflect.jvm.internal.KCallableImpl asKCallableImpl(java.lang.Object) -> asKCallableImpl
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getInstanceReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> getInstanceReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor deserializeToDescriptor(java.lang.Class,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.jvm.functions.Function2) -> deserializeToDescriptor
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.WeakClassLoaderBox -> kotlin.reflect.jvm.internal.WeakClassLoaderBox:
    java.lang.ref.WeakReference ref -> ref
    int identityHashCode -> identityHashCode
    java.lang.ClassLoader temporaryStrongRef -> temporaryStrongRef
    void setTemporaryStrongRef(java.lang.ClassLoader) -> setTemporaryStrongRef
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.ClassLoader) -> <init>
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller:
    java.util.List parameterTypes -> parameterTypes
    java.util.List erasedParameterTypes -> erasedParameterTypes
    java.util.List defaultValues -> defaultValues
    java.lang.Class jClass -> jClass
    java.util.List parameterNames -> parameterNames
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode callMode -> callMode
    java.util.List methods -> methods
    java.lang.Void getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.util.List getParameterTypes() -> getParameterTypes
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.Class,java.util.List,kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode,kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin,java.util.List) -> <init>
    void <init>(java.lang.Class,java.util.List,kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode,kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void checkArguments(java.lang.Object[]) -> checkArguments
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode:
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode CALL_BY_NAME -> CALL_BY_NAME
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode POSITIONAL_CALL -> POSITIONAL_CALL
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode[] values() -> values
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$CallMode valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin:
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin JAVA -> JAVA
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin KOTLIN -> KOTLIN
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin[] values() -> values
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCaller$Origin valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    void <clinit>() -> <clinit>
    java.lang.Object transformKotlinToJvm(java.lang.Object,java.lang.Class) -> transformKotlinToJvm
    java.lang.Void throwIllegalArgumentType(int,java.lang.String,java.lang.Class) -> throwIllegalArgumentType
    java.lang.Object createAnnotationInstance(java.lang.Class,java.util.Map,java.util.List) -> createAnnotationInstance
    java.lang.Object createAnnotationInstance$default(java.lang.Class,java.util.Map,java.util.List,int,java.lang.Object) -> createAnnotationInstance$default
    java.lang.Object access$transformKotlinToJvm(java.lang.Object,java.lang.Class) -> access$transformKotlinToJvm
    java.lang.Void access$throwIllegalArgumentType(int,java.lang.String,java.lang.Class) -> access$throwIllegalArgumentType
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$2 -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$2:
    java.lang.Class $annotationClass -> $annotationClass
    java.util.List $methods -> $methods
    java.util.Map $values -> $values
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.Object) -> invoke
    void <init>(java.lang.Class,java.util.List,java.util.Map) -> <init>
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$hashCode$2 -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$hashCode$2:
    java.util.Map $values -> $values
    java.lang.Object invoke() -> invoke
    int invoke() -> invoke
    void <init>(java.util.Map) -> <init>
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$result$1 -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$result$1:
    java.lang.Class $annotationClass -> $annotationClass
    kotlin.Lazy $toString -> $toString
    kotlin.reflect.KProperty $toString$metadata -> $toString$metadata
    kotlin.Lazy $hashCode -> $hashCode
    kotlin.reflect.KProperty $hashCode$metadata -> $hashCode$metadata
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$2 $equals$2 -> $equals$2
    java.util.Map $values -> $values
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void <init>(java.lang.Class,kotlin.Lazy,kotlin.reflect.KProperty,kotlin.Lazy,kotlin.reflect.KProperty,kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$2,java.util.Map) -> <init>
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$toString$2 -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$toString$2:
    java.lang.Class $annotationClass -> $annotationClass
    java.util.Map $values -> $values
    java.lang.Object invoke() -> invoke
    java.lang.String invoke() -> invoke
    void <init>(java.lang.Class,java.util.Map) -> <init>
kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$toString$2$1$1 -> kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$toString$2$1$1:
    kotlin.reflect.jvm.internal.calls.AnnotationConstructorCallerKt$createAnnotationInstance$toString$2$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.util.Map$Entry) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.calls.BoundCaller -> kotlin.reflect.jvm.internal.calls.BoundCaller:
kotlin.reflect.jvm.internal.calls.Caller -> kotlin.reflect.jvm.internal.calls.Caller:
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.util.List getParameterTypes() -> getParameterTypes
    java.lang.Object call(java.lang.Object[]) -> call
kotlin.reflect.jvm.internal.calls.Caller$DefaultImpls -> kotlin.reflect.jvm.internal.calls.Caller$DefaultImpls:
    void checkArguments(kotlin.reflect.jvm.internal.calls.Caller,java.lang.Object[]) -> checkArguments
kotlin.reflect.jvm.internal.calls.CallerImpl -> kotlin.reflect.jvm.internal.calls.CallerImpl:
    java.util.List parameterTypes -> parameterTypes
    java.lang.reflect.Member member -> member
    java.lang.reflect.Type returnType -> returnType
    java.lang.Class instanceClass -> instanceClass
    kotlin.reflect.jvm.internal.calls.CallerImpl$Companion Companion -> Companion
    java.util.List getParameterTypes() -> getParameterTypes
    void checkObjectInstance(java.lang.Object) -> checkObjectInstance
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.lang.Class getInstanceClass() -> getInstanceClass
    void <init>(java.lang.reflect.Member,java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> <init>
    void <clinit>() -> <clinit>
    void checkArguments(java.lang.Object[]) -> checkArguments
    void <init>(java.lang.reflect.Member,java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[],kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$AccessorForHiddenBoundConstructor -> kotlin.reflect.jvm.internal.calls.CallerImpl$AccessorForHiddenBoundConstructor:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Constructor,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$AccessorForHiddenConstructor -> kotlin.reflect.jvm.internal.calls.CallerImpl$AccessorForHiddenConstructor:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Constructor) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$BoundConstructor -> kotlin.reflect.jvm.internal.calls.CallerImpl$BoundConstructor:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Constructor,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Companion -> kotlin.reflect.jvm.internal.calls.CallerImpl$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Constructor -> kotlin.reflect.jvm.internal.calls.CallerImpl$Constructor:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Constructor) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Field,boolean) -> <init>
    void <init>(java.lang.reflect.Field,boolean,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$BoundInstance -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$BoundInstance:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Field,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$BoundJvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$BoundJvmStaticInObject:
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$Instance -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$Instance:
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$JvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$JvmStaticInObject:
    void checkArguments(java.lang.Object[]) -> checkArguments
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$Static -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldGetter$Static:
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter:
    boolean notNull -> notNull
    void checkArguments(java.lang.Object[]) -> checkArguments
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Field,boolean,boolean) -> <init>
    void <init>(java.lang.reflect.Field,boolean,boolean,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$BoundInstance -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$BoundInstance:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Field,boolean,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$BoundJvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$BoundJvmStaticInObject:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Field,boolean) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$Instance -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$Instance:
    void <init>(java.lang.reflect.Field,boolean) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$JvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$JvmStaticInObject:
    void checkArguments(java.lang.Object[]) -> checkArguments
    void <init>(java.lang.reflect.Field,boolean) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$Static -> kotlin.reflect.jvm.internal.calls.CallerImpl$FieldSetter$Static:
    void <init>(java.lang.reflect.Field,boolean) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method:
    boolean isVoidMethod -> isVoidMethod
    java.lang.Object callMethod(java.lang.Object,java.lang.Object[]) -> callMethod
    void <init>(java.lang.reflect.Method,boolean,java.lang.reflect.Type[]) -> <init>
    void <init>(java.lang.reflect.Method,boolean,java.lang.reflect.Type[],int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(java.lang.reflect.Method,boolean,java.lang.reflect.Type[],kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundInstance -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundInstance:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundJvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundJvmStaticInObject:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundStatic -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$BoundStatic:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$JvmStaticInObject -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$JvmStaticInObject:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Static -> kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Static:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.CallerKt -> kotlin.reflect.jvm.internal.calls.CallerKt:
    int getArity(kotlin.reflect.jvm.internal.calls.Caller) -> getArity
kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller -> kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller:
    kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller$BoxUnboxData data -> data
    kotlin.reflect.jvm.internal.calls.Caller caller -> caller
    boolean isDefault -> isDefault
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.util.List getParameterTypes() -> getParameterTypes
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.calls.Caller,boolean) -> <init>
kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller$BoxUnboxData -> kotlin.reflect.jvm.internal.calls.InlineClassAwareCaller$BoxUnboxData:
    kotlin.ranges.IntRange argumentRange -> argumentRange
    java.lang.reflect.Method[] unbox -> unbox
    java.lang.reflect.Method box -> box
    kotlin.ranges.IntRange component1() -> component1
    java.lang.reflect.Method[] component2() -> component2
    java.lang.reflect.Method component3() -> component3
    void <init>(kotlin.ranges.IntRange,java.lang.reflect.Method[],java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.InlineClassAwareCallerKt -> kotlin.reflect.jvm.internal.calls.InlineClassAwareCallerKt:
    kotlin.reflect.jvm.internal.calls.Caller createInlineClassAwareCallerIfNeeded(kotlin.reflect.jvm.internal.calls.Caller,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,boolean) -> createInlineClassAwareCallerIfNeeded
    kotlin.reflect.jvm.internal.calls.Caller createInlineClassAwareCallerIfNeeded$default(kotlin.reflect.jvm.internal.calls.Caller,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,boolean,int,java.lang.Object) -> createInlineClassAwareCallerIfNeeded$default
    boolean hasInlineClassReceiver(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> hasInlineClassReceiver
    java.lang.reflect.Method getUnboxMethod(java.lang.Class,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getUnboxMethod
    java.lang.reflect.Method getBoxMethod(java.lang.Class,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getBoxMethod
    java.lang.Class toInlineClass(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> toInlineClass
    java.lang.Class toInlineClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> toInlineClass
    kotlin.reflect.jvm.internal.impl.types.KotlinType getExpectedReceiverType(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getExpectedReceiverType
    java.lang.Object coerceToExpectedReceiverType(java.lang.Object,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> coerceToExpectedReceiverType
kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass -> kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass:
    java.lang.reflect.Type returnType -> returnType
    java.lang.reflect.Method unboxMethod -> unboxMethod
    java.util.List parameterTypes -> parameterTypes
    java.lang.reflect.Method getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.lang.Object callMethod(java.lang.Object,java.lang.Object[]) -> callMethod
    java.util.List getParameterTypes() -> getParameterTypes
    void <init>(java.lang.reflect.Method,java.util.List) -> <init>
    void checkArguments(java.lang.Object[]) -> checkArguments
    void <init>(java.lang.reflect.Method,java.util.List,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass$Bound -> kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass$Bound:
    java.lang.Object boundReceiver -> boundReceiver
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass$Unbound -> kotlin.reflect.jvm.internal.calls.InternalUnderlyingValOfInlineClass$Unbound:
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>(java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.calls.ThrowingCaller -> kotlin.reflect.jvm.internal.calls.ThrowingCaller:
    kotlin.reflect.jvm.internal.calls.ThrowingCaller INSTANCE -> INSTANCE
    java.lang.Void getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    java.util.List getParameterTypes() -> getParameterTypes
    java.lang.reflect.Type getReturnType() -> getReturnType
    java.lang.Object call(java.lang.Object[]) -> call
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader -> kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader:
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider createPackageFragmentProvider(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,boolean) -> createPackageFragmentProvider
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion -> kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy Instance$delegate -> Instance$delegate
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion $$INSTANCE -> $$INSTANCE
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader getInstance() -> getInstance
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion$Instance$2 -> kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion$Instance$2:
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader$Companion$Instance$2 INSTANCE -> INSTANCE
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.BuiltInsPackageFragment -> kotlin.reflect.jvm.internal.impl.builtins.BuiltInsPackageFragment:
kotlin.reflect.jvm.internal.impl.builtins.CompanionObjectMapping -> kotlin.reflect.jvm.internal.impl.builtins.CompanionObjectMapping:
    java.util.LinkedHashSet classIds -> classIds
    kotlin.reflect.jvm.internal.impl.builtins.CompanionObjectMapping INSTANCE -> INSTANCE
    java.util.Set allClassesWithIntrinsicCompanions() -> allClassesWithIntrinsicCompanions
    boolean isMappedIntrinsicCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isMappedIntrinsicCompanionObject
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns -> kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns:
    kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns Instance -> Instance
    kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns$Companion Companion -> Companion
    void <init>(boolean) -> <init>
    void <init>(boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns getInstance() -> getInstance
kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns$Companion -> kotlin.reflect.jvm.internal.impl.builtins.DefaultBuiltIns$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.FunctionInterfacePackageFragment -> kotlin.reflect.jvm.internal.impl.builtins.FunctionInterfacePackageFragment:
kotlin.reflect.jvm.internal.impl.builtins.FunctionTypesKt -> kotlin.reflect.jvm.internal.impl.builtins.FunctionTypesKt:
    boolean isFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isFunctionType
    boolean isSuspendFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSuspendFunctionType
    boolean isBuiltinFunctionalType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isBuiltinFunctionalType
    boolean isBuiltinExtensionFunctionalType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isBuiltinExtensionFunctionalType
    boolean isTypeAnnotatedWithExtensionFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isTypeAnnotatedWithExtensionFunctionType
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind getFunctionalClassKind(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFunctionalClassKind
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind getFunctionalClassKind(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> getFunctionalClassKind
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReceiverTypeFromFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getReceiverTypeFromFunctionType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnTypeFromFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getReturnTypeFromFunctionType
    java.util.List getValueParameterTypesFromFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getValueParameterTypesFromFunctionType
    kotlin.reflect.jvm.internal.impl.name.Name extractParameterNameFromFunctionTypeArgument(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> extractParameterNameFromFunctionTypeArgument
    java.util.List getFunctionTypeArgumentProjections(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> getFunctionTypeArgumentProjections
    kotlin.reflect.jvm.internal.impl.types.SimpleType createFunctionType(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> createFunctionType
    kotlin.reflect.jvm.internal.impl.types.SimpleType createFunctionType$default(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,int,java.lang.Object) -> createFunctionType$default
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns:
    kotlin.reflect.jvm.internal.impl.name.Name BUILT_INS_PACKAGE_NAME -> BUILT_INS_PACKAGE_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName BUILT_INS_PACKAGE_FQ_NAME -> BUILT_INS_PACKAGE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName ANNOTATION_PACKAGE_FQ_NAME -> ANNOTATION_PACKAGE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName COLLECTIONS_PACKAGE_FQ_NAME -> COLLECTIONS_PACKAGE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName RANGES_PACKAGE_FQ_NAME -> RANGES_PACKAGE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName TEXT_PACKAGE_FQ_NAME -> TEXT_PACKAGE_FQ_NAME
    java.util.Set BUILT_INS_PACKAGE_FQ_NAMES -> BUILT_INS_PACKAGE_FQ_NAMES
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl builtInsModule -> builtInsModule
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue primitives -> primitives
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue builtInPackagesImportedByDefault -> builtInPackagesImportedByDefault
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull builtInClassesByName -> builtInClassesByName
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$FqNames FQ_NAMES -> FQ_NAMES
    kotlin.reflect.jvm.internal.impl.name.Name BUILTINS_MODULE_NAME -> BUILTINS_MODULE_NAME
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    void createBuiltInsModule(boolean) -> createBuiltInsModule
    void setBuiltInsModule(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> setBuiltInsModule
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider getAdditionalClassPartsProvider() -> getAdditionalClassPartsProvider
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter getPlatformDependentDeclarationFilter() -> getPlatformDependentDeclarationFilter
    java.lang.Iterable getClassDescriptorFactories() -> getClassDescriptorFactories
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl getBuiltInsModule() -> getBuiltInsModule
    boolean isBuiltIn(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isBuiltIn
    boolean isUnderKotlinPackage(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isUnderKotlinPackage
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getBuiltInsPackageScope() -> getBuiltInsPackageScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getBuiltInClassByFqName(kotlin.reflect.jvm.internal.impl.name.FqName) -> getBuiltInClassByFqName
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getBuiltInClassByName(java.lang.String) -> getBuiltInClassByName
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getAny() -> getAny
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getNothing() -> getNothing
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getPrimitiveClassDescriptor(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> getPrimitiveClassDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getArray() -> getArray
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getUnit() -> getUnit
    java.lang.String getFunctionName(int) -> getFunctionName
    kotlin.reflect.jvm.internal.impl.name.ClassId getFunctionClassId(int) -> getFunctionClassId
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getFunction(int) -> getFunction
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getSuspendFunction(int) -> getSuspendFunction
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getString() -> getString
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getComparable() -> getComparable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getKClass() -> getKClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCollection() -> getCollection
    kotlin.reflect.jvm.internal.impl.types.SimpleType getBuiltInTypeByClassName(java.lang.String) -> getBuiltInTypeByClassName
    kotlin.reflect.jvm.internal.impl.types.SimpleType getNothingType() -> getNothingType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getNullableNothingType() -> getNullableNothingType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getAnyType() -> getAnyType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getNullableAnyType() -> getNullableAnyType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultBound() -> getDefaultBound
    kotlin.reflect.jvm.internal.impl.types.SimpleType getPrimitiveKotlinType(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> getPrimitiveKotlinType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getNumberType() -> getNumberType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getByteType() -> getByteType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getShortType() -> getShortType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getIntType() -> getIntType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getLongType() -> getLongType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getFloatType() -> getFloatType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDoubleType() -> getDoubleType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getCharType() -> getCharType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getBooleanType() -> getBooleanType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getUnitType() -> getUnitType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getStringType() -> getStringType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getArrayElementType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getArrayElementType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getElementTypeForUnsignedArray(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getElementTypeForUnsignedArray
    kotlin.reflect.jvm.internal.impl.types.SimpleType getPrimitiveArrayKotlinType(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> getPrimitiveArrayKotlinType
    boolean isPrimitiveArray(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isPrimitiveArray
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getPrimitiveType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveArrayType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getPrimitiveArrayType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getArrayType(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getArrayType
    boolean isArray(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isArray
    boolean isArrayOrPrimitiveArray(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isArrayOrPrimitiveArray
    boolean isPrimitiveArray(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isPrimitiveArray
    boolean isPrimitiveType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isPrimitiveType
    boolean isPrimitiveTypeOrNullablePrimitiveType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isPrimitiveTypeOrNullablePrimitiveType
    boolean isPrimitiveClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isPrimitiveClass
    boolean isConstructedFromGivenClass(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isConstructedFromGivenClass
    boolean isTypeConstructorForGivenClass(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isTypeConstructorForGivenClass
    boolean classFqNameEquals(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> classFqNameEquals
    boolean isNotNullConstructedFromGivenClass(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isNotNullConstructedFromGivenClass
    boolean isSpecialClassWithNoSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isSpecialClassWithNoSupertypes
    boolean isAny(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isAny
    boolean isBoolean(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isBoolean
    boolean isChar(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isChar
    boolean isInt(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isInt
    boolean isByte(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isByte
    boolean isLong(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isLong
    boolean isShort(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isShort
    boolean isFloat(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isFloat
    boolean isFloatOrNullableFloat(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isFloatOrNullableFloat
    boolean isDouble(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDouble
    boolean isDoubleOrNullableDouble(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDoubleOrNullableDouble
    boolean isConstructedFromGivenClassAndNotNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isConstructedFromGivenClassAndNotNullable
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isNothing
    boolean isNothingOrNullableNothing(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isNothingOrNullableNothing
    boolean isAnyOrNullableAny(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isAnyOrNullableAny
    boolean isNullableAny(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isNullableAny
    boolean isDefaultBound(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDefaultBound
    boolean isUnit(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isUnit
    boolean isString(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isString
    boolean isKClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isKClass
    boolean isDeprecated(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isDeprecated
    kotlin.reflect.jvm.internal.impl.name.FqName getPrimitiveFqName(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> getPrimitiveFqName
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl access$000(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> access$000
    kotlin.reflect.jvm.internal.impl.name.FqName access$100() -> access$100
    kotlin.reflect.jvm.internal.impl.types.SimpleType access$200(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,java.lang.String) -> access$200
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl access$002(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$002
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$1 -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$1:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> <init>
    java.util.Collection invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$2 -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$2:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$Primitives invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$3 -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$3:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$4 -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$4:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl val$module -> val$module
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> <init>
    java.lang.Void invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$FqNames -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$FqNames:
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe any -> any
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe nothing -> nothing
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe cloneable -> cloneable
    kotlin.reflect.jvm.internal.impl.name.FqName suppress -> suppress
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe unit -> unit
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe charSequence -> charSequence
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe string -> string
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe array -> array
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _boolean -> _boolean
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _char -> _char
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _byte -> _byte
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _short -> _short
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _int -> _int
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _long -> _long
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _float -> _float
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _double -> _double
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe number -> number
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe _enum -> _enum
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe functionSupertype -> functionSupertype
    kotlin.reflect.jvm.internal.impl.name.FqName throwable -> throwable
    kotlin.reflect.jvm.internal.impl.name.FqName comparable -> comparable
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe intRange -> intRange
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe longRange -> longRange
    kotlin.reflect.jvm.internal.impl.name.FqName deprecated -> deprecated
    kotlin.reflect.jvm.internal.impl.name.FqName deprecationLevel -> deprecationLevel
    kotlin.reflect.jvm.internal.impl.name.FqName replaceWith -> replaceWith
    kotlin.reflect.jvm.internal.impl.name.FqName extensionFunctionType -> extensionFunctionType
    kotlin.reflect.jvm.internal.impl.name.FqName parameterName -> parameterName
    kotlin.reflect.jvm.internal.impl.name.FqName annotation -> annotation
    kotlin.reflect.jvm.internal.impl.name.FqName target -> target
    kotlin.reflect.jvm.internal.impl.name.FqName annotationTarget -> annotationTarget
    kotlin.reflect.jvm.internal.impl.name.FqName annotationRetention -> annotationRetention
    kotlin.reflect.jvm.internal.impl.name.FqName retention -> retention
    kotlin.reflect.jvm.internal.impl.name.FqName repeatable -> repeatable
    kotlin.reflect.jvm.internal.impl.name.FqName mustBeDocumented -> mustBeDocumented
    kotlin.reflect.jvm.internal.impl.name.FqName unsafeVariance -> unsafeVariance
    kotlin.reflect.jvm.internal.impl.name.FqName publishedApi -> publishedApi
    kotlin.reflect.jvm.internal.impl.name.FqName iterator -> iterator
    kotlin.reflect.jvm.internal.impl.name.FqName iterable -> iterable
    kotlin.reflect.jvm.internal.impl.name.FqName collection -> collection
    kotlin.reflect.jvm.internal.impl.name.FqName list -> list
    kotlin.reflect.jvm.internal.impl.name.FqName listIterator -> listIterator
    kotlin.reflect.jvm.internal.impl.name.FqName set -> set
    kotlin.reflect.jvm.internal.impl.name.FqName map -> map
    kotlin.reflect.jvm.internal.impl.name.FqName mapEntry -> mapEntry
    kotlin.reflect.jvm.internal.impl.name.FqName mutableIterator -> mutableIterator
    kotlin.reflect.jvm.internal.impl.name.FqName mutableIterable -> mutableIterable
    kotlin.reflect.jvm.internal.impl.name.FqName mutableCollection -> mutableCollection
    kotlin.reflect.jvm.internal.impl.name.FqName mutableList -> mutableList
    kotlin.reflect.jvm.internal.impl.name.FqName mutableListIterator -> mutableListIterator
    kotlin.reflect.jvm.internal.impl.name.FqName mutableSet -> mutableSet
    kotlin.reflect.jvm.internal.impl.name.FqName mutableMap -> mutableMap
    kotlin.reflect.jvm.internal.impl.name.FqName mutableMapEntry -> mutableMapEntry
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kClass -> kClass
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kCallable -> kCallable
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kProperty0 -> kProperty0
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kProperty1 -> kProperty1
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kProperty2 -> kProperty2
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kMutableProperty0 -> kMutableProperty0
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kMutableProperty1 -> kMutableProperty1
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kMutableProperty2 -> kMutableProperty2
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kPropertyFqName -> kPropertyFqName
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kMutablePropertyFqName -> kMutablePropertyFqName
    kotlin.reflect.jvm.internal.impl.name.ClassId kProperty -> kProperty
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe kDeclarationContainer -> kDeclarationContainer
    kotlin.reflect.jvm.internal.impl.name.FqName uByteFqName -> uByteFqName
    kotlin.reflect.jvm.internal.impl.name.FqName uShortFqName -> uShortFqName
    kotlin.reflect.jvm.internal.impl.name.FqName uIntFqName -> uIntFqName
    kotlin.reflect.jvm.internal.impl.name.FqName uLongFqName -> uLongFqName
    kotlin.reflect.jvm.internal.impl.name.ClassId uByte -> uByte
    kotlin.reflect.jvm.internal.impl.name.ClassId uShort -> uShort
    kotlin.reflect.jvm.internal.impl.name.ClassId uInt -> uInt
    kotlin.reflect.jvm.internal.impl.name.ClassId uLong -> uLong
    java.util.Set primitiveTypeShortNames -> primitiveTypeShortNames
    java.util.Set primitiveArrayTypeShortNames -> primitiveArrayTypeShortNames
    java.util.Map fqNameToPrimitiveType -> fqNameToPrimitiveType
    java.util.Map arrayClassFqNameToPrimitiveType -> arrayClassFqNameToPrimitiveType
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe fqNameUnsafe(java.lang.String) -> fqNameUnsafe
    kotlin.reflect.jvm.internal.impl.name.FqName fqName(java.lang.String) -> fqName
    kotlin.reflect.jvm.internal.impl.name.FqName collectionsFqName(java.lang.String) -> collectionsFqName
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe rangesFqName(java.lang.String) -> rangesFqName
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe reflect(java.lang.String) -> reflect
    kotlin.reflect.jvm.internal.impl.name.FqName annotationName(java.lang.String) -> annotationName
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$Primitives -> kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$Primitives:
    java.util.Map primitiveTypeToArrayKotlinType -> primitiveTypeToArrayKotlinType
    java.util.Map primitiveKotlinTypeToKotlinArrayType -> primitiveKotlinTypeToKotlinArrayType
    java.util.Map kotlinArrayTypeToPrimitiveKotlinType -> kotlinArrayTypeToPrimitiveKotlinType
    void <init>(java.util.Map,java.util.Map,java.util.Map) -> <init>
    void <init>(java.util.Map,java.util.Map,java.util.Map,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType -> kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType:
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType BOOLEAN -> BOOLEAN
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType CHAR -> CHAR
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType BYTE -> BYTE
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType SHORT -> SHORT
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType INT -> INT
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType FLOAT -> FLOAT
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType LONG -> LONG
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType DOUBLE -> DOUBLE
    java.util.Set NUMBER_TYPES -> NUMBER_TYPES
    kotlin.reflect.jvm.internal.impl.name.Name typeName -> typeName
    kotlin.reflect.jvm.internal.impl.name.Name arrayTypeName -> arrayTypeName
    kotlin.reflect.jvm.internal.impl.name.FqName typeFqName -> typeFqName
    kotlin.reflect.jvm.internal.impl.name.FqName arrayTypeFqName -> arrayTypeFqName
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType[] values() -> values
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.name.Name getTypeName() -> getTypeName
    kotlin.reflect.jvm.internal.impl.name.FqName getTypeFqName() -> getTypeFqName
    kotlin.reflect.jvm.internal.impl.name.Name getArrayTypeName() -> getArrayTypeName
    kotlin.reflect.jvm.internal.impl.name.FqName getArrayTypeFqName() -> getArrayTypeFqName
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes -> kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy kotlinReflectScope$delegate -> kotlinReflectScope$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kClass$delegate -> kClass$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kProperty$delegate -> kProperty$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kProperty0$delegate -> kProperty0$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kProperty1$delegate -> kProperty1$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kProperty2$delegate -> kProperty2$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kMutableProperty0$delegate -> kMutableProperty0$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kMutableProperty1$delegate -> kMutableProperty1$delegate
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup kMutableProperty2$delegate -> kMutableProperty2$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses notFoundClasses -> notFoundClasses
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getKotlinReflectScope() -> getKotlinReflectScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor find(java.lang.String,int) -> find
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getKClass() -> getKClass
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$find(kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes,java.lang.String,int) -> access$find
kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup -> kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$ClassLookup:
    int numberOfTypeParameters -> numberOfTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getValue(kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes,kotlin.reflect.KProperty) -> getValue
    void <init>(int) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$Companion -> kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$Companion:
    kotlin.reflect.jvm.internal.impl.types.KotlinType createKPropertyStarType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> createKPropertyStarType
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$kotlinReflectScope$2 -> kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes$kotlinReflectScope$2:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor $module -> $module
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypesKt -> kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypesKt:
    kotlin.reflect.jvm.internal.impl.name.FqName KOTLIN_REFLECT_FQ_NAME -> KOTLIN_REFLECT_FQ_NAME
    java.lang.String K_PROPERTY_PREFIX -> K_PROPERTY_PREFIX
    java.lang.String K_MUTABLE_PROPERTY_PREFIX -> K_MUTABLE_PROPERTY_PREFIX
    java.lang.String K_FUNCTION_PREFIX -> K_FUNCTION_PREFIX
    java.lang.String K_SUSPEND_FUNCTION_PREFIX -> K_SUSPEND_FUNCTION_PREFIX
    java.util.List PREFIXES -> PREFIXES
    kotlin.reflect.jvm.internal.impl.name.FqName getKOTLIN_REFLECT_FQ_NAME() -> getKOTLIN_REFLECT_FQ_NAME
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.SuspendFunctionTypesKt -> kotlin.reflect.jvm.internal.impl.builtins.SuspendFunctionTypesKt:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.MutableClassDescriptor FAKE_CONTINUATION_CLASS_DESCRIPTOR_EXPERIMENTAL -> FAKE_CONTINUATION_CLASS_DESCRIPTOR_EXPERIMENTAL
    kotlin.reflect.jvm.internal.impl.descriptors.impl.MutableClassDescriptor FAKE_CONTINUATION_CLASS_DESCRIPTOR_RELEASE -> FAKE_CONTINUATION_CLASS_DESCRIPTOR_RELEASE
    kotlin.reflect.jvm.internal.impl.types.SimpleType transformSuspendFunctionToRuntimeFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> transformSuspendFunctionToRuntimeFunctionType
    boolean isContinuation(kotlin.reflect.jvm.internal.impl.name.FqName,boolean) -> isContinuation
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.UnsignedType -> kotlin.reflect.jvm.internal.impl.builtins.UnsignedType:
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType UBYTE -> UBYTE
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType USHORT -> USHORT
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType UINT -> UINT
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType ULONG -> ULONG
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.name.Name typeName -> typeName
    kotlin.reflect.jvm.internal.impl.name.ClassId arrayClassId -> arrayClassId
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.Name getTypeName() -> getTypeName
    kotlin.reflect.jvm.internal.impl.name.ClassId getArrayClassId() -> getArrayClassId
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.name.ClassId) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType[] values() -> values
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedType valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.builtins.UnsignedTypes -> kotlin.reflect.jvm.internal.impl.builtins.UnsignedTypes:
    java.util.Set unsignedTypeNames -> unsignedTypeNames
    java.util.HashMap arrayClassIdToUnsignedClassId -> arrayClassIdToUnsignedClassId
    java.util.HashMap unsignedClassIdToArrayClassId -> unsignedClassIdToArrayClassId
    java.util.Set arrayClassesShortNames -> arrayClassesShortNames
    kotlin.reflect.jvm.internal.impl.builtins.UnsignedTypes INSTANCE -> INSTANCE
    boolean isShortNameOfUnsignedArray(kotlin.reflect.jvm.internal.impl.name.Name) -> isShortNameOfUnsignedArray
    kotlin.reflect.jvm.internal.impl.name.ClassId getUnsignedClassIdByArrayClassId(kotlin.reflect.jvm.internal.impl.name.ClassId) -> getUnsignedClassIdByArrayClassId
    boolean isUnsignedType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isUnsignedType
    boolean isUnsignedClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isUnsignedClass
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory -> kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory:
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$Companion Companion -> Companion
    boolean shouldCreateClass(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.Name) -> shouldCreateClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> createClass
    java.util.Collection getAllContributedClassesIfPossible(kotlin.reflect.jvm.internal.impl.name.FqName) -> getAllContributedClassesIfPossible
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$Companion -> kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$Companion:
    kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$KindWithArity parseClassName(java.lang.String,kotlin.reflect.jvm.internal.impl.name.FqName) -> parseClassName
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind getFunctionalClassKind(java.lang.String,kotlin.reflect.jvm.internal.impl.name.FqName) -> getFunctionalClassKind
    java.lang.Integer toInt(java.lang.String) -> toInt
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$KindWithArity access$parseClassName(kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$Companion,java.lang.String,kotlin.reflect.jvm.internal.impl.name.FqName) -> access$parseClassName
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$KindWithArity -> kotlin.reflect.jvm.internal.impl.builtins.functions.BuiltInFictitiousFunctionClassFactory$KindWithArity:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind kind -> kind
    int arity -> arity
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind getKind() -> getKind
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind,int) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind component1() -> component1
    int component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope memberScope -> memberScope
    java.util.List parameters -> parameters
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind functionKind -> functionKind
    int arity -> arity
    kotlin.reflect.jvm.internal.impl.name.ClassId functionClassId -> functionClassId
    kotlin.reflect.jvm.internal.impl.name.ClassId kFunctionClassId -> kFunctionClassId
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    java.lang.Void getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    java.util.List getConstructors() -> getConstructors
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    java.lang.Void getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isCompanionObject() -> isCompanionObject
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.util.List getSealedSubclasses() -> getSealedSubclasses
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind getFunctionKind() -> getFunctionKind
    int getArity() -> getArity
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind,int) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.ClassId access$getFunctionClassId$cp() -> access$getFunctionClassId$cp
    kotlin.reflect.jvm.internal.impl.name.ClassId access$getKFunctionClassId$cp() -> access$getKFunctionClassId$cp
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor access$getContainingDeclaration$p(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor) -> access$getContainingDeclaration$p
    java.util.List access$getParameters$p(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor) -> access$getParameters$p
    kotlin.reflect.jvm.internal.impl.storage.StorageManager access$getStorageManager$p(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor) -> access$getStorageManager$p
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$1 -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$1:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor this$0 -> this$0
    java.util.ArrayList $result -> $result
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.types.Variance,java.lang.String) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor,java.util.ArrayList) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Companion -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor this$0 -> this$0
    java.util.Collection computeSupertypes() -> computeSupertypes
    java.util.List getParameters() -> getParameters
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    boolean isDenotable() -> isDenotable
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor$WhenMappings -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$FunctionTypeConstructor$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind Function -> Function
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind SuspendFunction -> SuspendFunction
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind KFunction -> KFunction
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind KSuspendFunction -> KSuspendFunction
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.name.FqName packageFqName -> packageFqName
    java.lang.String classNamePrefix -> classNamePrefix
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.Name numberedClassName(int) -> numberedClassName
    kotlin.reflect.jvm.internal.impl.name.FqName getPackageFqName() -> getPackageFqName
    java.lang.String getClassNamePrefix() -> getClassNamePrefix
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.name.FqName,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind$Companion -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind$Companion:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor$Kind byClassNamePrefix(kotlin.reflect.jvm.internal.impl.name.FqName,java.lang.String) -> byClassNamePrefix
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope:
    java.util.List computeDeclaredFunctions() -> computeDeclaredFunctions
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope$WhenMappings -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassScope$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor$Factory Factory -> Factory
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor doSubstitute(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> doSubstitute
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    boolean isExternal() -> isExternal
    boolean isInline() -> isInline
    boolean isTailrec() -> isTailrec
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor replaceParameterNames(java.util.List) -> replaceParameterNames
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor$Factory -> kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor$Factory:
    kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor create(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionClassDescriptor,boolean) -> create
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor createValueParameter(kotlin.reflect.jvm.internal.impl.builtins.functions.FunctionInvokeDescriptor,int,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> createValueParameter
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.CloneableClassScope -> kotlin.reflect.jvm.internal.impl.builtins.jvm.CloneableClassScope:
    kotlin.reflect.jvm.internal.impl.name.Name CLONE_NAME -> CLONE_NAME
    kotlin.reflect.jvm.internal.impl.builtins.jvm.CloneableClassScope$Companion Companion -> Companion
    java.util.List computeDeclaredFunctions() -> computeDeclaredFunctions
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.Name access$getCLONE_NAME$cp() -> access$getCLONE_NAME$cp
kotlin.reflect.jvm.internal.impl.builtins.jvm.CloneableClassScope$Companion -> kotlin.reflect.jvm.internal.impl.builtins.jvm.CloneableClassScope$Companion:
    kotlin.reflect.jvm.internal.impl.name.Name getCLONE_NAME() -> getCLONE_NAME
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.FallbackBuiltIns -> kotlin.reflect.jvm.internal.impl.builtins.jvm.FallbackBuiltIns:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns Instance -> Instance
    kotlin.reflect.jvm.internal.impl.builtins.jvm.FallbackBuiltIns$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$All getPlatformDependentDeclarationFilter() -> getPlatformDependentDeclarationFilter
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter getPlatformDependentDeclarationFilter() -> getPlatformDependentDeclarationFilter
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns access$getInstance$cp() -> access$getInstance$cp
kotlin.reflect.jvm.internal.impl.builtins.jvm.FallbackBuiltIns$Companion -> kotlin.reflect.jvm.internal.impl.builtins.jvm.FallbackBuiltIns$Companion:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getInstance() -> getInstance
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap:
    java.lang.String NUMBERED_FUNCTION_PREFIX -> NUMBERED_FUNCTION_PREFIX
    java.lang.String NUMBERED_K_FUNCTION_PREFIX -> NUMBERED_K_FUNCTION_PREFIX
    java.lang.String NUMBERED_SUSPEND_FUNCTION_PREFIX -> NUMBERED_SUSPEND_FUNCTION_PREFIX
    java.lang.String NUMBERED_K_SUSPEND_FUNCTION_PREFIX -> NUMBERED_K_SUSPEND_FUNCTION_PREFIX
    kotlin.reflect.jvm.internal.impl.name.ClassId FUNCTION_N_CLASS_ID -> FUNCTION_N_CLASS_ID
    kotlin.reflect.jvm.internal.impl.name.FqName FUNCTION_N_FQ_NAME -> FUNCTION_N_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.ClassId K_FUNCTION_CLASS_ID -> K_FUNCTION_CLASS_ID
    java.util.HashMap javaToKotlin -> javaToKotlin
    java.util.HashMap kotlinToJava -> kotlinToJava
    java.util.HashMap mutableToReadOnly -> mutableToReadOnly
    java.util.HashMap readOnlyToMutable -> readOnlyToMutable
    java.util.List mutabilityMappings -> mutabilityMappings
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.name.FqName getFUNCTION_N_FQ_NAME() -> getFUNCTION_N_FQ_NAME
    java.util.List getMutabilityMappings() -> getMutabilityMappings
    kotlin.reflect.jvm.internal.impl.name.ClassId mapJavaToKotlin(kotlin.reflect.jvm.internal.impl.name.FqName) -> mapJavaToKotlin
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor mapJavaToKotlin(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,java.lang.Integer) -> mapJavaToKotlin
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor mapJavaToKotlin$default(kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap,kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,java.lang.Integer,int,java.lang.Object) -> mapJavaToKotlin$default
    kotlin.reflect.jvm.internal.impl.name.ClassId mapKotlinToJava(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> mapKotlinToJava
    boolean isKotlinFunctionWithBigArity(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe,java.lang.String) -> isKotlinFunctionWithBigArity
    void addMapping(kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap$PlatformMutabilityMapping) -> addMapping
    void add(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.ClassId) -> add
    void addTopLevel(java.lang.Class,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> addTopLevel
    void addTopLevel(java.lang.Class,kotlin.reflect.jvm.internal.impl.name.FqName) -> addTopLevel
    void addJavaToKotlin(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.ClassId) -> addJavaToKotlin
    void addKotlinToJava(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.ClassId) -> addKotlinToJava
    java.util.Collection mapPlatformClass(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> mapPlatformClass
    boolean isMutable(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isMutable
    boolean isMutable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isMutable
    boolean isMutable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isMutable
    boolean isReadOnly(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isReadOnly
    boolean isReadOnly(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isReadOnly
    boolean isReadOnly(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isReadOnly
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor convertMutableToReadOnly(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> convertMutableToReadOnly
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor convertReadOnlyToMutable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> convertReadOnlyToMutable
    kotlin.reflect.jvm.internal.impl.name.ClassId classId(java.lang.Class) -> classId
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor convertToOppositeMutability(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.Map,java.lang.String) -> convertToOppositeMutability
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.ClassId access$classId(kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap,java.lang.Class) -> access$classId
kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap$PlatformMutabilityMapping -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap$PlatformMutabilityMapping:
    kotlin.reflect.jvm.internal.impl.name.ClassId javaClass -> javaClass
    kotlin.reflect.jvm.internal.impl.name.ClassId kotlinReadOnly -> kotlinReadOnly
    kotlin.reflect.jvm.internal.impl.name.ClassId kotlinMutable -> kotlinMutable
    kotlin.reflect.jvm.internal.impl.name.ClassId getJavaClass() -> getJavaClass
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.ClassId) -> <init>
    kotlin.reflect.jvm.internal.impl.name.ClassId component1() -> component1
    kotlin.reflect.jvm.internal.impl.name.ClassId component2() -> component2
    kotlin.reflect.jvm.internal.impl.name.ClassId component3() -> component3
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue cloneable$delegate -> cloneable$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor moduleDescriptor -> moduleDescriptor
    kotlin.jvm.functions.Function1 computeContainingDeclaration -> computeContainingDeclaration
    kotlin.reflect.jvm.internal.impl.name.FqName KOTLIN_FQ_NAME -> KOTLIN_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.Name CLONEABLE_NAME -> CLONEABLE_NAME
    kotlin.reflect.jvm.internal.impl.name.ClassId CLONEABLE_CLASS_ID -> CLONEABLE_CLASS_ID
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorImpl getCloneable() -> getCloneable
    boolean shouldCreateClass(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.Name) -> shouldCreateClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> createClass
    java.util.Collection getAllContributedClassesIfPossible(kotlin.reflect.jvm.internal.impl.name.FqName) -> getAllContributedClassesIfPossible
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.jvm.functions.Function1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.jvm.functions.Function1 access$getComputeContainingDeclaration$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory) -> access$getComputeContainingDeclaration$p
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getModuleDescriptor$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory) -> access$getModuleDescriptor$p
    kotlin.reflect.jvm.internal.impl.name.Name access$getCLONEABLE_NAME$cp() -> access$getCLONEABLE_NAME$cp
    kotlin.reflect.jvm.internal.impl.name.FqName access$getKOTLIN_FQ_NAME$cp() -> access$getKOTLIN_FQ_NAME$cp
    kotlin.reflect.jvm.internal.impl.name.ClassId access$getCLONEABLE_CLASS_ID$cp() -> access$getCLONEABLE_CLASS_ID$cp
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.builtins.BuiltInsPackageFragment invoke(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$Companion -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$Companion:
    kotlin.reflect.jvm.internal.impl.name.ClassId getCLONEABLE_CLASS_ID() -> getCLONEABLE_CLASS_ID
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$cloneable$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory$cloneable$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.storage.StorageManager $storageManager -> $storageManager
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorImpl invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInClassDescriptorFactory,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor ownerModuleDescriptor -> ownerModuleDescriptor
    boolean isAdditionalBuiltInsFeatureSupported -> isAdditionalBuiltInsFeatureSupported
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue settings$delegate -> settings$delegate
    void <clinit>() -> <clinit>
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,boolean) -> initialize
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings getSettings() -> getSettings
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter getPlatformDependentDeclarationFilter() -> getPlatformDependentDeclarationFilter
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider getAdditionalClassPartsProvider() -> getAdditionalClassPartsProvider
    java.util.List getClassDescriptorFactories() -> getClassDescriptorFactories
    java.lang.Iterable getClassDescriptorFactories() -> getClassDescriptorFactories
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getOwnerModuleDescriptor$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns) -> access$getOwnerModuleDescriptor$p
    boolean access$isAdditionalBuiltInsFeatureSupported$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns) -> access$isAdditionalBuiltInsFeatureSupported$p
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind FROM_DEPENDENCIES -> FROM_DEPENDENCIES
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind FROM_CLASS_LOADER -> FROM_CLASS_LOADER
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind FALLBACK -> FALLBACK
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$Kind valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$WhenMappings -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.storage.StorageManager $storageManager -> $storageManager
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2 this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2 this$0 -> this$0
    java.lang.Object invoke() -> invoke
    boolean invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltIns$settings$2) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsPackageFragmentProvider -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsPackageFragmentProvider:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragment findPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> findPackage
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration,kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap j2kClassMap -> j2kClassMap
    kotlin.Lazy ownerModuleDescriptor$delegate -> ownerModuleDescriptor$delegate
    kotlin.Lazy isAdditionalBuiltInsFeatureSupported$delegate -> isAdditionalBuiltInsFeatureSupported$delegate
    kotlin.reflect.jvm.internal.impl.types.KotlinType mockSerializableType -> mockSerializableType
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue cloneableType$delegate -> cloneableType$delegate
    kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues javaAnalogueClassesWithCustomSupertypeCache -> javaAnalogueClassesWithCustomSupertypeCache
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue notConsideredDeprecation$delegate -> notConsideredDeprecation$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor moduleDescriptor -> moduleDescriptor
    java.util.Set DROP_LIST_METHOD_SIGNATURES -> DROP_LIST_METHOD_SIGNATURES
    java.util.Set BLACK_LIST_METHOD_SIGNATURES -> BLACK_LIST_METHOD_SIGNATURES
    java.util.Set WHITE_LIST_METHOD_SIGNATURES -> WHITE_LIST_METHOD_SIGNATURES
    java.util.Set MUTABLE_METHOD_SIGNATURES -> MUTABLE_METHOD_SIGNATURES
    java.util.Set BLACK_LIST_CONSTRUCTOR_SIGNATURES -> BLACK_LIST_CONSTRUCTOR_SIGNATURES
    java.util.Set WHITE_LIST_CONSTRUCTOR_SIGNATURES -> WHITE_LIST_CONSTRUCTOR_SIGNATURES
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getOwnerModuleDescriptor() -> getOwnerModuleDescriptor
    boolean isAdditionalBuiltInsFeatureSupported() -> isAdditionalBuiltInsFeatureSupported
    kotlin.reflect.jvm.internal.impl.types.SimpleType getCloneableType() -> getCloneableType
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getNotConsideredDeprecation() -> getNotConsideredDeprecation
    kotlin.reflect.jvm.internal.impl.types.KotlinType createMockJavaIoSerializableType(kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> createMockJavaIoSerializableType
    java.util.Collection getSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getSupertypes
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctions
    java.util.Set getFunctionsNames(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctionsNames
    java.util.Collection getFunctionsNames(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctionsNames
    java.util.Collection getAdditionalFunctions(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.jvm.functions.Function1) -> getAdditionalFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createCloneForArray(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> createCloneForArray
    boolean isMutabilityViolation(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,boolean) -> isMutabilityViolation
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus getJdkMethodStatus(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> getJdkMethodStatus
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor getJavaAnalogue(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getJavaAnalogue
    java.util.Collection getConstructors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getConstructors
    boolean isFunctionAvailable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isFunctionAvailable
    boolean isTrivialCopyConstructorFor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isTrivialCopyConstructorFor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getModuleDescriptor$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> access$getModuleDescriptor$p
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JavaToKotlinClassMap access$getJ2kClassMap$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> access$getJ2kClassMap$p
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor access$getJavaAnalogue(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> access$getJavaAnalogue
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getOwnerModuleDescriptor$p(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> access$getOwnerModuleDescriptor$p
    java.util.Set access$getDROP_LIST_METHOD_SIGNATURES$cp() -> access$getDROP_LIST_METHOD_SIGNATURES$cp
    java.util.Set access$getBLACK_LIST_METHOD_SIGNATURES$cp() -> access$getBLACK_LIST_METHOD_SIGNATURES$cp
    java.util.Set access$getWHITE_LIST_METHOD_SIGNATURES$cp() -> access$getWHITE_LIST_METHOD_SIGNATURES$cp
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion:
    boolean isSerializableInJava(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isSerializableInJava
    boolean isArrayOrPrimitiveArray(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> isArrayOrPrimitiveArray
    java.util.Set getDROP_LIST_METHOD_SIGNATURES() -> getDROP_LIST_METHOD_SIGNATURES
    java.util.Set getBLACK_LIST_METHOD_SIGNATURES() -> getBLACK_LIST_METHOD_SIGNATURES
    java.util.Set buildPrimitiveValueMethodsSet() -> buildPrimitiveValueMethodsSet
    java.util.Set getWHITE_LIST_METHOD_SIGNATURES() -> getWHITE_LIST_METHOD_SIGNATURES
    java.util.Set buildPrimitiveStringConstructorsSet() -> buildPrimitiveStringConstructorsSet
    void <init>() -> <init>
    boolean access$isArrayOrPrimitiveArray(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> access$isArrayOrPrimitiveArray
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.util.Set access$buildPrimitiveValueMethodsSet(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion) -> access$buildPrimitiveValueMethodsSet
    java.util.Set access$buildPrimitiveStringConstructorsSet(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$Companion) -> access$buildPrimitiveStringConstructorsSet
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus BLACK_LIST -> BLACK_LIST
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus WHITE_LIST -> WHITE_LIST
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus NOT_CONSIDERED -> NOT_CONSIDERED
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus DROP -> DROP
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus[] values() -> values
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$WhenMappings -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$cloneableType$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$cloneableType$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.storage.StorageManager $storageManager -> $storageManager
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$createMockJavaIoSerializableType$mockJavaIoPackageFragment$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$createMockJavaIoSerializableType$mockJavaIoPackageFragment$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$createMockJavaIoSerializableType$superTypes$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$createMockJavaIoSerializableType$superTypes$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getAdditionalFunctions$fakeJavaClassDescriptor$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getAdditionalFunctions$fakeJavaClassDescriptor$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor $javaAnalogueDescriptor -> $javaAnalogueDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor $kotlinMutableClassIfContainer -> $kotlinMutableClassIfContainer
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getConstructors$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getConstructors$1:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor $substitutor -> $substitutor
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getFunctions$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getFunctions$2:
    kotlin.reflect.jvm.internal.impl.name.Name $name -> $name
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getJdkMethodStatus$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getJdkMethodStatus$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.util.List getNeighbors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getNeighbors
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getJdkMethodStatus$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$getJdkMethodStatus$2:
    java.lang.String $jvmDescriptor -> $jvmDescriptor
    kotlin.jvm.internal.Ref$ObjectRef $result -> $result
    boolean beforeChildren(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> beforeChildren
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$JDKMemberStatus result() -> result
    java.lang.Object result() -> result
    void <init>(java.lang.String,kotlin.jvm.internal.Ref$ObjectRef) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$isMutabilityViolation$1 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$isMutabilityViolation$1:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$isMutabilityViolation$1 INSTANCE -> INSTANCE
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.util.Collection getNeighbors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getNeighbors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$isMutabilityViolation$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$isMutabilityViolation$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$notConsideredDeprecation$2 -> kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings$notConsideredDeprecation$2:
    kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsSettings) -> <init>
kotlin.reflect.jvm.internal.impl.builtins.jvm.MappingUtilKt -> kotlin.reflect.jvm.internal.impl.builtins.jvm.MappingUtilKt:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution createMappedTypeParametersSubstitution(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> createMappedTypeParametersSubstitution
kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    java.util.List getValueParameters() -> getValueParameters
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey -> kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey:
kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor:
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind -> kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind DECLARATION -> DECLARATION
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind FAKE_OVERRIDE -> FAKE_OVERRIDE
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind DELEGATION -> DELEGATION
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind SYNTHESIZED -> SYNTHESIZED
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isReal() -> isReal
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.CapturedTypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.CapturedTypeParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor originalDescriptor -> originalDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor declarationDescriptor -> declarationDescriptor
    int declaredTypeParametersCount -> declaredTypeParametersCount
    boolean isCapturedFromOuterDeclaration() -> isCapturedFromOuterDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    int getIndex() -> getIndex
    java.lang.String toString() -> toString
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,int) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    java.util.List getUpperBounds() -> getUpperBounds
    kotlin.reflect.jvm.internal.impl.types.Variance getVariance() -> getVariance
    boolean isReified() -> isReified
kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope() -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedInnerClassesScope() -> getUnsubstitutedInnerClassesScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isCompanionObject() -> isCompanionObject
    boolean isData() -> isData
    boolean isInline() -> isInline
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getThisAsReceiverParameter() -> getThisAsReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getOriginal() -> getOriginal
kotlin.reflect.jvm.internal.impl.descriptors.ClassKind -> kotlin.reflect.jvm.internal.impl.descriptors.ClassKind:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind INTERFACE -> INTERFACE
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ENUM_CLASS -> ENUM_CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ENUM_ENTRY -> ENUM_ENTRY
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ANNOTATION_CLASS -> ANNOTATION_CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind OBJECT -> OBJECT
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isSingleton() -> isSingleton
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters -> kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters:
    boolean isInner() -> isInner
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
kotlin.reflect.jvm.internal.impl.descriptors.ConstUtil -> kotlin.reflect.jvm.internal.impl.descriptors.ConstUtil:
    kotlin.reflect.jvm.internal.impl.descriptors.ConstUtil INSTANCE -> INSTANCE
    boolean canBeUsedForConstVal(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> canBeUsedForConstVal
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.ConstUtilKt -> kotlin.reflect.jvm.internal.impl.descriptors.ConstUtilKt:
    boolean canBeUsedForConstVal(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> canBeUsedForConstVal
kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor:
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getConstructedClass() -> getConstructedClass
    kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    boolean isPrimary() -> isPrimary
kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot -> kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor -> kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor:
    java.lang.Object visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.Object) -> visitPackageFragmentDescriptor
    java.lang.Object visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.Object) -> visitPackageViewDescriptor
    java.lang.Object visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object) -> visitFunctionDescriptor
    java.lang.Object visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.Object) -> visitTypeParameterDescriptor
    java.lang.Object visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.Object) -> visitClassDescriptor
    java.lang.Object visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.Object) -> visitTypeAliasDescriptor
    java.lang.Object visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.Object) -> visitModuleDeclaration
    java.lang.Object visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.Object) -> visitConstructorDescriptor
    java.lang.Object visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.Object) -> visitPropertyDescriptor
    java.lang.Object visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,java.lang.Object) -> visitValueParameterDescriptor
    java.lang.Object visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor,java.lang.Object) -> visitPropertyGetterDescriptor
    java.lang.Object visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,java.lang.Object) -> visitPropertySetterDescriptor
    java.lang.Object visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.lang.Object) -> visitReceiverParameterDescriptor
kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource -> kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource:
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility -> kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility:
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt -> kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClassByFqName(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> resolveClassByFqName
kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt -> kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor findClassifierAcrossModuleDependencies(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassifierAcrossModuleDependencies
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassAcrossModuleDependencies(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassAcrossModuleDependencies
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findNonGenericClassAcrossDependencies(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> findNonGenericClassAcrossDependencies
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor findTypeAliasAcrossModuleDependencies(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.ClassId) -> findTypeAliasAcrossModuleDependencies
kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$1 -> kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$1:
    kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.name.ClassId invoke(kotlin.reflect.jvm.internal.impl.name.ClassId) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$2 -> kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$2:
    kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt$findNonGenericClassAcrossDependencies$typeParametersCount$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    int invoke(kotlin.reflect.jvm.internal.impl.name.ClassId) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getInitialSignatureDescriptor() -> getInitialSignatureDescriptor
    boolean isHiddenToOvercomeSignatureClash() -> isHiddenToOvercomeSignatureClash
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isInline() -> isInline
    boolean isTailrec() -> isTailrec
    boolean isHiddenForResolutionEverywhereBesideSupercalls() -> isHiddenForResolutionEverywhereBesideSupercalls
    boolean isSuspend() -> isSuspend
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder -> kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder:
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> setOwner
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setCopyOverrides(boolean) -> setCopyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setName(kotlin.reflect.jvm.internal.impl.name.Name) -> setName
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setValueParameters(java.util.List) -> setValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setTypeParameters(java.util.List) -> setTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setExtensionReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDispatchReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> setOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSignatureChange() -> setSignatureChange
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setPreserveSourceElement() -> setPreserveSourceElement
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDropOriginalInContainingParts() -> setDropOriginalInContainingParts
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenToOvercomeSignatureClash() -> setHiddenToOvercomeSignatureClash
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenForResolutionEverywhereBesideSupercalls() -> setHiddenForResolutionEverywhereBesideSupercalls
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> setAdditionalAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> setSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor build() -> build
kotlin.reflect.jvm.internal.impl.descriptors.InvalidModuleException -> kotlin.reflect.jvm.internal.impl.descriptors.InvalidModuleException:
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    boolean isExternal() -> isExternal
kotlin.reflect.jvm.internal.impl.descriptors.Modality -> kotlin.reflect.jvm.internal.impl.descriptors.Modality:
    kotlin.reflect.jvm.internal.impl.descriptors.Modality FINAL -> FINAL
    kotlin.reflect.jvm.internal.impl.descriptors.Modality SEALED -> SEALED
    kotlin.reflect.jvm.internal.impl.descriptors.Modality OPEN -> OPEN
    kotlin.reflect.jvm.internal.impl.descriptors.Modality ABSTRACT -> ABSTRACT
    kotlin.reflect.jvm.internal.impl.descriptors.Modality[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.descriptors.Modality$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.Modality[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.Modality valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.descriptors.Modality$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.Modality$Companion:
    kotlin.reflect.jvm.internal.impl.descriptors.Modality convertFromFlags(boolean,boolean) -> convertFromFlags
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt -> kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt:
    boolean isFinalClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isFinalClass
kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    boolean shouldSeeInternalsOf(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> shouldSeeInternalsOf
    kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackage
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    java.util.List getExpectedByModules() -> getExpectedByModules
    java.lang.Object getCapability(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability) -> getCapability
kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability -> kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability:
    java.lang.String name -> name
    java.lang.String toString() -> toString
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$DefaultImpls:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getContainingDeclaration
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
kotlin.reflect.jvm.internal.impl.descriptors.Named -> kotlin.reflect.jvm.internal.impl.descriptors.Named:
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses -> kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull packageFragments -> packageFragments
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull classes -> classes
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClass(kotlin.reflect.jvm.internal.impl.name.ClassId,java.util.List) -> getClass
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getModule$p(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> access$getModule$p
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull access$getPackageFragments$p(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> access$getPackageFragments$p
    kotlin.reflect.jvm.internal.impl.storage.StorageManager access$getStorageManager$p(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> access$getStorageManager$p
kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$ClassRequest -> kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$ClassRequest:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    java.util.List typeParametersCount -> typeParametersCount
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,java.util.List) -> <init>
    kotlin.reflect.jvm.internal.impl.name.ClassId component1() -> component1
    java.util.List component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$MockClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$MockClassDescriptor:
    java.util.List typeParameters -> typeParameters
    kotlin.reflect.jvm.internal.impl.types.ClassTypeConstructorImpl typeConstructor -> typeConstructor
    boolean isInner -> isInner
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    kotlin.reflect.jvm.internal.impl.types.ClassTypeConstructorImpl getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    boolean isInner() -> isInner
    boolean isCompanionObject() -> isCompanionObject
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    java.lang.String toString() -> toString
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,boolean,int) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$classes$1 -> kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$classes$1:
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$MockClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$ClassRequest) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$packageFragments$1 -> kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses$packageFragments$1:
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EmptyPackageFragmentDescriptor invoke(kotlin.reflect.jvm.internal.impl.name.FqName) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider -> kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider:
    java.util.List getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragments
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl -> kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl:
    java.util.Collection packageFragments -> packageFragments
    java.util.List getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragments
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    void <init>(java.util.Collection) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl$getSubPackagesOf$1 -> kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl$getSubPackagesOf$1:
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl$getSubPackagesOf$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.name.FqName invoke(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl$getSubPackagesOf$2 -> kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl$getSubPackagesOf$2:
    kotlin.reflect.jvm.internal.impl.name.FqName $fqName -> $fqName
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.name.FqName) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor:
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule() -> getModule
    java.util.List getFragments() -> getFragments
    boolean isEmpty() -> isEmpty
kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor$DefaultImpls:
    boolean isEmpty(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor) -> isEmpty
kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType -> kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters classifierDescriptor -> classifierDescriptor
    java.util.List arguments -> arguments
    kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType outerType -> outerType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getClassifierDescriptor() -> getClassifierDescriptor
    java.util.List getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType getOuterType() -> getOuterType
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor:
    boolean isDefault() -> isDefault
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getCorrespondingProperty() -> getCorrespondingProperty
kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getGetter() -> getGetter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getSetter() -> getSetter
    java.util.List getAccessors() -> getAccessors
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getOriginal() -> getOriginal
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor getBackingField() -> getBackingField
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor getDelegateField() -> getDelegateField
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue getValue() -> getValue
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass -> kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue scopeForOwnerModule$delegate -> scopeForOwnerModule$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor classDescriptor -> classDescriptor
    kotlin.jvm.functions.Function1 scopeFactory -> scopeFactory
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefinerForOwnerModule -> kotlinTypeRefinerForOwnerModule
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getScopeForOwnerModule() -> getScopeForOwnerModule
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getScope
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    kotlin.jvm.functions.Function1 access$getScopeFactory$p(kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass) -> access$getScopeFactory$p
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner access$getKotlinTypeRefinerForOwnerModule$p(kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass) -> access$getKotlinTypeRefinerForOwnerModule$p
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$Companion:
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass create(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,kotlin.jvm.functions.Function1) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$getScope$1 -> kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$getScope$1:
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner $kotlinTypeRefiner -> $kotlinTypeRefiner
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$scopeForOwnerModule$2 -> kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass$scopeForOwnerModule$2:
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
kotlin.reflect.jvm.internal.impl.descriptors.SourceElement -> kotlin.reflect.jvm.internal.impl.descriptors.SourceElement:
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement NO_SOURCE -> NO_SOURCE
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.SourceElement$1 -> kotlin.reflect.jvm.internal.impl.descriptors.SourceElement$1:
    void <init>() -> <init>
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.SourceFile -> kotlin.reflect.jvm.internal.impl.descriptors.SourceFile:
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile NO_SOURCE_FILE -> NO_SOURCE_FILE
    java.lang.String getName() -> getName
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.SourceFile$1 -> kotlin.reflect.jvm.internal.impl.descriptors.SourceFile$1:
    void <init>() -> <init>
    java.lang.String getName() -> getName
kotlin.reflect.jvm.internal.impl.descriptors.Substitutable -> kotlin.reflect.jvm.internal.impl.descriptors.Substitutable:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker -> kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker:
    java.util.Collection findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.Collection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> findLoopsInSupertypesAndDisconnect
kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker$EMPTY -> kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker$EMPTY:
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker$EMPTY INSTANCE -> INSTANCE
    java.util.Collection findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.Collection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> findLoopsInSupertypesAndDisconnect
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getUnderlyingType() -> getUnderlyingType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getExpandedType() -> getExpandedType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor() -> getClassDescriptor
kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor:
    boolean isReified() -> isReified
    kotlin.reflect.jvm.internal.impl.types.Variance getVariance() -> getVariance
    java.util.List getUpperBounds() -> getUpperBounds
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getOriginal() -> getOriginal
    int getIndex() -> getIndex
    boolean isCapturedFromOuterDeclaration() -> isCapturedFromOuterDeclaration
kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt -> kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt:
    java.util.List computeConstructorTypeParameters(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters) -> computeConstructorTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.CapturedTypeParameterDescriptor capturedCopyForInnerDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,int) -> capturedCopyForInnerDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType buildPossiblyInnerType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> buildPossiblyInnerType
    kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType buildPossiblyInnerType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters,int) -> buildPossiblyInnerType
kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$1 -> kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$1:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$2 -> kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$2:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$3 -> kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$3:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt$computeConstructorTypeParameters$parametersFromContainingFunctions$3 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.sequences.Sequence invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.ValueDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ValueDescriptor:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getContainingDeclaration() -> getContainingDeclaration
    int getIndex() -> getIndex
    boolean declaresDefaultValue() -> declaresDefaultValue
    kotlin.reflect.jvm.internal.impl.types.KotlinType getVarargElementType() -> getVarargElementType
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,int) -> copy
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    boolean isCrossinline() -> isCrossinline
    boolean isNoinline() -> isNoinline
kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor$DefaultImpls:
    boolean isLateInit(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> isLateInit
kotlin.reflect.jvm.internal.impl.descriptors.VariableAccessorDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.VariableAccessorDescriptor:
kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor:
    boolean isVar() -> isVar
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue getCompileTimeInitializer() -> getCompileTimeInitializer
    boolean isConst() -> isConst
    boolean isLateInit() -> isLateInit
kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessors -> kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessors:
    boolean isDelegated() -> isDelegated
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities:
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PRIVATE -> PRIVATE
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PRIVATE_TO_THIS -> PRIVATE_TO_THIS
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PROTECTED -> PROTECTED
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility INTERNAL -> INTERNAL
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PUBLIC -> PUBLIC
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility LOCAL -> LOCAL
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility INHERITED -> INHERITED
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility INVISIBLE_FAKE -> INVISIBLE_FAKE
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility UNKNOWN -> UNKNOWN
    java.util.Set INVISIBLE_FROM_OTHER_MODULES -> INVISIBLE_FROM_OTHER_MODULES
    java.util.Map ORDERED_VISIBILITIES -> ORDERED_VISIBILITIES
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility DEFAULT_VISIBILITY -> DEFAULT_VISIBILITY
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue IRRELEVANT_RECEIVER -> IRRELEVANT_RECEIVER
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue ALWAYS_SUITABLE_RECEIVER -> ALWAYS_SUITABLE_RECEIVER
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue FALSE_IF_PROTECTED -> FALSE_IF_PROTECTED
    kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper MODULE_VISIBILITY_HELPER -> MODULE_VISIBILITY_HELPER
    boolean isVisibleIgnoringReceiver(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisibleIgnoringReceiver
    boolean inSameFile(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> inSameFile
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility findInvisibleMember(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> findInvisibleMember
    java.lang.Integer compareLocal(kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compareLocal
    java.lang.Integer compare(kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compare
    boolean isPrivate(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> isPrivate
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue access$000() -> access$000
    kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper access$100() -> access$100
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$1 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$1:
    void <init>(java.lang.String,boolean) -> <init>
    boolean hasContainingSourceFile(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> hasContainingSourceFile
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$10 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$10:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$11 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$11:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$12 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$12:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$2 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$2:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    java.lang.String getInternalDisplayName() -> getInternalDisplayName
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$3 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$3:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    boolean doesReceiverFitForProtectedVisibility(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> doesReceiverFitForProtectedVisibility
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$4 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$4:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$5 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$5:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$6 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$6:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$7 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$7:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$8 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$8:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$9 -> kotlin.reflect.jvm.internal.impl.descriptors.Visibilities$9:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.Visibility -> kotlin.reflect.jvm.internal.impl.descriptors.Visibility:
    java.lang.String name -> name
    boolean isPublicAPI -> isPublicAPI
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    java.lang.Integer compareTo(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compareTo
    java.lang.String getInternalDisplayName() -> getInternalDisplayName
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalize() -> normalize
    boolean isPublicAPI() -> isPublicAPI
    void <init>(java.lang.String,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotatedImpl -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotatedImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    java.util.Map getAllValueArguments() -> getAllValueArguments
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor$DefaultImpls:
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> getFqName
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.types.KotlinType annotationType -> annotationType
    java.util.Map valueArguments -> valueArguments
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement source -> source
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.Map,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    java.util.Map getAllValueArguments() -> getAllValueArguments
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.lang.String toString() -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget FIELD -> FIELD
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget FILE -> FILE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget PROPERTY -> PROPERTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget PROPERTY_GETTER -> PROPERTY_GETTER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget PROPERTY_SETTER -> PROPERTY_SETTER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget RECEIVER -> RECEIVER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget CONSTRUCTOR_PARAMETER -> CONSTRUCTOR_PARAMETER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget SETTER_PARAMETER -> SETTER_PARAMETER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget PROPERTY_DELEGATE_FIELD -> PROPERTY_DELEGATE_FIELD
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget[] $VALUES -> $VALUES
    java.lang.String renderName -> renderName
    void <clinit>() -> <clinit>
    java.lang.String getRenderName() -> getRenderName
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUtilKt -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUtilKt:
    kotlin.reflect.jvm.internal.impl.name.Name DEPRECATED_MESSAGE_NAME -> DEPRECATED_MESSAGE_NAME
    kotlin.reflect.jvm.internal.impl.name.Name DEPRECATED_REPLACE_WITH_NAME -> DEPRECATED_REPLACE_WITH_NAME
    kotlin.reflect.jvm.internal.impl.name.Name DEPRECATED_LEVEL_NAME -> DEPRECATED_LEVEL_NAME
    kotlin.reflect.jvm.internal.impl.name.Name REPLACE_WITH_EXPRESSION_NAME -> REPLACE_WITH_EXPRESSION_NAME
    kotlin.reflect.jvm.internal.impl.name.Name REPLACE_WITH_IMPORTS_NAME -> REPLACE_WITH_IMPORTS_NAME
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor createDeprecatedAnnotation(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,java.lang.String,java.lang.String,java.lang.String) -> createDeprecatedAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor createDeprecatedAnnotation$default(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object) -> createDeprecatedAnnotation$default
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUtilKt$createDeprecatedAnnotation$replaceWithAnnotation$1 -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUtilKt$createDeprecatedAnnotation$replaceWithAnnotation$1:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns $this_createDeprecatedAnnotation -> $this_createDeprecatedAnnotation
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion Companion -> Companion
    boolean isEmpty() -> isEmpty
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion $$INSTANCE -> $$INSTANCE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getEMPTY() -> getEMPTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations create(java.util.List) -> create
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion$EMPTY$1 -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$Companion$EMPTY$1:
    boolean isEmpty() -> isEmpty
    java.lang.Void findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    void <init>() -> <init>
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations$DefaultImpls:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationsImpl -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationsImpl:
    java.util.List annotations -> annotations
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    void <init>(java.util.List) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationsKt -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationsKt:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations composeAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> composeAnnotations
kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy type$delegate -> type$delegate
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns builtIns -> builtIns
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    java.util.Map allValueArguments -> allValueArguments
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    java.util.Map getAllValueArguments() -> getAllValueArguments
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.name.FqName,java.util.Map) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns access$getBuiltIns$p(kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor) -> access$getBuiltIns$p
kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor$type$2 -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor$type$2:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.BuiltInAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations:
    java.util.List delegates -> delegates
    boolean isEmpty() -> isEmpty
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    java.util.Iterator iterator() -> iterator
    void <init>(java.util.List) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations[]) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations$findAnnotation$1 -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations$findAnnotation$1:
    kotlin.reflect.jvm.internal.impl.name.FqName $fqName -> $fqName
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations$iterator$1 -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations$iterator$1:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.CompositeAnnotations$iterator$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.sequences.Sequence invoke(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.FilteredAnnotations -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.FilteredAnnotations:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations delegate -> delegate
    kotlin.jvm.functions.Function1 fqNameFilter -> fqNameFilter
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    java.util.Iterator iterator() -> iterator
    boolean isEmpty() -> isEmpty
    boolean shouldBeReturned(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> shouldBeReturned
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention RUNTIME -> RUNTIME
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention BINARY -> BINARY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention SOURCE -> SOURCE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinRetention valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget ANNOTATION_CLASS -> ANNOTATION_CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TYPE_PARAMETER -> TYPE_PARAMETER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget PROPERTY -> PROPERTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget FIELD -> FIELD
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget LOCAL_VARIABLE -> LOCAL_VARIABLE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget VALUE_PARAMETER -> VALUE_PARAMETER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget CONSTRUCTOR -> CONSTRUCTOR
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget FUNCTION -> FUNCTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget PROPERTY_GETTER -> PROPERTY_GETTER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget PROPERTY_SETTER -> PROPERTY_SETTER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TYPE -> TYPE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget EXPRESSION -> EXPRESSION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget FILE -> FILE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TYPEALIAS -> TYPEALIAS
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TYPE_PROJECTION -> TYPE_PROJECTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget STAR_PROJECTION -> STAR_PROJECTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget PROPERTY_PARAMETER -> PROPERTY_PARAMETER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget CLASS_ONLY -> CLASS_ONLY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget OBJECT -> OBJECT
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget COMPANION_OBJECT -> COMPANION_OBJECT
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget INTERFACE -> INTERFACE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget ENUM_CLASS -> ENUM_CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget ENUM_ENTRY -> ENUM_ENTRY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget LOCAL_CLASS -> LOCAL_CLASS
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget LOCAL_FUNCTION -> LOCAL_FUNCTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget MEMBER_FUNCTION -> MEMBER_FUNCTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TOP_LEVEL_FUNCTION -> TOP_LEVEL_FUNCTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget MEMBER_PROPERTY -> MEMBER_PROPERTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget MEMBER_PROPERTY_WITH_BACKING_FIELD -> MEMBER_PROPERTY_WITH_BACKING_FIELD
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget MEMBER_PROPERTY_WITH_DELEGATE -> MEMBER_PROPERTY_WITH_DELEGATE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget MEMBER_PROPERTY_WITHOUT_FIELD_OR_DELEGATE -> MEMBER_PROPERTY_WITHOUT_FIELD_OR_DELEGATE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TOP_LEVEL_PROPERTY -> TOP_LEVEL_PROPERTY
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TOP_LEVEL_PROPERTY_WITH_BACKING_FIELD -> TOP_LEVEL_PROPERTY_WITH_BACKING_FIELD
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TOP_LEVEL_PROPERTY_WITH_DELEGATE -> TOP_LEVEL_PROPERTY_WITH_DELEGATE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget TOP_LEVEL_PROPERTY_WITHOUT_FIELD_OR_DELEGATE -> TOP_LEVEL_PROPERTY_WITHOUT_FIELD_OR_DELEGATE
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget INITIALIZER -> INITIALIZER
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget DESTRUCTURING_DECLARATION -> DESTRUCTURING_DECLARATION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget LAMBDA_EXPRESSION -> LAMBDA_EXPRESSION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget ANONYMOUS_FUNCTION -> ANONYMOUS_FUNCTION
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget OBJECT_LITERAL -> OBJECT_LITERAL
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget[] $VALUES -> $VALUES
    java.lang.String description -> description
    boolean isDefault -> isDefault
    java.util.HashMap map -> map
    java.util.Set DEFAULT_TARGET_SET -> DEFAULT_TARGET_SET
    java.util.Set ALL_TARGET_SET -> ALL_TARGET_SET
    java.util.Map USE_SITE_MAPPING -> USE_SITE_MAPPING
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    void <init>(java.lang.String,int,java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget[] values() -> values
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.annotations.KotlinTarget$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider:
    java.util.Collection getSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getSupertypes
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctions
    java.util.Collection getConstructors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getConstructors
    java.util.Collection getFunctionsNames(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctionsNames
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider$None -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider$None:
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider$None INSTANCE -> INSTANCE
    java.util.Collection getSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getSupertypes
    java.util.Collection getFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctions
    java.util.Collection getFunctionsNames(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getFunctionsNames
    java.util.Collection getConstructors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getConstructors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.ClassDescriptorFactory -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.ClassDescriptorFactory:
    boolean shouldCreateClass(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.Name) -> shouldCreateClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> createClass
    java.util.Collection getAllContributedClassesIfPossible(kotlin.reflect.jvm.internal.impl.name.FqName) -> getAllContributedClassesIfPossible
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter:
    boolean isFunctionAvailable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isFunctionAvailable
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$All -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$All:
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$All INSTANCE -> INSTANCE
    boolean isFunctionAvailable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isFunctionAvailable
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$NoPlatformDependent -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$NoPlatformDependent:
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter$NoPlatformDependent INSTANCE -> INSTANCE
    boolean isFunctionAvailable(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isFunctionAvailable
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilterKt -> kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilterKt:
    kotlin.reflect.jvm.internal.impl.name.FqName PLATFORM_DEPENDENT_ANNOTATION_FQ_NAME -> PLATFORM_DEPENDENT_ANNOTATION_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName getPLATFORM_DEPENDENT_ANNOTATION_FQ_NAME() -> getPLATFORM_DEPENDENT_ANNOTATION_FQ_NAME
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue defaultType -> defaultType
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue unsubstitutedInnerClassesScope -> unsubstitutedInnerClassesScope
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue thisAsReceiverParameter -> thisAsReceiverParameter
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedInnerClassesScope() -> getUnsubstitutedInnerClassesScope
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getThisAsReceiverParameter() -> getThisAsReceiverParameter
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope() -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1 this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$1) -> <init>
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$2:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$3 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor$3:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractClassDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractLazyTypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractLazyTypeParameterDescriptor:
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.Variance,boolean,int,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> <init>
    java.lang.String toString() -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractReceiverParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractReceiverParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.name.Name RECEIVER_PARAMETER_NAME -> RECEIVER_PARAMETER_NAME
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    java.util.List getValueParameters() -> getValueParameters
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor:
    java.util.List declaredTypeParametersImpl -> declaredTypeParametersImpl
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$typeConstructor$1 typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibilityImpl -> visibilityImpl
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    void initialize(java.util.List) -> initialize
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    boolean isInner() -> isInner
    java.util.Collection getTypeAliasConstructors() -> getTypeAliasConstructors
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
    java.util.List getTypeConstructorTypeParameters() -> getTypeConstructorTypeParameters
    kotlin.reflect.jvm.internal.impl.types.SimpleType computeDefaultType() -> computeDefaultType
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$computeDefaultType$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$computeDefaultType$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$isInner$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$isInner$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$typeConstructor$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor$typeConstructor$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeAliasDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.types.Variance variance -> variance
    boolean reified -> reified
    int index -> index
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue defaultType -> defaultType
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.Variance,boolean,int,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> <init>
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    java.util.List resolveUpperBounds() -> resolveUpperBounds
    kotlin.reflect.jvm.internal.impl.types.Variance getVariance() -> getVariance
    boolean isReified() -> isReified
    int getIndex() -> getIndex
    boolean isCapturedFromOuterDeclaration() -> isCapturedFromOuterDeclaration
    java.util.List getUpperBounds() -> getUpperBounds
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getOriginal() -> getOriginal
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$1:
    kotlin.reflect.jvm.internal.impl.storage.StorageManager val$storageManager -> val$storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker val$supertypeLoopChecker -> val$supertypeLoopChecker
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> <init>
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2:
    kotlin.reflect.jvm.internal.impl.storage.StorageManager val$storageManager -> val$storageManager
    kotlin.reflect.jvm.internal.impl.name.Name val$name -> val$name
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2 this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$2) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$TypeParameterTypeConstructor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor$TypeParameterTypeConstructor:
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker supertypeLoopChecker -> supertypeLoopChecker
    kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.AbstractTypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> <init>
    java.util.Collection computeSupertypes() -> computeSupertypes
    java.util.List getParameters() -> getParameters
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    kotlin.reflect.jvm.internal.impl.types.KotlinType defaultSupertypeIfEmpty() -> defaultSupertypeIfEmpty
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl:
    boolean isPrimary -> isPrimary
    kotlin.reflect.jvm.internal.impl.name.Name NAME -> NAME
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl create(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> create
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl initialize(java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.util.List) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl initialize(java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor calculateDispatchReceiverParameter() -> calculateDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getConstructedClass() -> getConstructedClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    boolean isPrimary() -> isPrimary
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getContainingDeclaration() -> getContainingDeclaration
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorBase -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorBase:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement source -> source
    boolean isExternal -> isExternal
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,boolean) -> <init>
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind kind -> kind
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope unsubstitutedMemberScope -> unsubstitutedMemberScope
    java.util.Set constructors -> constructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor primaryConstructor -> primaryConstructor
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.ClassKind,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,boolean,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    void initialize(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,java.util.Set,kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    boolean isCompanionObject() -> isCompanionObject
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isInner() -> isInner
    java.lang.String toString() -> toString
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider -> kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider:
    java.util.List providers -> providers
    java.util.List getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragments
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    void <init>(java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    java.lang.String toString() -> toString
    java.lang.String toString(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorNonRootImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorNonRootImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement source -> source
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorVisitorEmptyBodies -> kotlin.reflect.jvm.internal.impl.descriptors.impl.DeclarationDescriptorVisitorEmptyBodies:
    void <init>() -> <init>
    java.lang.Object visitDeclarationDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.Object) -> visitDeclarationDescriptor
    java.lang.Object visitVariableDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,java.lang.Object) -> visitVariableDescriptor
    java.lang.Object visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object) -> visitFunctionDescriptor
    java.lang.Object visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.Object) -> visitTypeParameterDescriptor
    java.lang.Object visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.Object) -> visitPackageFragmentDescriptor
    java.lang.Object visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.Object) -> visitPackageViewDescriptor
    java.lang.Object visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.Object) -> visitClassDescriptor
    java.lang.Object visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.Object) -> visitTypeAliasDescriptor
    java.lang.Object visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.Object) -> visitModuleDeclaration
    java.lang.Object visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.Object) -> visitConstructorDescriptor
    java.lang.Object visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.Object) -> visitPropertyDescriptor
    java.lang.Object visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,java.lang.Object) -> visitValueParameterDescriptor
    java.lang.Object visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor,java.lang.Object) -> visitPropertyGetterDescriptor
    java.lang.Object visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,java.lang.Object) -> visitPropertySetterDescriptor
    java.lang.Object visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.lang.Object) -> visitReceiverParameterDescriptor
kotlin.reflect.jvm.internal.impl.descriptors.impl.EmptyPackageFragmentDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EmptyPackageFragmentDescriptor:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope scope -> scope
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue enumMemberNames -> enumMemberNames
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor create(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> create
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isCompanionObject() -> isCompanionObject
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.lang.String toString() -> toString
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue access$300(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor) -> access$300
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull functions -> functions
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull properties -> properties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allDescriptors -> allDescriptors
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection computeProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> computeProperties
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection computeFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> computeFunctions
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getSupertypeScope() -> getSupertypeScope
    java.util.Collection resolveFakeOverrides(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> resolveFakeOverrides
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection computeAllDeclarations() -> computeAllDeclarations
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.util.Collection access$000(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$000
    java.util.Collection access$100(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$100
    java.util.Collection access$200(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope) -> access$200
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor val$this$0 -> val$this$0
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor) -> <init>
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$2:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor val$this$0 -> val$this$0
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor) -> <init>
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$3 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$3:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor val$this$0 -> val$this$0
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor) -> <init>
    java.util.Collection invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$4 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope$4:
    java.util.Set val$result -> val$result
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor$EnumEntryScope,java.util.Set) -> <init>
    void addFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> addFakeOverride
    void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> conflict
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.FieldDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.FieldDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor correspondingProperty -> correspondingProperty
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl:
    java.util.List typeParameters -> typeParameters
    java.util.List unsubstitutedValueParameters -> unsubstitutedValueParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType unsubstitutedReturnType -> unsubstitutedReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor extensionReceiverParameter -> extensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor dispatchReceiverParameter -> dispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    boolean isOperator -> isOperator
    boolean isInfix -> isInfix
    boolean isExternal -> isExternal
    boolean isInline -> isInline
    boolean isTailrec -> isTailrec
    boolean isExpect -> isExpect
    boolean isActual -> isActual
    boolean isHiddenToOvercomeSignatureClash -> isHiddenToOvercomeSignatureClash
    boolean isHiddenForResolutionEverywhereBesideSupercalls -> isHiddenForResolutionEverywhereBesideSupercalls
    boolean isSuspend -> isSuspend
    boolean hasStableParameterNames -> hasStableParameterNames
    boolean hasSynthesizedParameterNames -> hasSynthesizedParameterNames
    java.util.Collection overriddenFunctions -> overriddenFunctions
    kotlin.jvm.functions.Function0 lazyOverriddenFunctionsTask -> lazyOverriddenFunctionsTask
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor original -> original
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind kind -> kind
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor initialSignatureDescriptor -> initialSignatureDescriptor
    java.util.Map userDataMap -> userDataMap
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> initialize
    void setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    void setOperator(boolean) -> setOperator
    void setInfix(boolean) -> setInfix
    void setExternal(boolean) -> setExternal
    void setInline(boolean) -> setInline
    void setTailrec(boolean) -> setTailrec
    void setExpect(boolean) -> setExpect
    void setActual(boolean) -> setActual
    void setHiddenToOvercomeSignatureClash(boolean) -> setHiddenToOvercomeSignatureClash
    void setHiddenForResolutionEverywhereBesideSupercalls(boolean) -> setHiddenForResolutionEverywhereBesideSupercalls
    void setSuspend(boolean) -> setSuspend
    void setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setReturnType
    void setHasStableParameterNames(boolean) -> setHasStableParameterNames
    void setHasSynthesizedParameterNames(boolean) -> setHasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    void performOverriddenLazyCalculationIfNeeded() -> performOverriddenLazyCalculationIfNeeded
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isExternal() -> isExternal
    boolean isInline() -> isInline
    boolean isTailrec() -> isTailrec
    boolean isSuspend() -> isSuspend
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    boolean isHiddenToOvercomeSignatureClash() -> isHiddenToOvercomeSignatureClash
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getValueParameters() -> getValueParameters
    boolean hasStableParameterNames() -> hasStableParameterNames
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    boolean isHiddenForResolutionEverywhereBesideSupercalls() -> isHiddenForResolutionEverywhereBesideSupercalls
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration newCopyBuilder(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> newCopyBuilder
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor doSubstitute(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> doSubstitute
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSourceToUseForCopy(boolean,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> getSourceToUseForCopy
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    java.util.List getSubstitutedValueParameters(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.util.List,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> getSubstitutedValueParameters
    java.util.List getSubstitutedValueParameters(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.util.List,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor,boolean,boolean,boolean[]) -> getSubstitutedValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getInitialSignatureDescriptor() -> getInitialSignatureDescriptor
    void setInitialSignatureDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> setInitialSignatureDescriptor
    void putInUserDataMap(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey,java.lang.Object) -> putInUserDataMap
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor access$000(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl) -> access$000
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$1:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor val$substitutor -> val$substitutor
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> <init>
    java.util.Collection invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$2:
    java.util.List val$destructuringVariables -> val$destructuringVariables
    void <init>(java.util.List) -> <init>
    java.util.List invoke() -> invoke
    java.lang.Object invoke() -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration -> kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution substitution -> substitution
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor newOwner -> newOwner
    kotlin.reflect.jvm.internal.impl.descriptors.Modality newModality -> newModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility newVisibility -> newVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor original -> original
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind kind -> kind
    java.util.List newValueParameterDescriptors -> newValueParameterDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor newExtensionReceiverParameter -> newExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor dispatchReceiverParameter -> dispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.types.KotlinType newReturnType -> newReturnType
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    boolean copyOverrides -> copyOverrides
    boolean signatureChange -> signatureChange
    boolean preserveSourceElement -> preserveSourceElement
    boolean dropOriginalInContainingParts -> dropOriginalInContainingParts
    boolean isHiddenToOvercomeSignatureClash -> isHiddenToOvercomeSignatureClash
    java.util.List newTypeParameters -> newTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations additionalAnnotations -> additionalAnnotations
    boolean isHiddenForResolutionEverywhereBesideSupercalls -> isHiddenForResolutionEverywhereBesideSupercalls
    java.util.Map userDataMap -> userDataMap
    java.lang.Boolean newHasSynthesizedParameterNames -> newHasSynthesizedParameterNames
    boolean justForTypeSubstitution -> justForTypeSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> setOwner
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setCopyOverrides(boolean) -> setCopyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setName(kotlin.reflect.jvm.internal.impl.name.Name) -> setName
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setValueParameters(java.util.List) -> setValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setTypeParameters(java.util.List) -> setTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setExtensionReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setDispatchReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> setOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setSignatureChange() -> setSignatureChange
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setPreserveSourceElement() -> setPreserveSourceElement
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setDropOriginalInContainingParts() -> setDropOriginalInContainingParts
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setHiddenToOvercomeSignatureClash() -> setHiddenToOvercomeSignatureClash
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setHiddenForResolutionEverywhereBesideSupercalls() -> setHiddenForResolutionEverywhereBesideSupercalls
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> setAdditionalAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setHasSynthesizedParameterNames(boolean) -> setHasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> setSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor build() -> build
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration setJustForTypeSubstitution(boolean) -> setJustForTypeSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> setSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> setAdditionalAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenForResolutionEverywhereBesideSupercalls() -> setHiddenForResolutionEverywhereBesideSupercalls
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenToOvercomeSignatureClash() -> setHiddenToOvercomeSignatureClash
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDropOriginalInContainingParts() -> setDropOriginalInContainingParts
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setPreserveSourceElement() -> setPreserveSourceElement
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSignatureChange() -> setSignatureChange
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> setOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDispatchReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setExtensionReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setTypeParameters(java.util.List) -> setTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setValueParameters(java.util.List) -> setValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setName(kotlin.reflect.jvm.internal.impl.name.Name) -> setName
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setCopyOverrides(boolean) -> setCopyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> setOwner
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations access$100(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$100
    java.util.List access$200(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$200
    boolean access$300(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$300
    boolean access$400(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$400
    java.lang.Boolean access$500(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$500
    java.util.Map access$600(kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl$CopyConfiguration) -> access$600
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyClassReceiverParameterDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyClassReceiverParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor descriptor -> descriptor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitClassReceiver receiverValue -> receiverValue
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue getValue() -> getValue
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    java.lang.String toString() -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue fragments$delegate -> fragments$delegate
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope memberScope -> memberScope
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl module -> module
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    void <clinit>() -> <clinit>
    java.util.List getFragments() -> getFragments
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl getModule() -> getModule
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule() -> getModule
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl,kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    boolean isEmpty() -> isEmpty
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$fragments$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$fragments$2:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$memberScope$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$memberScope$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor original -> original
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor originalSubstitutor -> originalSubstitutor
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor newSubstitutor -> newSubstitutor
    java.util.List typeConstructorParameters -> typeConstructorParameters
    java.util.List declaredTypeParameters -> declaredTypeParameters
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeConstructor -> typeConstructor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> <init>
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor getSubstitutor() -> getSubstitutor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope() -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getThisAsReceiverParameter() -> getThisAsReceiverParameter
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isExternal() -> isExternal
    boolean isCompanionObject() -> isCompanionObject
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedInnerClassesScope() -> getUnsubstitutedInnerClassesScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.LazySubstitutingClassDescriptor) -> <init>
    java.lang.Boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getMemberScope
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptor$Companion:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getRefinedUnsubstitutedMemberScopeIfPossible$descriptors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getRefinedUnsubstitutedMemberScopeIfPossible$descriptors
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getRefinedMemberScopeIfPossible$descriptors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getRefinedMemberScopeIfPossible$descriptors
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptorKt -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleAwareClassDescriptorKt:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getRefinedUnsubstitutedMemberScopeIfPossible(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getRefinedUnsubstitutedMemberScopeIfPossible
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getRefinedMemberScopeIfPossible(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getRefinedMemberScopeIfPossible
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependencies -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependencies:
    java.util.List getAllDependencies() -> getAllDependencies
    java.util.Set getModulesWhoseInternalsAreVisible() -> getModulesWhoseInternalsAreVisible
    java.util.List getExpectedByDependencies() -> getExpectedByDependencies
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependenciesImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependenciesImpl:
    java.util.List allDependencies -> allDependencies
    java.util.Set modulesWhoseInternalsAreVisible -> modulesWhoseInternalsAreVisible
    java.util.List expectedByDependencies -> expectedByDependencies
    java.util.List getAllDependencies() -> getAllDependencies
    java.util.Set getModulesWhoseInternalsAreVisible() -> getModulesWhoseInternalsAreVisible
    java.util.List getExpectedByDependencies() -> getExpectedByDependencies
    void <init>(java.util.List,java.util.Set,java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    java.util.Map capabilities -> capabilities
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependencies dependencies -> dependencies
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider packageFragmentProviderForModuleContent -> packageFragmentProviderForModuleContent
    boolean isValid -> isValid
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull packages -> packages
    kotlin.Lazy packageFragmentProviderForWholeModuleWithDependencies$delegate -> packageFragmentProviderForWholeModuleWithDependencies$delegate
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns builtIns -> builtIns
    kotlin.reflect.jvm.internal.impl.platform.TargetPlatform platform -> platform
    kotlin.reflect.jvm.internal.impl.name.Name stableName -> stableName
    void <clinit>() -> <clinit>
    boolean isValid() -> isValid
    void assertValid() -> assertValid
    java.util.List getExpectedByModules() -> getExpectedByModules
    kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackage
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider getPackageFragmentProviderForWholeModuleWithDependencies() -> getPackageFragmentProviderForWholeModuleWithDependencies
    boolean isInitialized() -> isInitialized
    void setDependencies(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependencies) -> setDependencies
    void setDependencies(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl[]) -> setDependencies
    void setDependencies(java.util.List) -> setDependencies
    void setDependencies(java.util.List,java.util.Set) -> setDependencies
    boolean shouldSeeInternalsOf(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> shouldSeeInternalsOf
    java.lang.String getId() -> getId
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider getPackageFragmentProvider() -> getPackageFragmentProvider
    java.lang.Object getCapability(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability) -> getCapability
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.platform.TargetPlatform,java.util.Map,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.platform.TargetPlatform,java.util.Map,kotlin.reflect.jvm.internal.impl.name.Name,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.platform.TargetPlatform) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.storage.StorageManager access$getStorageManager$p(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$getStorageManager$p
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDependencies access$getDependencies$p(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$getDependencies$p
    java.lang.String access$getId$p(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$getId$p
    boolean access$isInitialized$p(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$isInitialized$p
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider access$getPackageFragmentProviderForModuleContent$p(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> access$getPackageFragmentProviderForModuleContent$p
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl$packageFragmentProviderForWholeModuleWithDependencies$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl$packageFragmentProviderForWholeModuleWithDependencies$2:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl$packages$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl$packages$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl invoke(kotlin.reflect.jvm.internal.impl.name.FqName) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.ModuleDescriptorImpl) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.MutableClassDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.MutableClassDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind kind -> kind
    boolean isInner -> isInner
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeConstructor -> typeConstructor
    java.util.List typeParameters -> typeParameters
    java.util.Collection supertypes -> supertypes
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassKind,boolean,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    void setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    void setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isCompanionObject() -> isCompanionObject
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    java.util.Set getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    void setTypeParameterDescriptors(java.util.List) -> setTypeParameterDescriptors
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    void createTypeConstructor() -> createTypeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    java.lang.String toString() -> toString
    java.util.Collection getConstructors() -> getConstructors
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.PackageFragmentDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PackageFragmentDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyAccessorDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyAccessorDescriptorImpl:
    boolean isDefault -> isDefault
    boolean isExternal -> isExternal
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor correspondingProperty -> correspondingProperty
    boolean isInline -> isInline
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind kind -> kind
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor initialSignatureDescriptor -> initialSignatureDescriptor
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    boolean isDefault() -> isDefault
    void setDefault(boolean) -> setDefault
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind getKind() -> getKind
    boolean isOperator() -> isOperator
    boolean isInfix() -> isInfix
    boolean isExternal() -> isExternal
    boolean isInline() -> isInline
    boolean isTailrec() -> isTailrec
    boolean isSuspend() -> isSuspend
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.util.List getTypeParameters() -> getTypeParameters
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    void setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getCorrespondingProperty() -> getCorrespondingProperty
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    java.util.Collection getOverriddenDescriptors(boolean) -> getOverriddenDescriptors
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getInitialSignatureDescriptor() -> getInitialSignatureDescriptor
    void setInitialSignatureDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> setInitialSignatureDescriptor
    boolean isHiddenToOvercomeSignatureClash() -> isHiddenToOvercomeSignatureClash
    boolean isHiddenForResolutionEverywhereBesideSupercalls() -> isHiddenForResolutionEverywhereBesideSupercalls
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    java.util.Collection overriddenProperties -> overriddenProperties
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor original -> original
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind kind -> kind
    boolean lateInit -> lateInit
    boolean isConst -> isConst
    boolean isExpect -> isExpect
    boolean isActual -> isActual
    boolean isExternal -> isExternal
    boolean isDelegated -> isDelegated
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor dispatchReceiverParameter -> dispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor extensionReceiverParameter -> extensionReceiverParameter
    java.util.List typeParameters -> typeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl getter -> getter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor setter -> setter
    boolean setterProjectedOut -> setterProjectedOut
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor backingField -> backingField
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor delegateField -> delegateField
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,boolean,boolean,boolean,boolean,boolean,boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl create(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,boolean,boolean,boolean,boolean,boolean,boolean) -> create
    void setType(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setType
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor) -> initialize
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor) -> initialize
    void setSetterProjectedOut(boolean) -> setSetterProjectedOut
    void setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl getGetter() -> getGetter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getSetter() -> getSetter
    boolean isSetterProjectedOut() -> isSetterProjectedOut
    boolean isLateInit() -> isLateInit
    boolean isConst() -> isConst
    boolean isExternal() -> isExternal
    boolean isDelegated() -> isDelegated
    java.util.List getAccessors() -> getAccessors
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration newCopyBuilder() -> newCopyBuilder
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSourceToUseForCopy(boolean,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> getSourceToUseForCopy
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor doSubstitute(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> doSubstitute
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalizeVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> normalizeVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getSubstitutedInitialSignatureDescriptor(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor,kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor) -> getSubstitutedInitialSignatureDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind getKind() -> getKind
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor getBackingField() -> getBackingField
    kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor getDelegateField() -> getDelegateField
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getGetter() -> getGetter
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor access$000(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl) -> access$000
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor owner -> owner
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor original -> original
    boolean preserveSourceElement -> preserveSourceElement
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind kind -> kind
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution substitution -> substitution
    boolean copyOverrides -> copyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor dispatchReceiverParameter -> dispatchReceiverParameter
    java.util.List newTypeParameters -> newTypeParameters
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> setOwner
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> setOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> setSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration setCopyOverrides(boolean) -> setCopyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor build() -> build
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getOriginalGetter() -> getOriginalGetter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getOriginalSetter() -> getOriginalSetter
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor access$100(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$100
    kotlin.reflect.jvm.internal.impl.descriptors.Modality access$200(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$200
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility access$300(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$300
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor access$400(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$400
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind access$500(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$500
    kotlin.reflect.jvm.internal.impl.name.Name access$600(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$600
    boolean access$700(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$700
    java.util.List access$800(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$800
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution access$900(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$900
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor access$1000(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$1000
    boolean access$1100(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl$CopyConfiguration) -> access$1100
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.types.KotlinType returnType -> returnType
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor original -> original
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void initialize(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> initialize
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    java.util.List getValueParameters() -> getValueParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor parameter -> parameter
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor original -> original
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl createSetterParameter(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createSetterParameter
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    java.util.List getValueParameters() -> getValueParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.ReceiverParameterDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ReceiverParameterDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue value -> value
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue getValue() -> getValue
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl:
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl create(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> create
    kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.util.Map) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.SubpackagesScope -> kotlin.reflect.jvm.internal.impl.descriptors.impl.SubpackagesScope:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor moduleDescriptor -> moduleDescriptor
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.Name) -> getPackage
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnderlyingConstructorDescriptor() -> getUnderlyingConstructorDescriptor
kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue withDispatchReceiver$delegate -> withDispatchReceiver$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor underlyingConstructorDescriptor -> underlyingConstructorDescriptor
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor typeAliasDescriptor -> typeAliasDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnderlyingConstructorDescriptor() -> getUnderlyingConstructorDescriptor
    boolean isPrimary() -> isPrimary
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getConstructedClass() -> getConstructedClass
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getTypeAliasDescriptor() -> getTypeAliasDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor getTypeSubstitutorForUnderlyingClass(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> getTypeSubstitutorForUnderlyingClass
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptor createIfAvailable(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor) -> createIfAvailable
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor access$getTypeSubstitutorForUnderlyingClass(kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$Companion,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> access$getTypeSubstitutorForUnderlyingClass
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$withDispatchReceiver$2 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl$withDispatchReceiver$2:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor $underlyingConstructorDescriptor -> $underlyingConstructorDescriptor
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeAliasConstructorDescriptorImpl,kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeParameterDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeParameterDescriptorImpl:
    kotlin.jvm.functions.Function1 reportCycleError -> reportCycleError
    java.util.List upperBounds -> upperBounds
    boolean initialized -> initialized
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor createWithDefaultBound(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.name.Name,int) -> createWithDefaultBound
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeParameterDescriptorImpl createForFurtherModification(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.name.Name,int,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createForFurtherModification
    kotlin.reflect.jvm.internal.impl.descriptors.impl.TypeParameterDescriptorImpl createForFurtherModification(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.name.Name,int,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> createForFurtherModification
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.name.Name,int,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker) -> <init>
    void checkInitialized() -> checkInitialized
    void checkUninitialized() -> checkUninitialized
    java.lang.String nameForAssertions() -> nameForAssertions
    void setInitialized() -> setInitialized
    void addUpperBound(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> addUpperBound
    void doAddUpperBound(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> doAddUpperBound
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    java.util.List resolveUpperBounds() -> resolveUpperBounds
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor original -> original
    int index -> index
    boolean declaresDefaultValue -> declaresDefaultValue
    boolean isCrossinline -> isCrossinline
    boolean isNoinline -> isNoinline
    kotlin.reflect.jvm.internal.impl.types.KotlinType varargElementType -> varargElementType
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    boolean declaresDefaultValue() -> declaresDefaultValue
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    boolean isVar() -> isVar
    java.lang.Void getCompileTimeInitializer() -> getCompileTimeInitializer
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue getCompileTimeInitializer() -> getCompileTimeInitializer
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,int) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    int getIndex() -> getIndex
    boolean isCrossinline() -> isCrossinline
    boolean isNoinline() -> isNoinline
    kotlin.reflect.jvm.internal.impl.types.KotlinType getVarargElementType() -> getVarargElementType
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void <clinit>() -> <clinit>
    boolean isLateInit() -> isLateInit
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl createWithDestructuringDeclarations(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.functions.Function0) -> createWithDestructuringDeclarations
kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$Companion:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl createWithDestructuringDeclarations(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.functions.Function0) -> createWithDestructuringDeclarations
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy destructuringVariables$delegate -> destructuringVariables$delegate
    void <clinit>() -> <clinit>
    java.util.List getDestructuringVariables() -> getDestructuringVariables
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.name.Name,int) -> copy
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.functions.Function0) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration$copy$1 -> kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration$copy$1:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.impl.ValueParameterDescriptorImpl$WithDestructuringDeclaration) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.impl.VariableDescriptorImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.VariableDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.types.KotlinType outType -> outType
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void setOutType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setOutType
    kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor getOriginal() -> getOriginal
    java.util.List getValueParameters() -> getValueParameters
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    java.util.Collection getOverriddenDescriptors() -> getOverriddenDescriptors
    java.util.List getTypeParameters() -> getTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getExtensionReceiverParameter() -> getExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    boolean isConst() -> isConst
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal() -> getOriginal
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.impl.VariableDescriptorWithInitializerImpl -> kotlin.reflect.jvm.internal.impl.descriptors.impl.VariableDescriptorWithInitializerImpl:
    boolean isVar -> isVar
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue compileTimeInitializer -> compileTimeInitializer
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    boolean isVar() -> isVar
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue getCompileTimeInitializer() -> getCompileTimeInitializer
    void setCompileTimeInitializer(kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue) -> setCompileTimeInitializer
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache:
    java.util.concurrent.ConcurrentHashMap cache -> cache
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver resolver -> resolver
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinder kotlinClassFinder -> kotlinClassFinder
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getPackagePartScope(kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass) -> getPackagePartScope
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver,kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinder) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectAnnotationSource -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectAnnotationSource:
    java.lang.annotation.Annotation annotation -> annotation
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    java.lang.annotation.Annotation getAnnotation() -> getAnnotation
    void <init>(java.lang.annotation.Annotation) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectClassStructure -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectClassStructure:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectClassStructure INSTANCE -> INSTANCE
    void loadClassAnnotations(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor) -> loadClassAnnotations
    void visitMembers(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor) -> visitMembers
    void loadMethodAnnotations(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor) -> loadMethodAnnotations
    void loadConstructorAnnotations(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor) -> loadConstructorAnnotations
    void loadFieldAnnotations(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor) -> loadFieldAnnotations
    void processAnnotation(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor,java.lang.annotation.Annotation) -> processAnnotation
    void processAnnotationArguments(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor,java.lang.annotation.Annotation,java.lang.Class) -> processAnnotationArguments
    kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue classLiteralValue(java.lang.Class) -> classLiteralValue
    void processAnnotationArgumentValue(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor,kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> processAnnotationArgumentValue
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectJavaClassFinder -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectJavaClassFinder:
    java.lang.ClassLoader classLoader -> classLoader
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass findClass(kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder$Request) -> findClass
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage findPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> findPackage
    java.util.Set knownClassNamesInPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> knownClassNamesInPackage
    void <init>(java.lang.ClassLoader) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectJavaClassFinderKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectJavaClassFinderKt:
    java.lang.Class tryLoadClass(java.lang.ClassLoader,java.lang.String) -> tryLoadClass
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass:
    java.lang.Class klass -> klass
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader classHeader -> classHeader
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass$Factory Factory -> Factory
    java.lang.String getLocation() -> getLocation
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    void loadClassAnnotations(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor,byte[]) -> loadClassAnnotations
    void visitMembers(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor,byte[]) -> visitMembers
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class getKlass() -> getKlass
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader getClassHeader() -> getClassHeader
    void <init>(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader) -> <init>
    void <clinit>() -> <clinit>
    void <init>(java.lang.Class,kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass$Factory -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass$Factory:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClass create(java.lang.Class) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinder -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinder:
    java.lang.ClassLoader classLoader -> classLoader
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result findKotlinClass(java.lang.String) -> findKotlinClass
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result findKotlinClassOrContent(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findKotlinClassOrContent
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result findKotlinClassOrContent(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findKotlinClassOrContent
    java.io.InputStream findBuiltInsData(kotlin.reflect.jvm.internal.impl.name.FqName) -> findBuiltInsData
    void <init>(java.lang.ClassLoader) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinderKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassFinderKt:
    java.lang.String toRuntimeFqName(kotlin.reflect.jvm.internal.impl.name.ClassId) -> toRuntimeFqName
    java.lang.String access$toRuntimeFqName(kotlin.reflect.jvm.internal.impl.name.ClassId) -> access$toRuntimeFqName
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.ReflectKotlinClassKt:
    java.util.Set TYPES_ELIGIBLE_FOR_SIMPLE_VISIT -> TYPES_ELIGIBLE_FOR_SIMPLE_VISIT
    void <clinit>() -> <clinit>
    java.util.Set access$getTYPES_ELIGIBLE_FOR_SIMPLE_VISIT$p() -> access$getTYPES_ELIGIBLE_FOR_SIMPLE_VISIT$p
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeErrorReporter -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeErrorReporter:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeErrorReporter INSTANCE -> INSTANCE
    void reportIncompleteHierarchy(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List) -> reportIncompleteHierarchy
    void reportCannotInferVisibility(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> reportCannotInferVisibility
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents deserialization -> deserialization
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache packagePartScopeCache -> packagePartScopeCache
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule() -> getModule
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents getDeserialization() -> getDeserialization
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache getPackagePartScopeCache() -> getPackagePartScopeCache
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents,kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents,kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.PackagePartScopeCache,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData$Companion -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData$Companion:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleData create(java.lang.ClassLoader) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleDataKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeModuleDataKt:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider makeLazyJavaPackageFragmentFromClassLoaderProvider(java.lang.ClassLoader,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver,kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver,kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider) -> makeLazyJavaPackageFragmentFromClassLoaderProvider
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider makeLazyJavaPackageFragmentFromClassLoaderProvider$default(java.lang.ClassLoader,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver,kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver,kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider,int,java.lang.Object) -> makeLazyJavaPackageFragmentFromClassLoaderProvider$default
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializationComponentsForJava makeDeserializationComponentsForJava(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver) -> makeDeserializationComponentsForJava
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeSourceElementFactory -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeSourceElementFactory:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeSourceElementFactory INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement source(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement) -> source
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeSourceElementFactory$RuntimeSourceElement -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.RuntimeSourceElementFactory$RuntimeSourceElement:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaElement javaElement -> javaElement
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaElement getJavaElement() -> getJavaElement
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement getJavaElement() -> getJavaElement
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaElement) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.SignatureSerializer -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.SignatureSerializer:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.components.SignatureSerializer INSTANCE -> INSTANCE
    java.lang.String methodDesc(java.lang.reflect.Method) -> methodDesc
    java.lang.String constructorDesc(java.lang.reflect.Constructor) -> constructorDesc
    java.lang.String fieldDesc(java.lang.reflect.Field) -> fieldDesc
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader$Cache cache -> cache
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader$Cache buildCache(java.lang.reflect.Member) -> buildCache
    java.util.List loadParameterNames(java.lang.reflect.Member) -> loadParameterNames
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader$Cache -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.Java8ParameterNamesLoader$Cache:
    java.lang.reflect.Method getParameters -> getParameters
    java.lang.reflect.Method getName -> getName
    java.lang.reflect.Method getGetParameters() -> getGetParameters
    java.lang.reflect.Method getGetName() -> getGetName
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt:
    java.util.List PRIMITIVE_CLASSES -> PRIMITIVE_CLASSES
    java.util.Map WRAPPER_TO_PRIMITIVE -> WRAPPER_TO_PRIMITIVE
    java.util.Map PRIMITIVE_TO_WRAPPER -> PRIMITIVE_TO_WRAPPER
    java.util.Map FUNCTION_CLASSES -> FUNCTION_CLASSES
    java.lang.ClassLoader getSafeClassLoader(java.lang.Class) -> getSafeClassLoader
    boolean isEnumClassOrSpecializedEnumEntryClass(java.lang.Class) -> isEnumClassOrSpecializedEnumEntryClass
    java.lang.Class getPrimitiveByWrapper(java.lang.Class) -> getPrimitiveByWrapper
    java.lang.Class getWrapperByPrimitive(java.lang.Class) -> getWrapperByPrimitive
    java.lang.Integer getFunctionClassArity(java.lang.Class) -> getFunctionClassArity
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId(java.lang.Class) -> getClassId
    java.lang.String getDesc(java.lang.Class) -> getDesc
    java.lang.Class createArrayType(java.lang.Class) -> createArrayType
    java.util.List getParameterizedTypeArguments(java.lang.reflect.Type) -> getParameterizedTypeArguments
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$1 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$1:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.reflect.ParameterizedType invoke(java.lang.reflect.ParameterizedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$2 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$2:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectClassUtilKt$parameterizedTypeArguments$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.sequences.Sequence invoke(java.lang.reflect.ParameterizedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation:
    java.lang.annotation.Annotation annotation -> annotation
    java.util.Collection getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass resolve() -> resolve
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass resolve() -> resolve
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.annotation.Annotation getAnnotation() -> getAnnotation
    void <init>(java.lang.annotation.Annotation) -> <init>
    boolean isIdeExternalAnnotation() -> isIdeExternalAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument$Factory Factory -> Factory
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument$Factory -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument$Factory:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationArgument create(java.lang.Object,kotlin.reflect.jvm.internal.impl.name.Name) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationAsAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationAsAnnotationArgument:
    java.lang.annotation.Annotation annotation -> annotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation getAnnotation() -> getAnnotation
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.annotation.Annotation) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner:
    java.lang.reflect.AnnotatedElement getElement() -> getElement
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner$DefaultImpls:
    java.util.List getAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner) -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner,kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwner) -> isDeprecatedInJavaDoc
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwnerKt -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotationOwnerKt:
    java.util.List getAnnotations(java.lang.annotation.Annotation[]) -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(java.lang.annotation.Annotation[],kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaArrayAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaArrayAnnotationArgument:
    java.lang.Object[] values -> values
    java.util.List getElements() -> getElements
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object[]) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaArrayType -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaArrayType:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType componentType -> componentType
    java.lang.reflect.Type reflectType -> reflectType
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType getComponentType() -> getComponentType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getComponentType() -> getComponentType
    java.lang.reflect.Type getReflectType() -> getReflectType
    void <init>(java.lang.reflect.Type) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass:
    java.lang.Class klass -> klass
    java.lang.Class getElement() -> getElement
    java.lang.reflect.AnnotatedElement getElement() -> getElement
    int getModifiers() -> getModifiers
    java.util.List getInnerClassNames() -> getInnerClassNames
    java.util.Collection getInnerClassNames() -> getInnerClassNames
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass getOuterClass() -> getOuterClass
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getOuterClass() -> getOuterClass
    java.util.Collection getSupertypes() -> getSupertypes
    java.util.List getMethods() -> getMethods
    java.util.Collection getMethods() -> getMethods
    boolean isEnumValuesOrValueOf(java.lang.reflect.Method) -> isEnumValuesOrValueOf
    java.util.List getFields() -> getFields
    java.util.Collection getFields() -> getFields
    java.util.List getConstructors() -> getConstructors
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind getLightClassOriginKind() -> getLightClassOriginKind
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    java.util.List getTypeParameters() -> getTypeParameters
    boolean isInterface() -> isInterface
    boolean isAnnotationType() -> isAnnotationType
    boolean isEnum() -> isEnum
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.Class) -> <init>
    java.util.List getAnnotations() -> getAnnotations
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    boolean isAbstract() -> isAbstract
    boolean isStatic() -> isStatic
    boolean isFinal() -> isFinal
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean access$isEnumValuesOrValueOf(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass,java.lang.reflect.Method) -> access$isEnumValuesOrValueOf
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$1 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$1:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.reflect.Member) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$2 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$2:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$constructors$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaConstructor invoke(java.lang.reflect.Constructor) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$1 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$1:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.reflect.Member) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$2 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$2:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$fields$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaField invoke(java.lang.reflect.Field) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$1 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$1:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.Class) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$2 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$2:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$innerClassNames$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.name.Name invoke(java.lang.Class) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$methods$1 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$methods$1:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.reflect.Method) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$methods$2 -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$methods$2:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass$methods$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaMethod invoke(java.lang.reflect.Method) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClassObjectAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClassObjectAnnotationArgument:
    java.lang.Class klass -> klass
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getReferencedType() -> getReferencedType
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Class) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClassifierType -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClassifierType:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifier classifier -> classifier
    java.lang.reflect.Type reflectType -> reflectType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifier getClassifier() -> getClassifier
    java.lang.String getClassifierQualifiedName() -> getClassifierQualifiedName
    java.lang.String getPresentableText() -> getPresentableText
    boolean isRaw() -> isRaw
    java.util.List getTypeArguments() -> getTypeArguments
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    java.lang.reflect.Type getReflectType() -> getReflectType
    void <init>(java.lang.reflect.Type) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaConstructor -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaConstructor:
    java.lang.reflect.Constructor member -> member
    java.util.List getValueParameters() -> getValueParameters
    java.util.List getTypeParameters() -> getTypeParameters
    java.lang.reflect.Constructor getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    void <init>(java.lang.reflect.Constructor) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaElement -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaElement:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaEnumValueAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaEnumValueAnnotationArgument:
    java.lang.Enum value -> value
    kotlin.reflect.jvm.internal.impl.name.ClassId getEnumClassId() -> getEnumClassId
    kotlin.reflect.jvm.internal.impl.name.Name getEntryName() -> getEntryName
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Enum) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaField -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaField:
    java.lang.reflect.Field member -> member
    boolean isEnumEntry() -> isEnumEntry
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType getType() -> getType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getType() -> getType
    boolean getHasConstantNotNullInitializer() -> getHasConstantNotNullInitializer
    java.lang.reflect.Field getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    void <init>(java.lang.reflect.Field) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaLiteralAnnotationArgument -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaLiteralAnnotationArgument:
    java.lang.Object value -> value
    java.lang.Object getValue() -> getValue
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaMember -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaMember:
    java.lang.reflect.Member getMember() -> getMember
    java.lang.reflect.AnnotatedElement getElement() -> getElement
    int getModifiers() -> getModifiers
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaClass getContainingClass() -> getContainingClass
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getContainingClass() -> getContainingClass
    java.util.List getValueParameters(java.lang.reflect.Type[],java.lang.annotation.Annotation[][],boolean) -> getValueParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>() -> <init>
    java.util.List getAnnotations() -> getAnnotations
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    boolean isAbstract() -> isAbstract
    boolean isStatic() -> isStatic
    boolean isFinal() -> isFinal
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaMethod -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaMethod:
    java.lang.reflect.Method member -> member
    java.util.List getValueParameters() -> getValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument getAnnotationParameterDefaultValue() -> getAnnotationParameterDefaultValue
    java.util.List getTypeParameters() -> getTypeParameters
    java.lang.reflect.Method getMember() -> getMember
    java.lang.reflect.Member getMember() -> getMember
    void <init>(java.lang.reflect.Method) -> <init>
    boolean getHasAnnotationParameterDefaultValue() -> getHasAnnotationParameterDefaultValue
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner:
    int getModifiers() -> getModifiers
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner$DefaultImpls -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner$DefaultImpls:
    boolean isAbstract(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner) -> isAbstract
    boolean isStatic(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner) -> isStatic
    boolean isFinal(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner) -> isFinal
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaModifierListOwner) -> getVisibility
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaPackage -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaPackage:
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    java.util.Collection getClasses(kotlin.jvm.functions.Function1) -> getClasses
    java.util.Collection getSubPackages() -> getSubPackages
    java.util.List getAnnotations() -> getAnnotations
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaPrimitiveType -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaPrimitiveType:
    java.lang.Class reflectType -> reflectType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getType() -> getType
    java.lang.Class getReflectType() -> getReflectType
    java.lang.reflect.Type getReflectType() -> getReflectType
    void <init>(java.lang.Class) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType$Factory Factory -> Factory
    java.lang.reflect.Type getReflectType() -> getReflectType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType$Factory -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType$Factory:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType create(java.lang.reflect.Type) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaTypeParameter -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaTypeParameter:
    java.lang.reflect.TypeVariable typeVariable -> typeVariable
    java.util.List getUpperBounds() -> getUpperBounds
    java.util.Collection getUpperBounds() -> getUpperBounds
    java.lang.reflect.AnnotatedElement getElement() -> getElement
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.lang.reflect.TypeVariable) -> <init>
    java.util.List getAnnotations() -> getAnnotations
    java.util.Collection getAnnotations() -> getAnnotations
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaValueParameter -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaValueParameter:
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType type -> type
    java.lang.annotation.Annotation[] reflectAnnotations -> reflectAnnotations
    java.lang.String reflectName -> reflectName
    boolean isVararg -> isVararg
    java.util.List getAnnotations() -> getAnnotations
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType getType() -> getType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getType() -> getType
    boolean isVararg() -> isVararg
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType,java.lang.annotation.Annotation[],java.lang.String,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaWildcardType -> kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaWildcardType:
    java.lang.reflect.WildcardType reflectType -> reflectType
    kotlin.reflect.jvm.internal.impl.descriptors.runtime.structure.ReflectJavaType getBound() -> getBound
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getBound() -> getBound
    boolean isExtends() -> isExtends
    java.lang.reflect.WildcardType getReflectType() -> getReflectType
    java.lang.reflect.Type getReflectType() -> getReflectType
    void <init>(java.lang.reflect.WildcardType) -> <init>
kotlin.reflect.jvm.internal.impl.incremental.UtilsKt -> kotlin.reflect.jvm.internal.impl.incremental.UtilsKt:
    void record(kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.name.Name) -> record
    void record(kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation,kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.name.Name) -> record
    void recordPackageLookup(kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation,java.lang.String,java.lang.String) -> recordPackageLookup
kotlin.reflect.jvm.internal.impl.incremental.components.LocationInfo -> kotlin.reflect.jvm.internal.impl.incremental.components.LocationInfo:
    java.lang.String getFilePath() -> getFilePath
    kotlin.reflect.jvm.internal.impl.incremental.components.Position getPosition() -> getPosition
kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation -> kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation:
    kotlin.reflect.jvm.internal.impl.incremental.components.LocationInfo getLocation() -> getLocation
kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker -> kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker:
    boolean getRequiresPosition() -> getRequiresPosition
    void record(java.lang.String,kotlin.reflect.jvm.internal.impl.incremental.components.Position,java.lang.String,kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind,java.lang.String) -> record
kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker$DO_NOTHING -> kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker$DO_NOTHING:
    kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker$DO_NOTHING INSTANCE -> INSTANCE
    boolean getRequiresPosition() -> getRequiresPosition
    void record(java.lang.String,kotlin.reflect.jvm.internal.impl.incremental.components.Position,java.lang.String,kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind,java.lang.String) -> record
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation -> kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation:
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_IDE -> FROM_IDE
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_BACKEND -> FROM_BACKEND
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_TEST -> FROM_TEST
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_BUILTINS -> FROM_BUILTINS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_CHECK_DECLARATION_CONFLICTS -> WHEN_CHECK_DECLARATION_CONFLICTS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_CHECK_OVERRIDES -> WHEN_CHECK_OVERRIDES
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FOR_SCRIPT -> FOR_SCRIPT
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_REFLECTION -> FROM_REFLECTION
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_RESOLVE_DECLARATION -> WHEN_RESOLVE_DECLARATION
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_GET_DECLARATION_SCOPE -> WHEN_GET_DECLARATION_SCOPE
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_RESOLVING_DEFAULT_TYPE_ARGUMENTS -> WHEN_RESOLVING_DEFAULT_TYPE_ARGUMENTS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FOR_ALREADY_TRACKED -> FOR_ALREADY_TRACKED
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_GET_ALL_DESCRIPTORS -> WHEN_GET_ALL_DESCRIPTORS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_TYPING -> WHEN_TYPING
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_GET_SUPER_MEMBERS -> WHEN_GET_SUPER_MEMBERS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FOR_NON_TRACKED_SCOPE -> FOR_NON_TRACKED_SCOPE
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_SYNTHETIC_SCOPE -> FROM_SYNTHETIC_SCOPE
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_DESERIALIZATION -> FROM_DESERIALIZATION
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FROM_JAVA_LOADER -> FROM_JAVA_LOADER
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_GET_LOCAL_VARIABLE -> WHEN_GET_LOCAL_VARIABLE
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_FIND_BY_FQNAME -> WHEN_FIND_BY_FQNAME
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation WHEN_GET_COMPANION_OBJECT -> WHEN_GET_COMPANION_OBJECT
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation FOR_DEFAULT_IMPORTS -> FOR_DEFAULT_IMPORTS
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.incremental.components.LocationInfo getLocation() -> getLocation
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation[] values() -> values
    kotlin.reflect.jvm.internal.impl.incremental.components.NoLookupLocation valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.incremental.components.Position -> kotlin.reflect.jvm.internal.impl.incremental.components.Position:
    int line -> line
    int column -> column
    kotlin.reflect.jvm.internal.impl.incremental.components.Position NO_POSITION -> NO_POSITION
    kotlin.reflect.jvm.internal.impl.incremental.components.Position$Companion Companion -> Companion
    void <init>(int,int) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.incremental.components.Position access$getNO_POSITION$cp() -> access$getNO_POSITION$cp
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.incremental.components.Position$Companion -> kotlin.reflect.jvm.internal.impl.incremental.components.Position$Companion:
    kotlin.reflect.jvm.internal.impl.incremental.components.Position getNO_POSITION() -> getNO_POSITION
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind -> kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind:
    kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind PACKAGE -> PACKAGE
    kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind CLASSIFIER -> CLASSIFIER
    kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.incremental.components.ScopeKind valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver -> kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable resolvedNicknames -> resolvedNicknames
    boolean disabled -> disabled
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State jsr305State -> jsr305State
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor computeTypeQualifierNickname(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> computeTypeQualifierNickname
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor resolveTypeQualifierNickname(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> resolveTypeQualifierNickname
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor resolveTypeQualifierAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> resolveTypeQualifierAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.lazy.NullabilityQualifierWithApplicability resolveQualifierBuiltInDefaultAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> resolveQualifierBuiltInDefaultAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$TypeQualifierWithApplicability resolveTypeQualifierDefaultAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> resolveTypeQualifierDefaultAnnotation
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel resolveJsr305AnnotationState(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> resolveJsr305AnnotationState
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel resolveJsr305CustomState(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> resolveJsr305CustomState
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel migrationAnnotationStatus(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> migrationAnnotationStatus
    java.util.List mapConstantToQualifierApplicabilityTypes(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue) -> mapConstantToQualifierApplicabilityTypes
    boolean getDisabled() -> getDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.utils.Jsr305State) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor access$computeTypeQualifierNickname(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> access$computeTypeQualifierNickname
kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType -> kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType:
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType METHOD_RETURN_TYPE -> METHOD_RETURN_TYPE
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType VALUE_PARAMETER -> VALUE_PARAMETER
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType FIELD -> FIELD
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType TYPE_USE -> TYPE_USE
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$TypeQualifierWithApplicability -> kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$TypeQualifierWithApplicability:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor typeQualifier -> typeQualifier
    int applicability -> applicability
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor component1() -> component1
    java.util.List component2() -> component2
    boolean isApplicableTo(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType) -> isApplicableTo
    boolean isApplicableConsideringMask(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType) -> isApplicableConsideringMask
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor,int) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$resolvedNicknames$1 -> kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$resolvedNicknames$1:
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolverKt -> kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolverKt:
    kotlin.reflect.jvm.internal.impl.name.FqName TYPE_QUALIFIER_NICKNAME_FQNAME -> TYPE_QUALIFIER_NICKNAME_FQNAME
    kotlin.reflect.jvm.internal.impl.name.FqName TYPE_QUALIFIER_FQNAME -> TYPE_QUALIFIER_FQNAME
    kotlin.reflect.jvm.internal.impl.name.FqName TYPE_QUALIFIER_DEFAULT_FQNAME -> TYPE_QUALIFIER_DEFAULT_FQNAME
    kotlin.reflect.jvm.internal.impl.name.FqName MIGRATION_ANNOTATION_FQNAME -> MIGRATION_ANNOTATION_FQNAME
    java.util.Map BUILT_IN_TYPE_QUALIFIER_DEFAULT_ANNOTATIONS -> BUILT_IN_TYPE_QUALIFIER_DEFAULT_ANNOTATIONS
    java.util.Set BUILT_IN_TYPE_QUALIFIER_FQ_NAMES -> BUILT_IN_TYPE_QUALIFIER_FQ_NAMES
    kotlin.reflect.jvm.internal.impl.name.FqName getTYPE_QUALIFIER_NICKNAME_FQNAME() -> getTYPE_QUALIFIER_NICKNAME_FQNAME
    kotlin.reflect.jvm.internal.impl.name.FqName getTYPE_QUALIFIER_DEFAULT_FQNAME() -> getTYPE_QUALIFIER_DEFAULT_FQNAME
    kotlin.reflect.jvm.internal.impl.name.FqName getMIGRATION_ANNOTATION_FQNAME() -> getMIGRATION_ANNOTATION_FQNAME
    java.util.Map getBUILT_IN_TYPE_QUALIFIER_DEFAULT_ANNOTATIONS() -> getBUILT_IN_TYPE_QUALIFIER_DEFAULT_ANNOTATIONS
    boolean isAnnotatedWithTypeQualifier(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isAnnotatedWithTypeQualifier
    void <clinit>() -> <clinit>
    boolean access$isAnnotatedWithTypeQualifier$p(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> access$isAnnotatedWithTypeQualifier$p
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName:
    kotlin.reflect.jvm.internal.impl.load.java.NameAndSignature REMOVE_AT_NAME_AND_SIGNATURE -> REMOVE_AT_NAME_AND_SIGNATURE
    java.util.Map NAME_AND_SIGNATURE_TO_JVM_REPRESENTATION_NAME_MAP -> NAME_AND_SIGNATURE_TO_JVM_REPRESENTATION_NAME_MAP
    java.util.Map SIGNATURE_TO_JVM_REPRESENTATION_NAME -> SIGNATURE_TO_JVM_REPRESENTATION_NAME
    java.util.List ORIGINAL_SHORT_NAMES -> ORIGINAL_SHORT_NAMES
    java.util.Map JVM_SHORT_NAME_TO_BUILTIN_SHORT_NAMES_MAP -> JVM_SHORT_NAME_TO_BUILTIN_SHORT_NAMES_MAP
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName INSTANCE -> INSTANCE
    java.util.List getORIGINAL_SHORT_NAMES() -> getORIGINAL_SHORT_NAMES
    boolean getSameAsRenamedInJvmBuiltin(kotlin.reflect.jvm.internal.impl.name.Name) -> getSameAsRenamedInJvmBuiltin
    kotlin.reflect.jvm.internal.impl.name.Name getJvmName(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> getJvmName
    boolean isBuiltinFunctionWithDifferentNameInJvm(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isBuiltinFunctionWithDifferentNameInJvm
    java.util.List getBuiltinFunctionNamesByJvmName(kotlin.reflect.jvm.internal.impl.name.Name) -> getBuiltinFunctionNamesByJvmName
    boolean isRemoveAtByIndex(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isRemoveAtByIndex
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.util.Map access$getSIGNATURE_TO_JVM_REPRESENTATION_NAME$p(kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName) -> access$getSIGNATURE_TO_JVM_REPRESENTATION_NAME$p
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName$isBuiltinFunctionWithDifferentNameInJvm$1 -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithDifferentJvmName$isBuiltinFunctionWithDifferentNameInJvm$1:
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor $functionDescriptor -> $functionDescriptor
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature:
    java.util.List ERASED_COLLECTION_PARAMETER_NAME_AND_SIGNATURES -> ERASED_COLLECTION_PARAMETER_NAME_AND_SIGNATURES
    java.util.List ERASED_COLLECTION_PARAMETER_SIGNATURES -> ERASED_COLLECTION_PARAMETER_SIGNATURES
    java.util.List ERASED_COLLECTION_PARAMETER_NAMES -> ERASED_COLLECTION_PARAMETER_NAMES
    java.util.Map GENERIC_PARAMETERS_METHODS_TO_DEFAULT_VALUES_MAP -> GENERIC_PARAMETERS_METHODS_TO_DEFAULT_VALUES_MAP
    java.util.Map SIGNATURE_TO_DEFAULT_VALUES_MAP -> SIGNATURE_TO_DEFAULT_VALUES_MAP
    java.util.Set ERASED_VALUE_PARAMETERS_SHORT_NAMES -> ERASED_VALUE_PARAMETERS_SHORT_NAMES
    java.util.Set ERASED_VALUE_PARAMETERS_SIGNATURES -> ERASED_VALUE_PARAMETERS_SIGNATURES
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature INSTANCE -> INSTANCE
    boolean getHasErasedValueParametersInJava(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getHasErasedValueParametersInJava
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOverriddenBuiltinFunctionWithErasedValueParametersInJava(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> getOverriddenBuiltinFunctionWithErasedValueParametersInJava
    boolean getSameAsBuiltinMethodWithErasedValueParameters(kotlin.reflect.jvm.internal.impl.name.Name) -> getSameAsBuiltinMethodWithErasedValueParameters
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo getSpecialSignatureInfo(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getSpecialSignatureInfo
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean access$getHasErasedValueParametersInJava$p(kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> access$getHasErasedValueParametersInJava$p
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo:
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo ONE_COLLECTION_PARAMETER -> ONE_COLLECTION_PARAMETER
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo OBJECT_PARAMETER_NON_GENERIC -> OBJECT_PARAMETER_NON_GENERIC
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo OBJECT_PARAMETER_GENERIC -> OBJECT_PARAMETER_GENERIC
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo[] $VALUES -> $VALUES
    java.lang.String valueParametersSignature -> valueParametersSignature
    boolean isObjectReplacedWithTypeParameter -> isObjectReplacedWithTypeParameter
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$SpecialSignatureInfo valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription:
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription NULL -> NULL
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription INDEX -> INDEX
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription FALSE -> FALSE
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription MAP_GET_OR_DEFAULT -> MAP_GET_OR_DEFAULT
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription[] $VALUES -> $VALUES
    java.lang.Object defaultValue -> defaultValue
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.Object) -> <init>
    void <init>(java.lang.String,int,java.lang.Object,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription$MAP_GET_OR_DEFAULT -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$TypeSafeBarrierDescription$MAP_GET_OR_DEFAULT:
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getOverriddenBuiltinFunctionWithErasedValueParametersInJava$1 -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getOverriddenBuiltinFunctionWithErasedValueParametersInJava$1:
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getOverriddenBuiltinFunctionWithErasedValueParametersInJava$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getSpecialSignatureInfo$builtinSignature$1 -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getSpecialSignatureInfo$builtinSignature$1:
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinMethodsWithSpecialGenericSignature$getSpecialSignatureInfo$builtinSignature$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties:
    java.util.Map PROPERTY_FQ_NAME_TO_JVM_GETTER_NAME_MAP -> PROPERTY_FQ_NAME_TO_JVM_GETTER_NAME_MAP
    java.util.Map GETTER_JVM_NAME_TO_PROPERTIES_SHORT_NAME_MAP -> GETTER_JVM_NAME_TO_PROPERTIES_SHORT_NAME_MAP
    java.util.Set SPECIAL_FQ_NAMES -> SPECIAL_FQ_NAMES
    java.util.Set SPECIAL_SHORT_NAMES -> SPECIAL_SHORT_NAMES
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties INSTANCE -> INSTANCE
    java.util.Set getSPECIAL_SHORT_NAMES$descriptors_jvm() -> getSPECIAL_SHORT_NAMES$descriptors_jvm
    boolean hasBuiltinSpecialPropertyFqName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> hasBuiltinSpecialPropertyFqName
    boolean hasBuiltinSpecialPropertyFqNameImpl(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> hasBuiltinSpecialPropertyFqNameImpl
    java.util.List getPropertyNameCandidatesBySpecialGetterName(kotlin.reflect.jvm.internal.impl.name.Name) -> getPropertyNameCandidatesBySpecialGetterName
    java.lang.String getBuiltinSpecialPropertyGetterName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getBuiltinSpecialPropertyGetterName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties$getBuiltinSpecialPropertyGetterName$descriptor$1 -> kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties$getBuiltinSpecialPropertyGetterName$descriptor$1:
    kotlin.reflect.jvm.internal.impl.load.java.BuiltinSpecialProperties$getBuiltinSpecialPropertyGetterName$descriptor$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.Constant -> kotlin.reflect.jvm.internal.impl.load.java.Constant:
    java.lang.Object value -> value
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.DeprecationCausedByFunctionN -> kotlin.reflect.jvm.internal.impl.load.java.DeprecationCausedByFunctionN:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor target -> target
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.EnumEntry -> kotlin.reflect.jvm.internal.impl.load.java.EnumEntry:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor descriptor -> descriptor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition -> kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition:
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isOverridable
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract getContract() -> getContract
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition$isOverridable$signatureTypes$1 -> kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition$isOverridable$signatureTypes$1:
    kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition$isOverridable$signatureTypes$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.FakePureImplementationsProvider -> kotlin.reflect.jvm.internal.impl.load.java.FakePureImplementationsProvider:
    java.util.HashMap pureImplementations -> pureImplementations
    kotlin.reflect.jvm.internal.impl.load.java.FakePureImplementationsProvider INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.name.FqName getPurelyImplementedInterface(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPurelyImplementedInterface
    void implementedWith(kotlin.reflect.jvm.internal.impl.name.FqName,java.util.List) -> implementedWith
    java.util.List fqNameListOf(java.lang.String[]) -> fqNameListOf
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition -> kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition:
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isOverridable
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract getContract() -> getContract
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder -> kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass findClass(kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder$Request) -> findClass
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage findPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> findPackage
    java.util.Set knownClassNamesInPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> knownClassNamesInPackage
kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder$Request -> kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder$Request:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    byte[] previouslyFoundClassFileContent -> previouslyFoundClassFileContent
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass outerClass -> outerClass
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,byte[],kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,byte[],kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker -> kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker:
    void reportClass(kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassDescriptor) -> reportClass
kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker$Default -> kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker$Default:
    kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker$Default INSTANCE -> INSTANCE
    void reportClass(kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassDescriptor) -> reportClass
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.JavaDefaultValue -> kotlin.reflect.jvm.internal.impl.load.java.JavaDefaultValue:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition -> kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition:
    kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isOverridable
    boolean isIncompatibleInAccordanceWithBuiltInOverridabilityRules(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isIncompatibleInAccordanceWithBuiltInOverridabilityRules
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract getContract() -> getContract
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition$Companion -> kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition$Companion:
    boolean doesJavaOverrideHaveIncompatibleValueParameterKinds(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> doesJavaOverrideHaveIncompatibleValueParameterKinds
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType mapValueParameterType(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> mapValueParameterType
    boolean isPrimitiveCompareTo(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isPrimitiveCompareTo
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities -> kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities:
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PACKAGE_VISIBILITY -> PACKAGE_VISIBILITY
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PROTECTED_STATIC_VISIBILITY -> PROTECTED_STATIC_VISIBILITY
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility PROTECTED_AND_PACKAGE -> PROTECTED_AND_PACKAGE
    boolean isVisibleForProtectedAndPackage(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisibleForProtectedAndPackage
    boolean areInSamePackage(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> areInSamePackage
    boolean access$000(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> access$000
    boolean access$100(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> access$100
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$1 -> kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$1:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    java.lang.Integer compareTo(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compareTo
    java.lang.String getInternalDisplayName() -> getInternalDisplayName
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalize() -> normalize
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$2 -> kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$2:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    java.lang.String getInternalDisplayName() -> getInternalDisplayName
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalize() -> normalize
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$3 -> kotlin.reflect.jvm.internal.impl.load.java.JavaVisibilities$3:
    void <init>(java.lang.String,boolean) -> <init>
    boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isVisible
    java.lang.Integer compareTo(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> compareTo
    java.lang.String getInternalDisplayName() -> getInternalDisplayName
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalize() -> normalize
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.JvmAbi -> kotlin.reflect.jvm.internal.impl.load.java.JvmAbi:
    kotlin.reflect.jvm.internal.impl.name.FqName JVM_FIELD_ANNOTATION_FQ_NAME -> JVM_FIELD_ANNOTATION_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.ClassId REFLECTION_FACTORY_IMPL -> REFLECTION_FACTORY_IMPL
    boolean isGetterName(java.lang.String) -> isGetterName
    boolean isSetterName(java.lang.String) -> isSetterName
    java.lang.String getterName(java.lang.String) -> getterName
    java.lang.String setterName(java.lang.String) -> setterName
    boolean startsWithIsPrefix(java.lang.String) -> startsWithIsPrefix
    boolean isPropertyWithBackingFieldInOuterClass(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> isPropertyWithBackingFieldInOuterClass
    boolean isClassCompanionObjectWithBackingFieldsInOuter(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isClassCompanionObjectWithBackingFieldsInOuter
    boolean isMappedIntrinsicCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isMappedIntrinsicCompanionObject
    boolean hasJvmFieldAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> hasJvmFieldAnnotation
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.JvmAnnotationNames -> kotlin.reflect.jvm.internal.impl.load.java.JvmAnnotationNames:
    kotlin.reflect.jvm.internal.impl.name.FqName METADATA_FQ_NAME -> METADATA_FQ_NAME
    java.lang.String METADATA_DESC -> METADATA_DESC
    kotlin.reflect.jvm.internal.impl.name.Name DEFAULT_ANNOTATION_MEMBER_NAME -> DEFAULT_ANNOTATION_MEMBER_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JETBRAINS_NOT_NULL_ANNOTATION -> JETBRAINS_NOT_NULL_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName JETBRAINS_NULLABLE_ANNOTATION -> JETBRAINS_NULLABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName JETBRAINS_MUTABLE_ANNOTATION -> JETBRAINS_MUTABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName JETBRAINS_READONLY_ANNOTATION -> JETBRAINS_READONLY_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName READONLY_ANNOTATION -> READONLY_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName MUTABLE_ANNOTATION -> MUTABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName PURELY_IMPLEMENTS_ANNOTATION -> PURELY_IMPLEMENTS_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName ENHANCED_NULLABILITY_ANNOTATION -> ENHANCED_NULLABILITY_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName ENHANCED_MUTABILITY_ANNOTATION -> ENHANCED_MUTABILITY_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName PARAMETER_NAME_FQ_NAME -> PARAMETER_NAME_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName DEFAULT_VALUE_FQ_NAME -> DEFAULT_VALUE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName DEFAULT_NULL_FQ_NAME -> DEFAULT_NULL_FQ_NAME
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.JvmAnnotationNamesKt -> kotlin.reflect.jvm.internal.impl.load.java.JvmAnnotationNamesKt:
    java.util.List NULLABLE_ANNOTATIONS -> NULLABLE_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.name.FqName JAVAX_NONNULL_ANNOTATION -> JAVAX_NONNULL_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName JAVAX_CHECKFORNULL_ANNOTATION -> JAVAX_CHECKFORNULL_ANNOTATION
    java.util.List NOT_NULL_ANNOTATIONS -> NOT_NULL_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.name.FqName COMPATQUAL_NULLABLE_ANNOTATION -> COMPATQUAL_NULLABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName COMPATQUAL_NONNULL_ANNOTATION -> COMPATQUAL_NONNULL_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName ANDROIDX_RECENTLY_NULLABLE_ANNOTATION -> ANDROIDX_RECENTLY_NULLABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName ANDROIDX_RECENTLY_NON_NULL_ANNOTATION -> ANDROIDX_RECENTLY_NON_NULL_ANNOTATION
    java.util.Set NULLABILITY_ANNOTATIONS -> NULLABILITY_ANNOTATIONS
    java.util.List READ_ONLY_ANNOTATIONS -> READ_ONLY_ANNOTATIONS
    java.util.List MUTABLE_ANNOTATIONS -> MUTABLE_ANNOTATIONS
    java.util.List getNULLABLE_ANNOTATIONS() -> getNULLABLE_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.name.FqName getJAVAX_NONNULL_ANNOTATION() -> getJAVAX_NONNULL_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName getJAVAX_CHECKFORNULL_ANNOTATION() -> getJAVAX_CHECKFORNULL_ANNOTATION
    java.util.List getNOT_NULL_ANNOTATIONS() -> getNOT_NULL_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.name.FqName getCOMPATQUAL_NULLABLE_ANNOTATION() -> getCOMPATQUAL_NULLABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName getCOMPATQUAL_NONNULL_ANNOTATION() -> getCOMPATQUAL_NONNULL_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName getANDROIDX_RECENTLY_NULLABLE_ANNOTATION() -> getANDROIDX_RECENTLY_NULLABLE_ANNOTATION
    kotlin.reflect.jvm.internal.impl.name.FqName getANDROIDX_RECENTLY_NON_NULL_ANNOTATION() -> getANDROIDX_RECENTLY_NON_NULL_ANNOTATION
    java.util.List getREAD_ONLY_ANNOTATIONS() -> getREAD_ONLY_ANNOTATIONS
    java.util.List getMUTABLE_ANNOTATIONS() -> getMUTABLE_ANNOTATIONS
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.NameAndSignature -> kotlin.reflect.jvm.internal.impl.load.java.NameAndSignature:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    java.lang.String signature -> signature
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.PropertiesConventionUtilKt -> kotlin.reflect.jvm.internal.impl.load.java.PropertiesConventionUtilKt:
    kotlin.reflect.jvm.internal.impl.name.Name propertyNameByGetMethodName(kotlin.reflect.jvm.internal.impl.name.Name) -> propertyNameByGetMethodName
    kotlin.reflect.jvm.internal.impl.name.Name propertyNameBySetMethodName(kotlin.reflect.jvm.internal.impl.name.Name,boolean) -> propertyNameBySetMethodName
    java.util.List propertyNamesBySetMethodName(kotlin.reflect.jvm.internal.impl.name.Name) -> propertyNamesBySetMethodName
    kotlin.reflect.jvm.internal.impl.name.Name propertyNameFromAccessorMethodName(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String,boolean,java.lang.String) -> propertyNameFromAccessorMethodName
    kotlin.reflect.jvm.internal.impl.name.Name propertyNameFromAccessorMethodName$default(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String,boolean,java.lang.String,int,java.lang.Object) -> propertyNameFromAccessorMethodName$default
    java.util.List getPropertyNamesCandidatesByAccessorName(kotlin.reflect.jvm.internal.impl.name.Name) -> getPropertyNamesCandidatesByAccessorName
kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers -> kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers:
    kotlin.reflect.jvm.internal.impl.name.FqName child(kotlin.reflect.jvm.internal.impl.name.FqName,java.lang.String) -> child
    kotlin.reflect.jvm.internal.impl.name.FqName childSafe(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe,java.lang.String) -> childSafe
    kotlin.reflect.jvm.internal.impl.load.java.NameAndSignature method(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> method
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOverriddenBuiltinWithDifferentJvmName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getOverriddenBuiltinWithDifferentJvmName
    boolean doesOverrideBuiltinWithDifferentJvmName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> doesOverrideBuiltinWithDifferentJvmName
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOverriddenSpecialBuiltin(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getOverriddenSpecialBuiltin
    java.lang.String getJvmMethodNameIfSpecial(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getJvmMethodNameIfSpecial
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOverriddenBuiltinThatAffectsJvmName(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getOverriddenBuiltinThatAffectsJvmName
    boolean hasRealKotlinSuperClassWithOverrideOf(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> hasRealKotlinSuperClassWithOverrideOf
    boolean isFromJava(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> isFromJava
    boolean isFromJavaOrBuiltins(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> isFromJavaOrBuiltins
    kotlin.reflect.jvm.internal.impl.name.FqName access$childSafe(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe,java.lang.String) -> access$childSafe
    kotlin.reflect.jvm.internal.impl.name.FqName access$child(kotlin.reflect.jvm.internal.impl.name.FqName,java.lang.String) -> access$child
    kotlin.reflect.jvm.internal.impl.load.java.NameAndSignature access$method(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> access$method
kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$1 -> kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$1:
    kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$2 -> kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$2:
    kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenBuiltinWithDifferentJvmName$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenSpecialBuiltin$2 -> kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenSpecialBuiltin$2:
    kotlin.reflect.jvm.internal.impl.load.java.SpecialBuiltinMembers$getOverriddenSpecialBuiltin$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.UtilsKt -> kotlin.reflect.jvm.internal.impl.load.java.UtilsKt:
    kotlin.reflect.jvm.internal.impl.load.java.JavaDefaultValue lexicalCastFrom(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.lang.String) -> lexicalCastFrom
kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils -> kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils:
    java.util.Collection resolveOverridesForNonStaticMembers(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil) -> resolveOverridesForNonStaticMembers
    java.util.Collection resolveOverridesForStaticMembers(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil) -> resolveOverridesForStaticMembers
    java.util.Collection resolveOverrides(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil,boolean) -> resolveOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor getAnnotationParameterByName(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getAnnotationParameterByName
    boolean isObjectMethodInInterface(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMember) -> isObjectMethodInInterface
    boolean isObjectMethod(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod) -> isObjectMethod
    boolean isMethodWithOneObjectParameter(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod) -> isMethodWithOneObjectParameter
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1 -> kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter val$errorReporter -> val$errorReporter
    java.util.Set val$result -> val$result
    boolean val$isStaticContext -> val$isStaticContext
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,java.util.Set,boolean) -> <init>
    void addFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> addFakeOverride
    void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> conflict
    void setOverriddenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.Collection) -> setOverriddenDescriptors
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1$1 -> kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1$1:
    kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1 this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.DescriptorResolverUtils$1) -> <init>
    kotlin.Unit invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement source -> source
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue type$delegate -> type$delegate
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument firstArgument -> firstArgument
    boolean isIdeExternalAnnotation -> isIdeExternalAnnotation
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument getFirstArgument() -> getFirstArgument
    java.util.Map getAllValueArguments() -> getAllValueArguments
    boolean isIdeExternalAnnotation() -> isIdeExternalAnnotation
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor$type$2 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor$type$2:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $c -> $c
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationMapper -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationMapper:
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_TARGET_FQ_NAME -> JAVA_TARGET_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_RETENTION_FQ_NAME -> JAVA_RETENTION_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_DEPRECATED_FQ_NAME -> JAVA_DEPRECATED_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_DOCUMENTED_FQ_NAME -> JAVA_DOCUMENTED_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_REPEATABLE_FQ_NAME -> JAVA_REPEATABLE_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.Name DEPRECATED_ANNOTATION_MESSAGE -> DEPRECATED_ANNOTATION_MESSAGE
    kotlin.reflect.jvm.internal.impl.name.Name TARGET_ANNOTATION_ALLOWED_TARGETS -> TARGET_ANNOTATION_ALLOWED_TARGETS
    kotlin.reflect.jvm.internal.impl.name.Name RETENTION_ANNOTATION_VALUE -> RETENTION_ANNOTATION_VALUE
    java.util.Map kotlinToJavaNameMap -> kotlinToJavaNameMap
    java.util.Map javaToKotlinNameMap -> javaToKotlinNameMap
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationMapper INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.name.Name getDEPRECATED_ANNOTATION_MESSAGE$descriptors_jvm() -> getDEPRECATED_ANNOTATION_MESSAGE$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.name.Name getTARGET_ANNOTATION_ALLOWED_TARGETS$descriptors_jvm() -> getTARGET_ANNOTATION_ALLOWED_TARGETS$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.name.Name getRETENTION_ANNOTATION_VALUE$descriptors_jvm() -> getRETENTION_ANNOTATION_VALUE$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor mapOrResolveJavaAnnotation(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> mapOrResolveJavaAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findMappedJavaAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> findMappedJavaAnnotation
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper:
    java.util.Map targetNameLists -> targetNameLists
    java.util.Map retentionNameList -> retentionNameList
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper INSTANCE -> INSTANCE
    java.util.Set mapJavaTargetArgumentByName(java.lang.String) -> mapJavaTargetArgumentByName
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue mapJavaTargetArguments$descriptors_jvm(java.util.List) -> mapJavaTargetArguments$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue mapJavaRetentionArgument$descriptors_jvm(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument) -> mapJavaRetentionArgument$descriptors_jvm
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper$mapJavaTargetArguments$1 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper$mapJavaTargetArguments$1:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaAnnotationTargetMapper$mapJavaTargetArguments$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaDeprecatedAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaDeprecatedAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allValueArguments$delegate -> allValueArguments$delegate
    void <clinit>() -> <clinit>
    java.util.Map getAllValueArguments() -> getAllValueArguments
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaDeprecatedAnnotationDescriptor$allValueArguments$2 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaDeprecatedAnnotationDescriptor$allValueArguments$2:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaDeprecatedAnnotationDescriptor$allValueArguments$2 INSTANCE -> INSTANCE
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue getInitializerConstant(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> getInitializerConstant
kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator$DoNothing -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator$DoNothing:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator$DoNothing INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue getInitializerConstant(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> getInitializerConstant
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassResolvedFromSource(kotlin.reflect.jvm.internal.impl.name.FqName) -> getClassResolvedFromSource
    void recordMethod(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> recordMethod
    void recordConstructor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor) -> recordConstructor
    void recordField(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> recordField
    void recordClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> recordClass
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache$1 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassResolvedFromSource(kotlin.reflect.jvm.internal.impl.name.FqName) -> getClassResolvedFromSource
    void recordMethod(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> recordMethod
    void recordConstructor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor) -> recordConstructor
    void recordField(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> recordField
    void recordClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> recordClass
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allValueArguments$delegate -> allValueArguments$delegate
    void <clinit>() -> <clinit>
    java.util.Map getAllValueArguments() -> getAllValueArguments
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor$allValueArguments$2 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor$allValueArguments$2:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.JavaRetentionAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allValueArguments$delegate -> allValueArguments$delegate
    void <clinit>() -> <clinit>
    java.util.Map getAllValueArguments() -> getAllValueArguments
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor$allValueArguments$2 -> kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor$allValueArguments$2:
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.JavaTargetAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver -> kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver:
kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver$Empty -> kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver$Empty:
    kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver$Empty INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator -> kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator:
    kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator DO_NOTHING -> DO_NOTHING
    kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$PropagatedSignature resolvePropagatedSignature(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List) -> resolvePropagatedSignature
    void reportSignatureErrors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.List) -> reportSignatureErrors
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$1 -> kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$PropagatedSignature resolvePropagatedSignature(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List) -> resolvePropagatedSignature
    void reportSignatureErrors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.List) -> reportSignatureErrors
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$PropagatedSignature -> kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator$PropagatedSignature:
    kotlin.reflect.jvm.internal.impl.types.KotlinType returnType -> returnType
    kotlin.reflect.jvm.internal.impl.types.KotlinType receiverType -> receiverType
    java.util.List valueParameters -> valueParameters
    java.util.List typeParameters -> typeParameters
    java.util.List signatureErrors -> signatureErrors
    boolean hasStableParameterNames -> hasStableParameterNames
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List,java.util.List,boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReceiverType() -> getReceiverType
    java.util.List getValueParameters() -> getValueParameters
    java.util.List getTypeParameters() -> getTypeParameters
    boolean hasStableParameterNames() -> hasStableParameterNames
    java.util.List getErrors() -> getErrors
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage -> kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage:
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage SUPERTYPE -> SUPERTYPE
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage COMMON -> COMMON
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.AnnotationDefaultValue -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.AnnotationDefaultValue:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor:
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor:
    java.lang.Boolean hasStableParameterNames -> hasStableParameterNames
    java.lang.Boolean hasSynthesizedParameterNames -> hasSynthesizedParameterNames
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor createJavaConstructor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createJavaConstructor
    boolean hasStableParameterNames() -> hasStableParameterNames
    void setHasStableParameterNames(boolean) -> setHasStableParameterNames
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    void setHasSynthesizedParameterNames(boolean) -> setHasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor createDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createDescriptor
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassDescriptor:
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaForKotlinOverridePropertyDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaForKotlinOverridePropertyDescriptor:
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey ORIGINAL_VALUE_PARAMETER_FOR_EXTENSION_RECEIVER -> ORIGINAL_VALUE_PARAMETER_FOR_EXTENSION_RECEIVER
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus parameterNamesStatus -> parameterNamesStatus
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor createJavaMethod(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createJavaMethod
    kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.util.Map) -> initialize
    boolean hasStableParameterNames() -> hasStableParameterNames
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    void setParameterNamesStatus(boolean,boolean) -> setParameterNamesStatus
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$1 -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$1:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus:
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus NON_STABLE_DECLARED -> NON_STABLE_DECLARED
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus STABLE_DECLARED -> STABLE_DECLARED
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus NON_STABLE_SYNTHESIZED -> NON_STABLE_SYNTHESIZED
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus STABLE_SYNTHESIZED -> STABLE_SYNTHESIZED
    boolean isStable -> isStable
    boolean isSynthesized -> isSynthesized
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean,boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor$ParameterNamesStatus get(boolean,boolean) -> get
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor:
    boolean isStaticFinal -> isStaticFinal
    kotlin.Pair singleUserData -> singleUserData
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean,kotlin.Pair) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor create(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,boolean) -> create
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    boolean hasSynthesizedParameterNames() -> hasSynthesizedParameterNames
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaCallableMemberDescriptor enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Pair) -> enhance
    boolean isConst() -> isConst
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.java.descriptors.NullDefaultValue -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.NullDefaultValue:
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.NullDefaultValue INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.PossiblyExternalAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.PossiblyExternalAnnotationDescriptor:
    boolean isIdeExternalAnnotation() -> isIdeExternalAnnotation
kotlin.reflect.jvm.internal.impl.load.java.descriptors.StringDefaultValue -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.StringDefaultValue:
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.descriptors.UtilKt -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.UtilKt:
    java.util.List copyValueParameters(java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> copyValueParameters
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope getParentJavaStaticClassScope(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getParentJavaStaticClassScope
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.AnnotationDefaultValue getDefaultValueFromAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> getDefaultValueFromAnnotation
kotlin.reflect.jvm.internal.impl.load.java.descriptors.ValueParameterData -> kotlin.reflect.jvm.internal.impl.load.java.descriptors.ValueParameterData:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    boolean hasDefaultValue -> hasDefaultValue
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    boolean getHasDefaultValue() -> getHasDefaultValue
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt -> kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext child(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver) -> child
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType computeNewDefaultTypeQualifiers(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> computeNewDefaultTypeQualifiers
    kotlin.reflect.jvm.internal.impl.load.java.lazy.NullabilityQualifierWithApplicability extractDefaultNullabilityQualifier(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> extractDefaultNullabilityQualifier
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext replaceComponents(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents) -> replaceComponents
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext child(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int,kotlin.Lazy) -> child
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext childForMethod(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int) -> childForMethod
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext childForMethod$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int,int,java.lang.Object) -> childForMethod$default
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext childForClassOrPackage(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int) -> childForClassOrPackage
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext childForClassOrPackage$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int,int,java.lang.Object) -> childForClassOrPackage$default
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext copyWithNewDefaultTypeQualifiers(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> copyWithNewDefaultTypeQualifiers
kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt$childForClassOrPackage$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt$childForClassOrPackage$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $this_childForClassOrPackage -> $this_childForClassOrPackage
    kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor $containingDeclaration -> $containingDeclaration
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.ClassOrPackageFragmentDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt$copyWithNewDefaultTypeQualifiers$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.ContextKt$copyWithNewDefaultTypeQualifiers$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $this_copyWithNewDefaultTypeQualifiers -> $this_copyWithNewDefaultTypeQualifiers
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations $additionalAnnotations -> $additionalAnnotations
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents -> kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents:
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder finder -> finder
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder kotlinClassFinder -> kotlinClassFinder
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver deserializedDescriptorResolver -> deserializedDescriptorResolver
    kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator signaturePropagator -> signaturePropagator
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter errorReporter -> errorReporter
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache javaResolverCache -> javaResolverCache
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator javaPropertyInitializerEvaluator -> javaPropertyInitializerEvaluator
    kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver samConversionResolver -> samConversionResolver
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElementFactory sourceElementFactory -> sourceElementFactory
    kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver moduleClassResolver -> moduleClassResolver
    kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider packagePartProvider -> packagePartProvider
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker supertypeLoopChecker -> supertypeLoopChecker
    kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker lookupTracker -> lookupTracker
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes reflectionTypes -> reflectionTypes
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver annotationTypeQualifierResolver -> annotationTypeQualifierResolver
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement signatureEnhancement -> signatureEnhancement
    kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker javaClassesTracker -> javaClassesTracker
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings settings -> settings
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker kotlinTypeChecker -> kotlinTypeChecker
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents replace(kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache) -> replace
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder getFinder() -> getFinder
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder getKotlinClassFinder() -> getKotlinClassFinder
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver getDeserializedDescriptorResolver() -> getDeserializedDescriptorResolver
    kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator getSignaturePropagator() -> getSignaturePropagator
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter getErrorReporter() -> getErrorReporter
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache getJavaResolverCache() -> getJavaResolverCache
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator getJavaPropertyInitializerEvaluator() -> getJavaPropertyInitializerEvaluator
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElementFactory getSourceElementFactory() -> getSourceElementFactory
    kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver getModuleClassResolver() -> getModuleClassResolver
    kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider getPackagePartProvider() -> getPackagePartProvider
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker getLookupTracker() -> getLookupTracker
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule() -> getModule
    kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes getReflectionTypes() -> getReflectionTypes
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver getAnnotationTypeQualifierResolver() -> getAnnotationTypeQualifierResolver
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement getSignatureEnhancement() -> getSignatureEnhancement
    kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker getJavaClassesTracker() -> getJavaClassesTracker
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings getSettings() -> getSettings
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker getKotlinTypeChecker() -> getKotlinTypeChecker
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.load.java.JavaClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver,kotlin.reflect.jvm.internal.impl.load.java.components.SignaturePropagator,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache,kotlin.reflect.jvm.internal.impl.load.java.components.JavaPropertyInitializerEvaluator,kotlin.reflect.jvm.internal.impl.load.java.components.SamConversionResolver,kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElementFactory,kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver,kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider,kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker,kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.builtins.ReflectionTypes,kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement,kotlin.reflect.jvm.internal.impl.load.java.JavaClassesTracker,kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings,kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings -> kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Companion Companion -> Companion
    boolean isReleaseCoroutines() -> isReleaseCoroutines
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Companion -> kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Companion:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Companion $$INSTANCE -> $$INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Default -> kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Default:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverSettings$Default INSTANCE -> INSTANCE
    boolean isReleaseCoroutines() -> isReleaseCoroutines
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType -> kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType:
    java.util.EnumMap nullabilityQualifiers -> nullabilityQualifiers
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers get(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType) -> get
    java.util.EnumMap getNullabilityQualifiers() -> getNullabilityQualifiers
    void <init>(java.util.EnumMap) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable annotationDescriptors -> annotationDescriptors
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner annotationOwner -> annotationOwner
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    java.util.Iterator iterator() -> iterator
    boolean isEmpty() -> isEmpty
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner) -> <init>
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations) -> access$getC$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations$annotationDescriptors$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations$annotationDescriptors$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotationsKt -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotationsKt:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations resolveAnnotations(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner) -> resolveAnnotations
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues packageFragments -> packageFragments
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment getPackageFragment(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragment
    java.util.List getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragments
    java.util.List getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider) -> access$getC$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider$getPackageFragment$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider$getPackageFragment$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage $jPackage -> $jPackage
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy defaultTypeQualifiers$delegate -> defaultTypeQualifiers$delegate
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver typeResolver -> typeResolver
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents components -> components
    kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver typeParameterResolver -> typeParameterResolver
    kotlin.Lazy delegateForDefaultTypeQualifiers -> delegateForDefaultTypeQualifiers
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaTypeQualifiersByElementType getDefaultTypeQualifiers() -> getDefaultTypeQualifiers
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver getTypeResolver() -> getTypeResolver
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule() -> getModule
    kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents getComponents() -> getComponents
    kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver getTypeParameterResolver() -> getTypeParameterResolver
    kotlin.Lazy getDelegateForDefaultTypeQualifiers$descriptors_jvm() -> getDelegateForDefaultTypeQualifiers$descriptors_jvm
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.JavaResolverComponents,kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver,kotlin.Lazy) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver:
    java.util.Map typeParameters -> typeParameters
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable resolve -> resolve
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    int typeParametersIndexOffset -> typeParametersIndexOffset
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor resolveTypeParameter(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter) -> resolveTypeParameter
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner,int) -> <init>
    java.util.Map access$getTypeParameters$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver) -> access$getTypeParameters$p
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver) -> access$getC$p
    int access$getTypeParametersIndexOffset$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver) -> access$getTypeParametersIndexOffset$p
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor access$getContainingDeclaration$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver) -> access$getContainingDeclaration$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver$resolve$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver$resolve$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaTypeParameterDescriptor invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaTypeParameterResolver) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver -> kotlin.reflect.jvm.internal.impl.load.java.lazy.ModuleClassResolver:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> resolveClass
kotlin.reflect.jvm.internal.impl.load.java.lazy.NullabilityQualifierWithApplicability -> kotlin.reflect.jvm.internal.impl.load.java.lazy.NullabilityQualifierWithApplicability:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus nullabilityQualifier -> nullabilityQualifier
    java.util.Collection qualifierApplicabilityTypes -> qualifierApplicabilityTypes
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus,java.util.Collection) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus component1() -> component1
    java.util.Collection component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.lazy.SingleModuleClassResolver -> kotlin.reflect.jvm.internal.impl.load.java.lazy.SingleModuleClassResolver:
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JavaDescriptorResolver resolver -> resolver
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> resolveClass
    void setResolver(kotlin.reflect.jvm.internal.impl.resolve.jvm.JavaDescriptorResolver) -> setResolver
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver -> kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor resolveTypeParameter(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter) -> resolveTypeParameter
kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver$EMPTY -> kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver$EMPTY:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver$EMPTY INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor resolveTypeParameter(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter) -> resolveTypeParameter
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex:
    kotlin.jvm.functions.Function1 methodFilter -> methodFilter
    java.util.Map methods -> methods
    java.util.Map fields -> fields
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass jClass -> jClass
    kotlin.jvm.functions.Function1 memberFilter -> memberFilter
    java.util.Collection findMethodsByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findMethodsByName
    java.util.Set getMethodNames() -> getMethodNames
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField findFieldByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findFieldByName
    java.util.Set getFieldNames() -> getFieldNames
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.jvm.functions.Function1) -> <init>
    kotlin.jvm.functions.Function1 access$getMemberFilter$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex) -> access$getMemberFilter$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex$methodFilter$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex$methodFilter$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex:
    java.util.Collection findMethodsByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findMethodsByName
    java.util.Set getMethodNames() -> getMethodNames
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField findFieldByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findFieldByName
    java.util.Set getFieldNames() -> getFieldNames
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex$Empty -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex$Empty:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex$Empty INSTANCE -> INSTANCE
    java.util.List findMethodsByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findMethodsByName
    java.util.Collection findMethodsByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findMethodsByName
    java.util.Set getMethodNames() -> getMethodNames
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField findFieldByName(kotlin.reflect.jvm.internal.impl.name.Name) -> findFieldByName
    java.util.Set getFieldNames() -> getFieldNames
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JavaDescriptorUtilKt -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JavaDescriptorUtilKt:
    boolean isJavaField(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> isJavaField
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope javaScope -> javaScope
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue kotlinScopes$delegate -> kotlinScopes$delegate
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment packageFragment -> packageFragment
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope getJavaScope$descriptors_jvm() -> getJavaScope$descriptors_jvm
    java.util.List getKotlinScopes() -> getKotlinScopes
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void recordLookup(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment access$getPackageFragment$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope) -> access$getPackageFragment$p
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope) -> access$getC$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope$kotlinScopes$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope$kotlinScopes$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue fqName$delegate -> fqName$delegate
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue type$delegate -> type$delegate
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement source -> source
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allValueArguments$delegate -> allValueArguments$delegate
    boolean isIdeExternalAnnotation -> isIdeExternalAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation javaAnnotation -> javaAnnotation
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement getSource() -> getSource
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.util.Map getAllValueArguments() -> getAllValueArguments
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveAnnotationArgument(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument) -> resolveAnnotationArgument
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveFromAnnotation(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation) -> resolveFromAnnotation
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveFromArray(kotlin.reflect.jvm.internal.impl.name.Name,java.util.List) -> resolveFromArray
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveFromEnumValue(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> resolveFromEnumValue
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveFromJavaClassObjectType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType) -> resolveFromJavaClassObjectType
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createTypeForMissingDependencies(kotlin.reflect.jvm.internal.impl.name.FqName) -> createTypeForMissingDependencies
    boolean isIdeExternalAnnotation() -> isIdeExternalAnnotation
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation access$getJavaAnnotation$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor) -> access$getJavaAnnotation$p
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor) -> access$getC$p
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$createTypeForMissingDependencies(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName) -> access$createTypeForMissingDependencies
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue access$resolveAnnotationArgument(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument) -> access$resolveAnnotationArgument
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$allValueArguments$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$allValueArguments$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$fqName$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$fqName$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.name.FqName invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$type$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor$type$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaAnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind kind -> kind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    boolean isInner -> isInner
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope unsubstitutedMemberScope -> unsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass scopeHolder -> scopeHolder
    kotlin.reflect.jvm.internal.impl.resolve.scopes.InnerClassesScopeWrapper innerClassesScope -> innerClassesScope
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope staticScope -> staticScope
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue declaredParameters -> declaredParameters
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext outerContext -> outerContext
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass jClass -> jClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor additionalSupertypeClassDescriptor -> additionalSupertypeClassDescriptor
    java.util.Set PUBLIC_METHOD_NAMES_IN_OBJECT -> PUBLIC_METHOD_NAMES_IN_OBJECT
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isCompanionObject() -> isCompanionObject
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedInnerClassesScope() -> getUnsubstitutedInnerClassesScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope getUnsubstitutedMemberScope() -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope() -> getUnsubstitutedMemberScope
    java.util.List getConstructors() -> getConstructors
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor copy$descriptors_jvm(kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> copy$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getJClass() -> getJClass
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> access$getC$p
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$getAdditionalSupertypeClassDescriptor$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> access$getAdditionalSupertypeClassDescriptor$p
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope access$getUnsubstitutedMemberScope$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> access$getUnsubstitutedMemberScope$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$Companion -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue parameters -> parameters
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor this$0 -> this$0
    java.util.List getParameters() -> getParameters
    java.util.Collection computeSupertypes() -> computeSupertypes
    kotlin.reflect.jvm.internal.impl.types.KotlinType getPurelyImplementedSupertype() -> getPurelyImplementedSupertype
    kotlin.reflect.jvm.internal.impl.name.FqName getPurelyImplementsFqNameFromAnnotation() -> getPurelyImplementsFqNameFromAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    java.lang.String toString() -> toString
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor$parameters$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor$parameters$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$LazyJavaClassTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$declaredParameters$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$declaredParameters$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$scopeHolder$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor$scopeHolder$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue constructors -> constructors
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue nestedClassIndex -> nestedClassIndex
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue enumEntryIndex -> enumEntryIndex
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable nestedClasses -> nestedClasses
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor ownerDescriptor -> ownerDescriptor
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass jClass -> jClass
    boolean skipRefinement -> skipRefinement
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    java.util.HashSet computeFunctionNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeFunctionNames
    java.util.Set computeFunctionNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeFunctionNames
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue getConstructors$descriptors_jvm() -> getConstructors$descriptors_jvm
    boolean isVisibleAsFunction(kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor) -> isVisibleAsFunction
    boolean isVisibleAsFunctionInCurrentClass(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> isVisibleAsFunctionInCurrentClass
    boolean shouldBeVisibleAsOverrideOfBuiltInWithErasedValueParameters(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> shouldBeVisibleAsOverrideOfBuiltInWithErasedValueParameters
    java.util.Collection searchMethodsByNameWithoutBuiltinMagic(kotlin.reflect.jvm.internal.impl.name.Name) -> searchMethodsByNameWithoutBuiltinMagic
    java.util.Collection searchMethodsInSupertypesWithoutBuiltinMagic(kotlin.reflect.jvm.internal.impl.name.Name) -> searchMethodsInSupertypesWithoutBuiltinMagic
    boolean doesOverrideRenamedBuiltins(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> doesOverrideRenamedBuiltins
    boolean doesOverrideSuspendFunction(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> doesOverrideSuspendFunction
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createSuspendView(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> createSuspendView
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createRenamedCopy(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.name.Name) -> createRenamedCopy
    boolean doesOverrideRenamedDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> doesOverrideRenamedDescriptor
    boolean doesOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> doesOverride
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor findGetterOverride(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.jvm.functions.Function1) -> findGetterOverride
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor findGetterByName(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.String,kotlin.jvm.functions.Function1) -> findGetterByName
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor findSetterOverride(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.jvm.functions.Function1) -> findSetterOverride
    boolean doesClassOverridesProperty(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.jvm.functions.Function1) -> doesClassOverridesProperty
    void computeNonDeclaredFunctions(java.util.Collection,kotlin.reflect.jvm.internal.impl.name.Name) -> computeNonDeclaredFunctions
    void addFunctionFromSupertypes(java.util.Collection,kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,boolean) -> addFunctionFromSupertypes
    void addOverriddenSpecialMethods(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection,java.util.Collection,kotlin.jvm.functions.Function1) -> addOverriddenSpecialMethods
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor obtainOverrideForBuiltInWithErasedValueParametersInJava(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.jvm.functions.Function1,java.util.Collection) -> obtainOverrideForBuiltInWithErasedValueParametersInJava
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor obtainOverrideForBuiltinWithDifferentJvmName(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> obtainOverrideForBuiltinWithDifferentJvmName
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor obtainOverrideForSuspend(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.jvm.functions.Function1) -> obtainOverrideForSuspend
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createHiddenCopyIfBuiltinAlreadyAccidentallyOverridden(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.util.Collection) -> createHiddenCopyIfBuiltinAlreadyAccidentallyOverridden
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createOverrideForBuiltinFunctionWithErasedParameterIfNeeded(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.jvm.functions.Function1) -> createOverrideForBuiltinFunctionWithErasedParameterIfNeeded
    java.util.Set getFunctionsFromSupertypes(kotlin.reflect.jvm.internal.impl.name.Name) -> getFunctionsFromSupertypes
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    void addPropertyOverrideByMethod(java.util.Set,java.util.Collection,kotlin.jvm.functions.Function1) -> addPropertyOverrideByMethod
    void computeAnnotationProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeAnnotationProperties
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor createPropertyDescriptorWithDefaultGetter(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> createPropertyDescriptorWithDefaultGetter
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor createPropertyDescriptorWithDefaultGetter$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,int,java.lang.Object) -> createPropertyDescriptorWithDefaultGetter$default
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaPropertyDescriptor createPropertyDescriptorByMethods(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.jvm.functions.Function1) -> createPropertyDescriptorByMethods
    java.util.Set getPropertiesFromSupertypes(kotlin.reflect.jvm.internal.impl.name.Name) -> getPropertiesFromSupertypes
    java.util.Collection computeSupertypes() -> computeSupertypes
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$MethodSignatureData resolveMethodSignature(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List) -> resolveMethodSignature
    boolean hasSameJvmDescriptorButDoesNotOverride(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> hasSameJvmDescriptorButDoesNotOverride
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor resolveConstructor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaConstructor) -> resolveConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor createDefaultConstructor() -> createDefaultConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getConstructorVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getConstructorVisibility
    java.util.List createAnnotationConstructorParameters(kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl) -> createAnnotationConstructorParameters
    void addAnnotationValueParameter(java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,int,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> addAnnotationValueParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Set computeClassNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeClassNames
    java.util.Set computePropertyNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computePropertyNames
    void recordLookup(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,boolean,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,boolean,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.util.Collection access$searchMethodsByNameWithoutBuiltinMagic(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$searchMethodsByNameWithoutBuiltinMagic
    java.util.Collection access$searchMethodsInSupertypesWithoutBuiltinMagic(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$searchMethodsInSupertypesWithoutBuiltinMagic
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass access$getJClass$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> access$getJClass$p
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaClassConstructorDescriptor access$resolveConstructor(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaConstructor) -> access$resolveConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor access$createDefaultConstructor(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> access$createDefaultConstructor
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue access$getNestedClassIndex$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> access$getNestedClassIndex$p
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue access$getEnumEntryIndex$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> access$getEnumEntryIndex$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeMemberIndex$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeMemberIndex$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeMemberIndex$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMember) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredFunctions$3 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredFunctions$3:
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredFunctions$4 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredFunctions$4:
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredProperties$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredProperties$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredProperties$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$computeNonDeclaredProperties$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$constructors$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$constructors$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $c -> $c
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$enumEntryIndex$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$enumEntryIndex$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$isVisibleAsFunctionInCurrentClass$$inlined$any$lambda$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$isVisibleAsFunctionInCurrentClass$$inlined$any$lambda$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor $function$inlined -> $function$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClassIndex$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClassIndex$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $c -> $c
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassDescriptorBase invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1$enumMemberNames$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1$enumMemberNames$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1 this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassMemberScope$nestedClasses$1) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue binaryClasses$delegate -> binaryClasses$delegate
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope scope -> scope
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue subPackages -> subPackages
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue partToFacade$delegate -> partToFacade$delegate
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage jPackage -> jPackage
    void <clinit>() -> <clinit>
    java.util.Map getBinaryClasses$descriptors_jvm() -> getBinaryClasses$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.util.List getSubPackageFqNames$descriptors_jvm() -> getSubPackageFqNames$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassifierByJavaClass$descriptors_jvm(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findClassifierByJavaClass$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.JvmPackageScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext access$getC$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> access$getC$p
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage access$getJPackage$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> access$getJPackage$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$binaryClasses$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$binaryClasses$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Map invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$partToFacade$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$partToFacade$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.HashMap invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$subPackages$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment$subPackages$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope:
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue knownClassNamesInPackage -> knownClassNamesInPackage
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable classes -> classes
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage jPackage -> jPackage
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment ownerDescriptor -> ownerDescriptor
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult resolveKotlinBinaryClass(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> resolveKotlinBinaryClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findClassifier
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassifierByJavaClass$descriptors_jvm(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findClassifierByJavaClass$descriptors_jvm
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    java.util.Set computeClassNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeClassNames
    java.util.Set computeFunctionNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeFunctionNames
    void computeNonDeclaredFunctions(java.util.Collection,kotlin.reflect.jvm.internal.impl.name.Name) -> computeNonDeclaredFunctions
    java.util.Set computePropertyNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computePropertyNames
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment getOwnerDescriptor() -> getOwnerDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult access$resolveKotlinBinaryClass(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> access$resolveKotlinBinaryClass
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$FindClassRequest -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$FindClassRequest:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass javaClass -> javaClass
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getJavaClass() -> getJavaClass
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$Found -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$Found:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor descriptor -> descriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDescriptor() -> getDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$NotFound -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$NotFound:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$NotFound INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$SyntheticClass -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$SyntheticClass:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$KotlinClassLookupResult$SyntheticClass INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$classes$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$classes$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $c -> $c
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$FindClassRequest) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$knownClassNamesInPackage$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope$knownClassNamesInPackage$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext $c -> $c
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageScope,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allDescriptors -> allDescriptors
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue declaredMemberIndex -> declaredMemberIndex
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull declaredFunctions -> declaredFunctions
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable declaredField -> declaredField
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull functions -> functions
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue functionNamesLazy$delegate -> functionNamesLazy$delegate
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue propertyNamesLazy$delegate -> propertyNamesLazy$delegate
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue classNamesLazy$delegate -> classNamesLazy$delegate
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull properties -> properties
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope mainScope -> mainScope
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue getDeclaredMemberIndex() -> getDeclaredMemberIndex
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    void computeNonDeclaredFunctions(java.util.Collection,kotlin.reflect.jvm.internal.impl.name.Name) -> computeNonDeclaredFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    boolean isVisibleAsFunction(kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor) -> isVisibleAsFunction
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$MethodSignatureData resolveMethodSignature(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List) -> resolveMethodSignature
    kotlin.reflect.jvm.internal.impl.load.java.descriptors.JavaMethodDescriptor resolveMethodToFunctionDescriptor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod) -> resolveMethodToFunctionDescriptor
    kotlin.reflect.jvm.internal.impl.types.KotlinType computeMethodReturnType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> computeMethodReturnType
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$ResolvedValueParameters resolveValueParameters(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.util.List) -> resolveValueParameters
    java.util.Set getFunctionNamesLazy() -> getFunctionNamesLazy
    java.util.Set getPropertyNamesLazy() -> getPropertyNamesLazy
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Set computeFunctionNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeFunctionNames
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    java.util.Set computePropertyNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computePropertyNames
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor resolveProperty(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField) -> resolveProperty
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl createPropertyDescriptor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField) -> createPropertyDescriptor
    boolean isFinalStatic(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField) -> isFinalStatic
    kotlin.reflect.jvm.internal.impl.types.KotlinType getPropertyType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField) -> getPropertyType
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.List computeDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeDescriptors
    java.util.Set computeClassNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeClassNames
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext getC() -> getC
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope getMainScope() -> getMainScope
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull access$getDeclaredFunctions$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> access$getDeclaredFunctions$p
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable access$getDeclaredField$p(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> access$getDeclaredField$p
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor access$resolveProperty(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField) -> access$resolveProperty
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$MethodSignatureData -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$MethodSignatureData:
    kotlin.reflect.jvm.internal.impl.types.KotlinType returnType -> returnType
    kotlin.reflect.jvm.internal.impl.types.KotlinType receiverType -> receiverType
    java.util.List valueParameters -> valueParameters
    java.util.List typeParameters -> typeParameters
    boolean hasStableParameterNames -> hasStableParameterNames
    java.util.List errors -> errors
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getReceiverType() -> getReceiverType
    java.util.List getValueParameters() -> getValueParameters
    java.util.List getTypeParameters() -> getTypeParameters
    boolean getHasStableParameterNames() -> getHasStableParameterNames
    java.util.List getErrors() -> getErrors
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,java.util.List,boolean,java.util.List) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$ResolvedValueParameters -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$ResolvedValueParameters:
    java.util.List descriptors -> descriptors
    boolean hasSynthesizedNames -> hasSynthesizedNames
    java.util.List getDescriptors() -> getDescriptors
    boolean getHasSynthesizedNames() -> getHasSynthesizedNames
    void <init>(java.util.List,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$allDescriptors$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$allDescriptors$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$classNamesLazy$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$classNamesLazy$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredField$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredField$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredFunctions$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredFunctions$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredMemberIndex$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$declaredMemberIndex$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$functionNamesLazy$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$functionNamesLazy$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$functions$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$functions$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.List invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$properties$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$properties$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.List invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$propertyNamesLazy$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$propertyNamesLazy$2:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$resolveProperty$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$resolveProperty$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField $field -> $field
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl $propertyDescriptor -> $propertyDescriptor
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField,kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass jClass -> jClass
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor ownerDescriptor -> ownerDescriptor
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.ClassDeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.DeclaredMemberIndex computeMemberIndex() -> computeMemberIndex
    java.util.Set computeFunctionNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeFunctionNames
    java.util.Set computePropertyNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computePropertyNames
    java.util.Set computeClassNames(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> computeClassNames
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    void computeNonDeclaredFunctions(java.util.Collection,kotlin.reflect.jvm.internal.impl.name.Name) -> computeNonDeclaredFunctions
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    java.util.Set getStaticFunctionsFromJavaSuperClasses(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getStaticFunctionsFromJavaSuperClasses
    java.util.Set flatMapJavaStaticSupertypesScopes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.Set,kotlin.jvm.functions.Function1) -> flatMapJavaStaticSupertypesScopes
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getRealOriginal(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> getRealOriginal
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOwnerDescriptor() -> getOwnerDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass,kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computeMemberIndex$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computeMemberIndex$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computeMemberIndex$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMember) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computeNonDeclaredProperties$propertiesFromSupertypes$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computeNonDeclaredProperties$propertiesFromSupertypes$1:
    kotlin.reflect.jvm.internal.impl.name.Name $name -> $name
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computePropertyNames$1$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computePropertyNames$1$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$computePropertyNames$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Set invoke(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1 INSTANCE -> INSTANCE
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.lang.Iterable getNeighbors(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getNeighbors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$1$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticClassScope$flatMapJavaStaticSupertypesScopes$2:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor $root -> $root
    java.util.Set $result -> $result
    kotlin.jvm.functions.Function1 $onJavaStaticScope -> $onJavaStaticScope
    boolean beforeChildren(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> beforeChildren
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    void result() -> result
    java.lang.Object result() -> result
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.Set,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticScope -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaStaticScope:
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaScope$MethodSignatureData resolveMethodSignature(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List) -> resolveMethodSignature
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaTypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaTypeParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter javaTypeParameter -> javaTypeParameter
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaAnnotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.util.List resolveUpperBounds() -> resolveUpperBounds
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter,int,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes:
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage howThisTypeIsUsed -> howThisTypeIsUsed
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility flexibility -> flexibility
    boolean isForAnnotationParameter -> isForAnnotationParameter
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor upperBoundOfTypeParameter -> upperBoundOfTypeParameter
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes withFlexibility(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility) -> withFlexibility
    kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage getHowThisTypeIsUsed() -> getHowThisTypeIsUsed
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility getFlexibility() -> getFlexibility
    boolean isForAnnotationParameter() -> isForAnnotationParameter
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getUpperBoundOfTypeParameter() -> getUpperBoundOfTypeParameter
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes copy(kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> copy
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes copy$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility INFLEXIBLE -> INFLEXIBLE
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility FLEXIBLE_UPPER_BOUND -> FLEXIBLE_UPPER_BOUND
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility FLEXIBLE_LOWER_BOUND -> FLEXIBLE_LOWER_BOUND
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeFlexibility valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext c -> c
    kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver typeParameterResolver -> typeParameterResolver
    kotlin.reflect.jvm.internal.impl.types.KotlinType transformJavaType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> transformJavaType
    kotlin.reflect.jvm.internal.impl.types.KotlinType transformArrayType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,boolean) -> transformArrayType
    kotlin.reflect.jvm.internal.impl.types.KotlinType transformArrayType$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,boolean,int,java.lang.Object) -> transformArrayType$default
    kotlin.reflect.jvm.internal.impl.types.KotlinType transformJavaClassifierType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> transformJavaClassifierType
    kotlin.reflect.jvm.internal.impl.types.SimpleType computeSimpleJavaClassifierType(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> computeSimpleJavaClassifierType
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor computeTypeConstructor(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> computeTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor createNotFoundClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType) -> createNotFoundClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor mapKotlinClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.name.FqName) -> mapKotlinClass
    boolean argumentsMakeSenseOnlyForMutableContainer(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> argumentsMakeSenseOnlyForMutableContainer
    java.util.List computeArguments(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> computeArguments
    kotlin.reflect.jvm.internal.impl.types.TypeProjection transformToTypeProjection(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> transformToTypeProjection
    boolean isConflictingArgumentFor(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> isConflictingArgumentFor
    boolean isNullable(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> isNullable
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.lazy.TypeParameterResolver) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$argumentsMakeSenseOnlyForMutableContainer$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$argumentsMakeSenseOnlyForMutableContainer$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$argumentsMakeSenseOnlyForMutableContainer$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor $parameter -> $parameter
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes $attr$inlined -> $attr$inlined
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor $constructor$inlined -> $constructor$inlined
    boolean $isRaw$inlined -> $isRaw$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,boolean) -> <init>
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke() -> invoke
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1 this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$computeArguments$$inlined$map$lambda$1) -> <init>
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke() -> invoke
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$transformJavaClassifierType$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolver$transformJavaClassifierType$1:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType $javaType -> $javaType
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolverKt -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolverKt:
    kotlin.reflect.jvm.internal.impl.name.FqName JAVA_LANG_CLASS_FQ_NAME -> JAVA_LANG_CLASS_FQ_NAME
    kotlin.reflect.jvm.internal.impl.types.TypeProjection makeStarProjection(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> makeStarProjection
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes toAttributes(kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> toAttributes
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes toAttributes$default(kotlin.reflect.jvm.internal.impl.load.java.components.TypeUsage,boolean,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,int,java.lang.Object) -> toAttributes$default
    kotlin.reflect.jvm.internal.impl.types.KotlinType getErasedUpperBound(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.jvm.functions.Function0) -> getErasedUpperBound
    kotlin.reflect.jvm.internal.impl.types.KotlinType getErasedUpperBound$default(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.jvm.functions.Function0,int,java.lang.Object) -> getErasedUpperBound$default
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.FqName access$getJAVA_LANG_CLASS_FQ_NAME$p() -> access$getJAVA_LANG_CLASS_FQ_NAME$p
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolverKt$getErasedUpperBound$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeResolverKt$getErasedUpperBound$1:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor $this_getErasedUpperBound -> $this_getErasedUpperBound
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes lowerTypeAttr -> lowerTypeAttr
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes upperTypeAttr -> upperTypeAttr
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.KotlinType eraseType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> eraseType
    kotlin.Pair eraseInflexibleBasedOnClassDescriptor(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> eraseInflexibleBasedOnClassDescriptor
    kotlin.reflect.jvm.internal.impl.types.TypeProjection computeProjection(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> computeProjection
    kotlin.reflect.jvm.internal.impl.types.TypeProjection computeProjection$default(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes,kotlin.reflect.jvm.internal.impl.types.KotlinType,int,java.lang.Object) -> computeProjection$default
    boolean isEmpty() -> isEmpty
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.Pair access$eraseInflexibleBasedOnClassDescriptor(kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> access$eraseInflexibleBasedOnClassDescriptor
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution$eraseInflexibleBasedOnClassDescriptor$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawSubstitution$eraseInflexibleBasedOnClassDescriptor$2:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor $declaration -> $declaration
    kotlin.reflect.jvm.internal.impl.types.SimpleType $type -> $type
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes $attr -> $attr
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.load.java.lazy.types.JavaTypeAttributes) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String render(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> render
    kotlin.reflect.jvm.internal.impl.types.FlexibleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(java.lang.String,java.lang.String) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$2 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$2:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer $renderer -> $renderer
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.List invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$3 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$3:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$3 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.String,java.lang.String) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$newArgs$1 -> kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$newArgs$1:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.types.RawTypeImpl$render$newArgs$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.String) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement -> kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement getJavaElement() -> getJavaElement
kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElementFactory -> kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElementFactory:
    kotlin.reflect.jvm.internal.impl.load.java.sources.JavaSourceElement source(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement) -> source
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation:
    java.util.Collection getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    boolean isIdeExternalAnnotation() -> isIdeExternalAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass resolve() -> resolve
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation$DefaultImpls -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation$DefaultImpls:
    boolean isIdeExternalAnnotation(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation) -> isIdeExternalAnnotation
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument:
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationAsAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationAsAnnotationArgument:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation getAnnotation() -> getAnnotation
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationOwner:
    java.util.Collection getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotation findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean isDeprecatedInJavaDoc() -> isDeprecatedInJavaDoc
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayAnnotationArgument:
    java.util.List getElements() -> getElements
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayType -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaArrayType:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getComponentType() -> getComponentType
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass:
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    java.util.Collection getSupertypes() -> getSupertypes
    java.util.Collection getInnerClassNames() -> getInnerClassNames
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getOuterClass() -> getOuterClass
    boolean isInterface() -> isInterface
    boolean isAnnotationType() -> isAnnotationType
    boolean isEnum() -> isEnum
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind getLightClassOriginKind() -> getLightClassOriginKind
    java.util.Collection getMethods() -> getMethods
    java.util.Collection getFields() -> getFields
    java.util.Collection getConstructors() -> getConstructors
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassObjectAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassObjectAnnotationArgument:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getReferencedType() -> getReferencedType
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifier -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifier:
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifierType:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClassifier getClassifier() -> getClassifier
    java.util.List getTypeArguments() -> getTypeArguments
    boolean isRaw() -> isRaw
    java.lang.String getClassifierQualifiedName() -> getClassifierQualifiedName
    java.lang.String getPresentableText() -> getPresentableText
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaConstructor -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaConstructor:
    java.util.List getValueParameters() -> getValueParameters
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaElement:
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaEnumValueAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaEnumValueAnnotationArgument:
    kotlin.reflect.jvm.internal.impl.name.ClassId getEnumClassId() -> getEnumClassId
    kotlin.reflect.jvm.internal.impl.name.Name getEntryName() -> getEntryName
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaField:
    boolean isEnumEntry() -> isEnumEntry
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getType() -> getType
    boolean getHasConstantNotNullInitializer() -> getHasConstantNotNullInitializer
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaLiteralAnnotationArgument -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaLiteralAnnotationArgument:
    java.lang.Object getValue() -> getValue
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMember -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMember:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass getContainingClass() -> getContainingClass
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod:
    java.util.List getValueParameters() -> getValueParameters
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaAnnotationArgument getAnnotationParameterDefaultValue() -> getAnnotationParameterDefaultValue
    boolean getHasAnnotationParameterDefaultValue() -> getHasAnnotationParameterDefaultValue
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod$DefaultImpls -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod$DefaultImpls:
    boolean getHasAnnotationParameterDefaultValue(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaMethod) -> getHasAnnotationParameterDefaultValue
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaModifierListOwner -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaModifierListOwner:
    boolean isAbstract() -> isAbstract
    boolean isStatic() -> isStatic
    boolean isFinal() -> isFinal
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaNamedElement -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaNamedElement:
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPackage:
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
    java.util.Collection getSubPackages() -> getSubPackages
    java.util.Collection getClasses(kotlin.jvm.functions.Function1) -> getClasses
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPrimitiveType -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaPrimitiveType:
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getType() -> getType
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType:
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameter:
    java.util.Collection getUpperBounds() -> getUpperBounds
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaTypeParameterListOwner:
    java.util.List getTypeParameters() -> getTypeParameters
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaValueParameter -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaValueParameter:
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getType() -> getType
    boolean isVararg() -> isVararg
kotlin.reflect.jvm.internal.impl.load.java.structure.JavaWildcardType -> kotlin.reflect.jvm.internal.impl.load.java.structure.JavaWildcardType:
    kotlin.reflect.jvm.internal.impl.load.java.structure.JavaType getBound() -> getBound
    boolean isExtends() -> isExtends
kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind -> kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind:
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind SOURCE -> SOURCE
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind BINARY -> BINARY
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.structure.LightClassOriginKind valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotationDescriptor -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotationDescriptor:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotationDescriptor INSTANCE -> INSTANCE
    java.lang.Void throwError() -> throwError
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    java.util.Map getAllValueArguments() -> getAllValueArguments
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.name.FqName getFqName() -> getFqName
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotations -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotations:
    kotlin.reflect.jvm.internal.impl.name.FqName fqNameToMatch -> fqNameToMatch
    boolean isEmpty() -> isEmpty
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    java.util.Iterator iterator() -> iterator
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult:
    java.lang.Object result -> result
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations enhancementAnnotations -> enhancementAnnotations
    void <init>(java.lang.Object,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
    java.lang.Object component1() -> component1
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier nullability -> nullability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier mutability -> mutability
    boolean isNotNullTypeParameter -> isNotNullTypeParameter
    boolean isNullabilityQualifierForWarning -> isNullabilityQualifierForWarning
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers NONE -> NONE
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier getNullability() -> getNullability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier getMutability() -> getMutability
    boolean isNotNullTypeParameter() -> isNotNullTypeParameter
    boolean isNullabilityQualifierForWarning() -> isNullabilityQualifierForWarning
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier,boolean,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers access$getNONE$cp() -> access$getNONE$cp
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers$Companion -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers$Companion:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers getNONE() -> getNONE
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier READ_ONLY -> READ_ONLY
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier MUTABLE -> MUTABLE
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NotNullTypeParameter -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NotNullTypeParameter:
    kotlin.reflect.jvm.internal.impl.types.SimpleType delegate -> delegate
    boolean isTypeVariable() -> isTypeVariable
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitutionResult(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> substitutionResult
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.SimpleType prepareReplacement(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> prepareReplacement
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NotNullTypeParameter replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NotNullTypeParameter replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier NULLABLE -> NULLABLE
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier NOT_NULL -> NOT_NULL
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier FORCE_FLEXIBILITY -> FORCE_FLEXIBILITY
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier qualifier -> qualifier
    boolean isForWarningOnly -> isForWarningOnly
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier getQualifier() -> getQualifier
    boolean isForWarningOnly() -> isForWarningOnly
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus copy(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus copy$default(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,boolean,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers NULLABLE -> NULLABLE
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers NOT_PLATFORM -> NOT_PLATFORM
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers NOT_NULLABLE -> NOT_NULLABLE
    java.util.Map PREDEFINED_FUNCTION_ENHANCEMENT_INFO_BY_SIGNATURE -> PREDEFINED_FUNCTION_ENHANCEMENT_INFO_BY_SIGNATURE
    java.util.Map getPREDEFINED_FUNCTION_ENHANCEMENT_INFO_BY_SIGNATURE() -> getPREDEFINED_FUNCTION_ENHANCEMENT_INFO_BY_SIGNATURE
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers access$getNOT_PLATFORM$p() -> access$getNOT_PLATFORM$p
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers access$getNULLABLE$p() -> access$getNULLABLE$p
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers access$getNOT_NULLABLE$p() -> access$getNOT_NULLABLE$p
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$10 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$10:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$11 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$11:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$12 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$12:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$13 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$13:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$14 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$14:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$15 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$15:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$16 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$16:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$17 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$17:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$18 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$18:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$19 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$19:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$2 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$2:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$20 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$20:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$21 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$21:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$22 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$22:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$23 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$23:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$24 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$24:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$25 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$25:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$26 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$26:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$27 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$27:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$28 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$28:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$3 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$3:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$4 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$4:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$5 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$5:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$6 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$6:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$7 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$7:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$8 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$8:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$9 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedEnhancementInfoKt$$special$$inlined$enhancement$lambda$9:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents $this_signatures$inlined -> $this_signatures$inlined
    java.lang.String $JFConsumer$inlined -> $JFConsumer$inlined
    java.lang.String $JFPredicate$inlined -> $JFPredicate$inlined
    java.lang.String $JUStream$inlined -> $JUStream$inlined
    java.lang.String $JFUnaryOperator$inlined -> $JFUnaryOperator$inlined
    java.lang.String $JFBiConsumer$inlined -> $JFBiConsumer$inlined
    java.lang.String $JLObject$inlined -> $JLObject$inlined
    java.lang.String $JFBiFunction$inlined -> $JFBiFunction$inlined
    java.lang.String $JFFunction$inlined -> $JFFunction$inlined
    java.lang.String $JUOptional$inlined -> $JUOptional$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedFunctionEnhancementInfo -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.PredefinedFunctionEnhancementInfo:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo returnTypeInfo -> returnTypeInfo
    java.util.List parametersInfo -> parametersInfo
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo getReturnTypeInfo() -> getReturnTypeInfo
    java.util.List getParametersInfo() -> getParametersInfo
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo,java.util.List) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.Result -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.Result:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    int subtreeSize -> subtreeSize
    boolean wereChanges -> wereChanges
    kotlin.reflect.jvm.internal.impl.types.KotlinType getTypeIfChanged() -> getTypeIfChanged
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    int getSubtreeSize() -> getSubtreeSize
    boolean getWereChanges() -> getWereChanges
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,int,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement:
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver annotationTypeQualifierResolver -> annotationTypeQualifierResolver
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State jsr305State -> jsr305State
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus extractNullabilityTypeFromArgument(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> extractNullabilityTypeFromArgument
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus extractNullability(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> extractNullability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus extractNullabilityFromKnownAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> extractNullabilityFromKnownAnnotations
    java.util.Collection enhanceSignatures(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,java.util.Collection) -> enhanceSignatures
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor enhanceSignature(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> enhanceSignature
    boolean hasDefaultValueInAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> hasDefaultValueInAnnotation
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts partsForValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.jvm.functions.Function1) -> partsForValueParameter
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts parts(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated,boolean,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType,kotlin.jvm.functions.Function1) -> parts
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver,kotlin.reflect.jvm.internal.impl.utils.Jsr305State) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$PartEnhancementResult -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$PartEnhancementResult:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    boolean wereChanges -> wereChanges
    boolean containsFunctionN -> containsFunctionN
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    boolean getWereChanges() -> getWereChanges
    boolean getContainsFunctionN() -> getContainsFunctionN
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated typeContainer -> typeContainer
    kotlin.reflect.jvm.internal.impl.types.KotlinType fromOverride -> fromOverride
    java.util.Collection fromOverridden -> fromOverridden
    boolean isCovariant -> isCovariant
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext containerContext -> containerContext
    kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType containerApplicabilityType -> containerApplicabilityType
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement this$0 -> this$0
    boolean isForVarargParameter() -> isForVarargParameter
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$PartEnhancementResult enhance(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo) -> enhance
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$PartEnhancementResult enhance$default(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo,int,java.lang.Object) -> enhance$default
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers extractQualifiers(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> extractQualifiers
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers extractQualifiersFromAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers) -> extractQualifiersFromAnnotations
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifierWithMigrationStatus extractNullability(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> extractNullability
    kotlin.jvm.functions.Function1 computeIndexedQualifiersForOverride() -> computeIndexedQualifiersForOverride
    java.util.List toIndexed(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> toIndexed
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers computeQualifiersForOverride(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.Collection,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers,boolean) -> computeQualifiersForOverride
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated,kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.Collection,boolean,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext,kotlin.reflect.jvm.internal.impl.load.java.AnnotationTypeQualifierResolver$QualifierApplicabilityType) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$computeIndexedQualifiersForOverride$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$computeIndexedQualifiersForOverride$1:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers[] $computedResult -> $computedResult
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers invoke(int) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers[]) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$enhance$$inlined$let$lambda$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$enhance$$inlined$let$lambda$1:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo $predefined$inlined -> $predefined$inlined
    kotlin.jvm.functions.Function1 $qualifiers$inlined -> $qualifiers$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo,kotlin.jvm.functions.Function1) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers invoke(int) -> invoke
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$enhance$containsFunctionN$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$enhance$containsFunctionN$1:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$enhance$containsFunctionN$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$extractQualifiersFromAnnotations$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$extractQualifiersFromAnnotations$1:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations $composedAnnotation -> $composedAnnotation
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    java.lang.Object invoke(java.util.List,java.lang.Object) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$extractQualifiersFromAnnotations$2 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$extractQualifiersFromAnnotations$2:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$extractQualifiersFromAnnotations$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$toIndexed$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$SignatureParts$toIndexed$1:
    java.util.ArrayList $list -> $list
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaResolverContext) -> invoke
    void <init>(java.util.ArrayList) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$ValueParameterEnhancementResult -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$ValueParameterEnhancementResult:
    boolean hasDefaultValue -> hasDefaultValue
    boolean getHasDefaultValue() -> getHasDefaultValue
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean,boolean,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$receiverTypeEnhancement$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$receiverTypeEnhancement$1:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$receiverTypeEnhancement$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$returnTypeEnhancement$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$returnTypeEnhancement$1:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$returnTypeEnhancement$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$valueParameterEnhancements$1$enhancementResult$1 -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancement$enhanceSignature$valueParameterEnhancements$1$enhancementResult$1:
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor $p -> $p
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder:
    java.util.Map signatures -> signatures
    java.util.Map build() -> build
    void <init>() -> <init>
    java.util.Map access$getSignatures$p(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder) -> access$getSignatures$p
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder:
    java.lang.String className -> className
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder this$0 -> this$0
    void function(java.lang.String,kotlin.jvm.functions.Function1) -> function
    java.lang.String getClassName() -> getClassName
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder,java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder$FunctionEnhancementBuilder:
    java.util.List parameters -> parameters
    kotlin.Pair returnType -> returnType
    java.lang.String functionName -> functionName
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder this$0 -> this$0
    void parameter(java.lang.String,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers[]) -> parameter
    void returns(java.lang.String,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers[]) -> returns
    void returns(kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType) -> returns
    kotlin.Pair build() -> build
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementBuilder$ClassEnhancementBuilder,java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementKt -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SignatureEnhancementKt:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers createJavaTypeQualifiers(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.MutabilityQualifier,boolean,boolean) -> createJavaTypeQualifiers
    java.lang.Object select(java.util.Set,java.lang.Object,java.lang.Object,java.lang.Object,boolean) -> select
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier select(java.util.Set,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.NullabilityQualifier,boolean) -> select
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SimpleResult -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SimpleResult:
    kotlin.reflect.jvm.internal.impl.types.SimpleType type -> type
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,int,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeAndDefaultQualifiers -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeAndDefaultQualifiers:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers defaultQualifiers -> defaultQualifiers
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers) -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType component1() -> component1
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition FLEXIBLE_LOWER -> FLEXIBLE_LOWER
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition FLEXIBLE_UPPER -> FLEXIBLE_UPPER
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition INFLEXIBLE -> INFLEXIBLE
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementInfo:
    java.util.Map map -> map
    java.util.Map getMap() -> getMap
    void <init>(java.util.Map) -> <init>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementKt -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementKt:
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotations ENHANCED_NULLABILITY_ANNOTATIONS -> ENHANCED_NULLABILITY_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancedTypeAnnotations ENHANCED_MUTABILITY_ANNOTATIONS -> ENHANCED_MUTABILITY_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.types.KotlinType enhance(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.jvm.functions.Function1) -> enhance
    boolean hasEnhancedNullability(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> hasEnhancedNullability
    boolean hasEnhancedNullability(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasEnhancedNullability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.Result enhancePossiblyFlexible(kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.jvm.functions.Function1,int) -> enhancePossiblyFlexible
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.SimpleResult enhanceInflexible(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.jvm.functions.Function1,int,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition) -> enhanceInflexible
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations compositeAnnotationsOrSingle(java.util.List) -> compositeAnnotationsOrSingle
    boolean shouldEnhance(kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition) -> shouldEnhance
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult noChange(java.lang.Object) -> noChange
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult enhancedNullability(java.lang.Object) -> enhancedNullability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult enhancedMutability(java.lang.Object) -> enhancedMutability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult enhanceMutability(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition) -> enhanceMutability
    kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.EnhancementResult getEnhancedNullability(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.JavaTypeQualifiers,kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeComponentPosition) -> getEnhancedNullability
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementKt$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.java.typeEnhancement.TypeEnhancementKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull storage -> storage
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder kotlinClassFinder -> kotlinClassFinder
    java.util.Set SPECIAL_ANNOTATIONS -> SPECIAL_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Companion Companion -> Companion
    java.lang.Object loadConstant(java.lang.String,java.lang.Object) -> loadConstant
    java.lang.Object transformToUnsignedConstant(java.lang.Object) -> transformToUnsignedConstant
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor loadAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,java.util.List) -> loadAnnotation
    java.lang.Object loadTypeAnnotation(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotation
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor loadAnnotationIfNotSpecial(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,java.util.List) -> loadAnnotationIfNotSpecial
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass toBinaryClass(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class) -> toBinaryClass
    byte[] getCachedFileContent(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> getCachedFileContent
    java.util.List loadClassAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class) -> loadClassAnnotations
    java.util.List loadCallableAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadCallableAnnotations
    java.util.List loadPropertyBackingFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyBackingFieldAnnotations
    java.util.List loadPropertyDelegateFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyDelegateFieldAnnotations
    java.util.List loadPropertyAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement) -> loadPropertyAnnotations
    java.util.List loadEnumEntryAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> loadEnumEntryAnnotations
    java.util.List findClassAndLoadMemberAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature,boolean,boolean,java.lang.Boolean,boolean) -> findClassAndLoadMemberAnnotations
    java.util.List findClassAndLoadMemberAnnotations$default(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature,boolean,boolean,java.lang.Boolean,boolean,int,java.lang.Object) -> findClassAndLoadMemberAnnotations$default
    java.util.List loadValueParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,int,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> loadValueParameterAnnotations
    int computeJvmParameterIndexShift(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> computeJvmParameterIndexShift
    java.util.List loadExtensionReceiverParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadExtensionReceiverParameterAnnotations
    java.util.List loadTypeAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotations
    java.util.List loadTypeParameterAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeParameterAnnotations
    java.lang.Object loadPropertyConstant(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> loadPropertyConstant
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass findClassWithAnnotationsAndInitializers(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> findClassWithAnnotationsAndInitializers
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass getSpecialCaseContainerClass(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,boolean,boolean,java.lang.Boolean,boolean) -> getSpecialCaseContainerClass
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Storage loadAnnotationsAndInitializers(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> loadAnnotationsAndInitializers
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature getPropertySignature(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,boolean,boolean,boolean) -> getPropertySignature
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature getPropertySignature$default(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,boolean,boolean,boolean,int,java.lang.Object) -> getPropertySignature$default
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature getCallableSignature(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,boolean) -> getCallableSignature
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature getCallableSignature$default(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,boolean,int,java.lang.Object) -> getCallableSignature$default
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor access$loadAnnotationIfNotSpecial(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,java.util.List) -> access$loadAnnotationIfNotSpecial
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Storage access$loadAnnotationsAndInitializers(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> access$loadAnnotationsAndInitializers
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Companion -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement:
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement PROPERTY -> PROPERTY
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement BACKING_FIELD -> BACKING_FIELD
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement DELEGATE_FIELD -> DELEGATE_FIELD
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$PropertyRelatedElement valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Storage -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Storage:
    java.util.Map memberAnnotations -> memberAnnotations
    java.util.Map propertyConstants -> propertyConstants
    java.util.Map getMemberAnnotations() -> getMemberAnnotations
    java.util.Map getPropertyConstants() -> getPropertyConstants
    void <init>(java.util.Map,java.util.Map) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader this$0 -> this$0
    java.util.HashMap $memberAnnotations -> $memberAnnotations
    java.util.HashMap $propertyConstants -> $propertyConstants
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MethodAnnotationVisitor visitMethod(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String) -> visitMethod
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor visitField(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String,java.lang.Object) -> visitField
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,java.util.HashMap,java.util.HashMap) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1$AnnotationVisitorForMethod -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1$AnnotationVisitorForMethod:
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1 this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitParameterAnnotation(int,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitParameterAnnotation
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1,kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1$MemberAnnotationVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1$MemberAnnotationVisitor:
    java.util.ArrayList result -> result
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature signature -> signature
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1 this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitAnnotation
    void visitEnd() -> visitEnd
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadAnnotationsAndInitializers$1,kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadClassAnnotations$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$loadClassAnnotations$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader this$0 -> this$0
    java.util.ArrayList $result -> $result
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitAnnotation
    void visitEnd() -> visitEnd
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader,java.util.ArrayList) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$storage$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$storage$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader$Storage invoke(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.AbstractBinaryClassAnnotationAndConstantLoader) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl -> kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer annotationDeserializer -> annotationDeserializer
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses notFoundClasses -> notFoundClasses
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor loadTypeAnnotation(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotation
    java.lang.Object loadTypeAnnotation(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotation
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue loadConstant(java.lang.String,java.lang.Object) -> loadConstant
    java.lang.Object loadConstant(java.lang.String,java.lang.Object) -> loadConstant
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue transformToUnsignedConstant(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue) -> transformToUnsignedConstant
    java.lang.Object transformToUnsignedConstant(java.lang.Object) -> transformToUnsignedConstant
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor loadAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,java.util.List) -> loadAnnotation
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> resolveClass
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1:
    java.util.HashMap arguments -> arguments
    kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor $annotationClass -> $annotationClass
    java.util.List $result -> $result
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement $source -> $source
    void visit(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> visit
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor visitArray(kotlin.reflect.jvm.internal.impl.name.Name) -> visitArray
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId) -> visitAnnotation
    void visitEnd() -> visitEnd
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue createConstant(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> createConstant
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue access$createConstant(kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1,kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> access$createConstant
    java.util.HashMap access$getArguments$p(kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1) -> access$getArguments$p
kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1$visitAnnotation$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1$visitAnnotation$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor $$delegate_0 -> $$delegate_0
    kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1 this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor $visitor -> $visitor
    kotlin.reflect.jvm.internal.impl.name.Name $name -> $name
    java.util.ArrayList $list -> $list
    void visitEnd() -> visitEnd
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor,kotlin.reflect.jvm.internal.impl.name.Name,java.util.ArrayList) -> <init>
    void visit(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> visit
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId) -> visitAnnotation
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor visitArray(kotlin.reflect.jvm.internal.impl.name.Name) -> visitArray
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1$visitArray$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1$visitArray$1:
    java.util.ArrayList elements -> elements
    kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1 this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.name.Name $name -> $name
    void visit(java.lang.Object) -> visit
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnd() -> visitEnd
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl$loadAnnotation$1,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializationComponentsForJava -> kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializationComponentsForJava:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents components -> components
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents getComponents() -> getComponents
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration,kotlin.reflect.jvm.internal.impl.load.kotlin.JavaClassDataFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.BinaryClassAnnotationAndConstantLoaderImpl,kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer,kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver -> kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents components -> components
    java.util.Set KOTLIN_CLASS -> KOTLIN_CLASS
    java.util.Set KOTLIN_FILE_FACADE_OR_MULTIFILE_CLASS_PART -> KOTLIN_FILE_FACADE_OR_MULTIFILE_CLASS_PART
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion KOTLIN_1_1_EAP_METADATA_VERSION -> KOTLIN_1_1_EAP_METADATA_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion KOTLIN_1_3_M1_METADATA_VERSION -> KOTLIN_1_3_M1_METADATA_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion KOTLIN_1_3_RC_METADATA_VERSION -> KOTLIN_1_3_RC_METADATA_VERSION
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents getComponents() -> getComponents
    void setComponents(kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializationComponentsForJava) -> setComponents
    boolean getSkipMetadataVersionCheck() -> getSkipMetadataVersionCheck
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> resolveClass
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData readClassData$descriptors_jvm(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> readClassData$descriptors_jvm
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope createKotlinPackagePartScope(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> createKotlinPackagePartScope
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData getIncompatibility(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> getIncompatibility
    boolean isPreReleaseInvisible(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> isPreReleaseInvisible
    boolean isCompiledWith13M1(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> isCompiledWith13M1
    java.lang.String[] readData(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass,java.util.Set) -> readData
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean access$getSkipMetadataVersionCheck$p(kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver) -> access$getSkipMetadataVersionCheck$p
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion access$getKOTLIN_1_3_RC_METADATA_VERSION$cp() -> access$getKOTLIN_1_3_RC_METADATA_VERSION$cp
kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$Companion -> kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$Companion:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion getKOTLIN_1_3_RC_METADATA_VERSION$descriptors_jvm() -> getKOTLIN_1_3_RC_METADATA_VERSION$descriptors_jvm
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$createKotlinPackagePartScope$2 -> kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$createKotlinPackagePartScope$2:
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver$createKotlinPackagePartScope$2 INSTANCE -> INSTANCE
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.InlineClassMappingKt -> kotlin.reflect.jvm.internal.impl.load.kotlin.InlineClassMappingKt:
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker computeExpandedTypeForInlineClass(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> computeExpandedTypeForInlineClass
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker computeExpandedTypeInner(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,java.util.HashSet) -> computeExpandedTypeInner
kotlin.reflect.jvm.internal.impl.load.kotlin.JavaClassDataFinder -> kotlin.reflect.jvm.internal.impl.load.kotlin.JavaClassDataFinder:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder kotlinClassFinder -> kotlinClassFinder
    kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver deserializedDescriptorResolver -> deserializedDescriptorResolver
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData findClassData(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassData
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.kotlin.DeserializedDescriptorResolver) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JavaFlexibleTypeDeserializer -> kotlin.reflect.jvm.internal.impl.load.kotlin.JavaFlexibleTypeDeserializer:
    kotlin.reflect.jvm.internal.impl.load.kotlin.JavaFlexibleTypeDeserializer INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.KotlinType create(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,java.lang.String,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> create
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmDescriptorTypeWriter -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmDescriptorTypeWriter:
    int jvmCurrentTypeArrayLevel -> jvmCurrentTypeArrayLevel
    java.lang.Object jvmCurrentType -> jvmCurrentType
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory jvmTypeFactory -> jvmTypeFactory
    void writeArrayType() -> writeArrayType
    void writeArrayEnd() -> writeArrayEnd
    void writeClass(java.lang.Object) -> writeClass
    void writeJvmTypeAsIs(java.lang.Object) -> writeJvmTypeAsIs
    void writeTypeVariable(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> writeTypeVariable
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmPackagePartSource -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmPackagePartSource:
    java.lang.String moduleName -> moduleName
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName className -> className
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName facadeClassName -> facadeClassName
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData incompatibility -> incompatibility
    boolean isPreReleaseInvisible -> isPreReleaseInvisible
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass knownJvmBinaryClass -> knownJvmBinaryClass
    java.lang.String getPresentableString() -> getPresentableString
    kotlin.reflect.jvm.internal.impl.name.Name getSimpleName() -> getSimpleName
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName getFacadeClassName() -> getFacadeClassName
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass getKnownJvmBinaryClass() -> getKnownJvmBinaryClass
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName,kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData,boolean,kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType:
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Array -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Array:
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType elementType -> elementType
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType getElementType() -> getElementType
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Object -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Object:
    java.lang.String internalName -> internalName
    java.lang.String getInternalName() -> getInternalName
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Primitive -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Primitive:
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType jvmPrimitiveType -> jvmPrimitiveType
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType getJvmPrimitiveType() -> getJvmPrimitiveType
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory:
    java.lang.Object boxType(java.lang.Object) -> boxType
    java.lang.Object createFromString(java.lang.String) -> createFromString
    java.lang.Object createObjectType(java.lang.String) -> createObjectType
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.Object getJavaLangClassType() -> getJavaLangClassType
kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactoryImpl -> kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactoryImpl:
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactoryImpl INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType boxType(kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType) -> boxType
    java.lang.Object boxType(java.lang.Object) -> boxType
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType createFromString(java.lang.String) -> createFromString
    java.lang.Object createFromString(java.lang.String) -> createFromString
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType$Object createObjectType(java.lang.String) -> createObjectType
    java.lang.Object createObjectType(java.lang.String) -> createObjectType
    java.lang.String toString(kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType) -> toString
    java.lang.String toString(java.lang.Object) -> toString
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType getJavaLangClassType() -> getJavaLangClassType
    java.lang.Object getJavaLangClassType() -> getJavaLangClassType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result findKotlinClassOrContent(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findKotlinClassOrContent
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result findKotlinClassOrContent(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findKotlinClassOrContent
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass toKotlinJvmBinaryClass() -> toKotlinJvmBinaryClass
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result$ClassFileContent -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result$ClassFileContent:
    byte[] content -> content
    byte[] getContent() -> getContent
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result$KotlinClass -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder$Result$KotlinClass:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass kotlinJvmBinaryClass -> kotlinJvmBinaryClass
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass getKotlinJvmBinaryClass() -> getKotlinJvmBinaryClass
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinderKt -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinderKt:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass findKotlinClass(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.name.ClassId) -> findKotlinClass
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass findKotlinClass(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinClassFinder,kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> findKotlinClass
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass:
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    java.lang.String getLocation() -> getLocation
    void loadClassAnnotations(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor,byte[]) -> loadClassAnnotations
    void visitMembers(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor,byte[]) -> visitMembers
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader getClassHeader() -> getClassHeader
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor:
    void visit(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> visit
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId) -> visitAnnotation
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor visitArray(kotlin.reflect.jvm.internal.impl.name.Name) -> visitArray
    void visitEnd() -> visitEnd
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor:
    void visit(java.lang.Object) -> visit
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnd() -> visitEnd
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitAnnotation
    void visitEnd() -> visitEnd
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MemberVisitor:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MethodAnnotationVisitor visitMethod(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String) -> visitMethod
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationVisitor visitField(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.String,java.lang.Object) -> visitField
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MethodAnnotationVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$MethodAnnotationVisitor:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitParameterAnnotation(int,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitParameterAnnotation
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryPackageSourceElement -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryPackageSourceElement:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment packageFragment -> packageFragment
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.descriptors.LazyJavaPackageFragment) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinarySourceElement -> kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinarySourceElement:
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass binaryClass -> binaryClass
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData incompatibility -> incompatibility
    boolean isPreReleaseInvisible -> isPreReleaseInvisible
    java.lang.String getPresentableString() -> getPresentableString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile() -> getContainingFile
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass getBinaryClass() -> getBinaryClass
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass,kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature -> kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature:
    java.lang.String signature -> signature
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature$Companion Companion -> Companion
    java.lang.String getSignature$descriptors_jvm() -> getSignature$descriptors_jvm
    void <init>(java.lang.String) -> <init>
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature$Companion -> kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature$Companion:
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature fromMethod(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> fromMethod
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature fromMethodNameAndDesc(java.lang.String,java.lang.String) -> fromMethodNameAndDesc
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature fromFieldNameAndDesc(java.lang.String,java.lang.String) -> fromFieldNameAndDesc
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature fromJvmMemberSignature(kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature) -> fromJvmMemberSignature
    kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature fromMethodSignatureAndParameterIndex(kotlin.reflect.jvm.internal.impl.load.kotlin.MemberSignature,int) -> fromMethodSignatureAndParameterIndex
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.MethodSignatureMappingKt -> kotlin.reflect.jvm.internal.impl.load.kotlin.MethodSignatureMappingKt:
    java.lang.String computeJvmDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,boolean,boolean) -> computeJvmDescriptor
    java.lang.String computeJvmDescriptor$default(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,boolean,boolean,int,java.lang.Object) -> computeJvmDescriptor$default
    boolean forceSingleValueParameterBoxing(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> forceSingleValueParameterBoxing
    java.lang.String computeJvmSignature(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> computeJvmSignature
    java.lang.String getInternalName(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getInternalName
    void appendErasedType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> appendErasedType
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType mapToJvmType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> mapToJvmType
kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider -> kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider:
    java.util.List findPackageParts(java.lang.String) -> findPackageParts
kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider$Empty -> kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider$Empty:
    kotlin.reflect.jvm.internal.impl.load.kotlin.PackagePartProvider$Empty INSTANCE -> INSTANCE
    java.util.List findPackageParts(java.lang.String) -> findPackageParts
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents -> kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents INSTANCE -> INSTANCE
    java.lang.String javaLang(java.lang.String) -> javaLang
    java.lang.String javaUtil(java.lang.String) -> javaUtil
    java.lang.String javaFunction(java.lang.String) -> javaFunction
    java.lang.String[] constructors(java.lang.String[]) -> constructors
    java.util.LinkedHashSet inJavaLang(java.lang.String,java.lang.String[]) -> inJavaLang
    java.util.LinkedHashSet inJavaUtil(java.lang.String,java.lang.String[]) -> inJavaUtil
    java.util.LinkedHashSet inClass(java.lang.String,java.lang.String[]) -> inClass
    java.lang.String signature(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.String) -> signature
    java.lang.String signature(java.lang.String,java.lang.String) -> signature
    java.lang.String jvmDescriptor(java.lang.String,java.util.List,java.lang.String) -> jvmDescriptor
    java.lang.String escapeClassName(java.lang.String) -> escapeClassName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.String access$escapeClassName(kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents,java.lang.String) -> access$escapeClassName
kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents$jvmDescriptor$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents$jvmDescriptor$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.SignatureBuildingComponents$jvmDescriptor$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(java.lang.String) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration:
    kotlin.reflect.jvm.internal.impl.types.KotlinType commonSupertype(java.util.Collection) -> commonSupertype
    java.lang.Object getPredefinedTypeForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedTypeForClass
    java.lang.String getPredefinedInternalNameForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedInternalNameForClass
    java.lang.String getPredefinedFullInternalNameForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedFullInternalNameForClass
    void processErrorType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> processErrorType
    kotlin.reflect.jvm.internal.impl.types.KotlinType preprocessType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> preprocessType
    boolean releaseCoroutines() -> releaseCoroutines
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration$DefaultImpls -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration$DefaultImpls:
    java.lang.String getPredefinedFullInternalNameForClass(kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedFullInternalNameForClass
    kotlin.reflect.jvm.internal.impl.types.KotlinType preprocessType(kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> preprocessType
    boolean releaseCoroutines(kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration) -> releaseCoroutines
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfigurationImpl -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfigurationImpl:
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfigurationImpl INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.KotlinType commonSupertype(java.util.Collection) -> commonSupertype
    kotlin.reflect.jvm.internal.impl.load.kotlin.JvmType getPredefinedTypeForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedTypeForClass
    java.lang.Object getPredefinedTypeForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedTypeForClass
    java.lang.String getPredefinedInternalNameForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedInternalNameForClass
    void processErrorType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> processErrorType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.String getPredefinedFullInternalNameForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getPredefinedFullInternalNameForClass
    kotlin.reflect.jvm.internal.impl.types.KotlinType preprocessType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> preprocessType
    boolean releaseCoroutines() -> releaseCoroutines
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode:
    boolean needPrimitiveBoxing -> needPrimitiveBoxing
    boolean needInlineClassWrapping -> needInlineClassWrapping
    boolean isForAnnotationParameter -> isForAnnotationParameter
    boolean skipDeclarationSiteWildcards -> skipDeclarationSiteWildcards
    boolean skipDeclarationSiteWildcardsIfPossible -> skipDeclarationSiteWildcardsIfPossible
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode genericArgumentMode -> genericArgumentMode
    boolean kotlinCollectionsToJavaCollections -> kotlinCollectionsToJavaCollections
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode genericContravariantArgumentMode -> genericContravariantArgumentMode
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode genericInvariantArgumentMode -> genericInvariantArgumentMode
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode GENERIC_ARGUMENT -> GENERIC_ARGUMENT
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode RETURN_TYPE_BOXED -> RETURN_TYPE_BOXED
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode DEFAULT -> DEFAULT
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode CLASS_DECLARATION -> CLASS_DECLARATION
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode SUPER_TYPE -> SUPER_TYPE
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode SUPER_TYPE_KOTLIN_COLLECTIONS_AS_IS -> SUPER_TYPE_KOTLIN_COLLECTIONS_AS_IS
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode VALUE_FOR_ANNOTATION -> VALUE_FOR_ANNOTATION
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode toGenericArgumentMode(kotlin.reflect.jvm.internal.impl.types.Variance) -> toGenericArgumentMode
    kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode wrapInlineClassesMode() -> wrapInlineClassesMode
    boolean getNeedPrimitiveBoxing() -> getNeedPrimitiveBoxing
    boolean getNeedInlineClassWrapping() -> getNeedInlineClassWrapping
    boolean isForAnnotationParameter() -> isForAnnotationParameter
    boolean getKotlinCollectionsToJavaCollections() -> getKotlinCollectionsToJavaCollections
    void <init>(boolean,boolean,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,boolean,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode) -> <init>
    void <init>(boolean,boolean,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,boolean,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode$Companion -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode$WhenMappings -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.load.kotlin.TypeSignatureMappingKt -> kotlin.reflect.jvm.internal.impl.load.kotlin.TypeSignatureMappingKt:
    java.lang.Object boxTypeIfNeeded(kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory,java.lang.Object,boolean) -> boxTypeIfNeeded
    java.lang.Object mapType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration,kotlin.reflect.jvm.internal.impl.load.kotlin.JvmDescriptorTypeWriter,kotlin.jvm.functions.Function3) -> mapType
    java.lang.Object mapType$default(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration,kotlin.reflect.jvm.internal.impl.load.kotlin.JvmDescriptorTypeWriter,kotlin.jvm.functions.Function3,int,java.lang.Object) -> mapType$default
    boolean hasVoidReturnType(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> hasVoidReturnType
    java.lang.Object mapBuiltInType(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.load.kotlin.JvmTypeFactory,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingMode) -> mapBuiltInType
    java.lang.String computeInternalName(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration) -> computeInternalName
    java.lang.String computeInternalName$default(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.load.kotlin.TypeMappingConfiguration,int,java.lang.Object) -> computeInternalName$default
kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind kind -> kind
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion metadataVersion -> metadataVersion
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion bytecodeVersion -> bytecodeVersion
    java.lang.String[] data -> data
    java.lang.String[] incompatibleData -> incompatibleData
    java.lang.String[] strings -> strings
    java.lang.String extraString -> extraString
    int extraInt -> extraInt
    java.lang.String packageName -> packageName
    java.lang.String getMultifileClassName() -> getMultifileClassName
    java.util.List getMultifilePartNames() -> getMultifilePartNames
    boolean isPreRelease() -> isPreRelease
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion getMetadataVersion() -> getMetadataVersion
    java.lang.String[] getData() -> getData
    java.lang.String[] getIncompatibleData() -> getIncompatibleData
    java.lang.String[] getStrings() -> getStrings
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind,kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion,kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,int,java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind UNKNOWN -> UNKNOWN
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind FILE_FACADE -> FILE_FACADE
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind SYNTHETIC_CLASS -> SYNTHETIC_CLASS
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind MULTIFILE_CLASS -> MULTIFILE_CLASS
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind MULTIFILE_CLASS_PART -> MULTIFILE_CLASS_PART
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind[] $VALUES -> $VALUES
    int id -> id
    java.util.Map entryById -> entryById
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,int) -> <init>
    java.util.Map access$getEntryById$cp() -> access$getEntryById$cp
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind valueOf(java.lang.String) -> valueOf
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind getById(int) -> getById
kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind$Companion -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind$Companion:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind getById(int) -> getById
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor:
    boolean IGNORE_OLD_METADATA -> IGNORE_OLD_METADATA
    java.util.Map HEADER_KINDS -> HEADER_KINDS
    int[] metadataVersionArray -> metadataVersionArray
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion bytecodeVersion -> bytecodeVersion
    java.lang.String extraString -> extraString
    int extraInt -> extraInt
    java.lang.String packageName -> packageName
    java.lang.String[] data -> data
    java.lang.String[] strings -> strings
    java.lang.String[] incompatibleData -> incompatibleData
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind headerKind -> headerKind
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader createHeader() -> createHeader
    boolean shouldHaveData() -> shouldHaveData
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> visitAnnotation
    void visitEnd() -> visitEnd
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind access$202(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader$Kind) -> access$202
    int[] access$302(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,int[]) -> access$302
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion access$402(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion) -> access$402
    java.lang.String access$502(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,java.lang.String) -> access$502
    int access$602(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,int) -> access$602
    java.lang.String access$702(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,java.lang.String) -> access$702
    java.lang.String[] access$802(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,java.lang.String[]) -> access$802
    java.lang.String[] access$902(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,java.lang.String[]) -> access$902
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion access$400(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor) -> access$400
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$1:
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$CollectStringArrayAnnotationVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$CollectStringArrayAnnotationVisitor:
    java.util.List strings -> strings
    void <init>() -> <init>
    void visit(java.lang.Object) -> visit
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    void visitEnd() -> visitEnd
    void visitEnd(java.lang.String[]) -> visitEnd
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor) -> <init>
    void visit(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> visit
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor visitArray(kotlin.reflect.jvm.internal.impl.name.Name) -> visitArray
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor dataArrayVisitor() -> dataArrayVisitor
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor stringsArrayVisitor() -> stringsArrayVisitor
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId) -> visitAnnotation
    void visitEnd() -> visitEnd
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor) -> <init>
    void visitEnd(java.lang.String[]) -> visitEnd
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor$2 -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor$2:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$KotlinMetadataArgumentVisitor) -> <init>
    void visitEnd(java.lang.String[]) -> visitEnd
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor) -> <init>
    void visit(kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Object) -> visit
    void visitClassLiteral(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> visitClassLiteral
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor visitArray(kotlin.reflect.jvm.internal.impl.name.Name) -> visitArray
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor dataArrayVisitor() -> dataArrayVisitor
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArrayArgumentVisitor stringsArrayVisitor() -> stringsArrayVisitor
    void visitEnum(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> visitEnum
    kotlin.reflect.jvm.internal.impl.load.kotlin.KotlinJvmBinaryClass$AnnotationArgumentVisitor visitAnnotation(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.name.ClassId) -> visitAnnotation
    void visitEnd() -> visitEnd
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor,kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor$1 -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor$1:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor) -> <init>
    void visitEnd(java.lang.String[]) -> visitEnd
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor$2 -> kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor$2:
    kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor this$1 -> this$1
    void <init>(kotlin.reflect.jvm.internal.impl.load.kotlin.header.ReadKotlinClassHeaderAnnotationVisitor$OldDeprecatedAnnotationArgumentVisitor) -> <init>
    void visitEnd(java.lang.String[]) -> visitEnd
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int id_ -> id_
    java.util.List argument_ -> argument_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasId() -> hasId
    int getId() -> getId
    java.util.List getArgumentList() -> getArgumentList
    int getArgumentCount() -> getArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument getArgument(int) -> getArgument
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$4402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,int) -> access$4402
    java.util.List access$4502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,java.util.List) -> access$4502
    int access$4602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,int) -> access$4602
    java.util.List access$4500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> access$4500
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$4700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> access$4700
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int nameId_ -> nameId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value value_ -> value_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasNameId() -> hasNameId
    int getNameId() -> getNameId
    boolean hasValue() -> hasValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getValue() -> getValue
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$3802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument,int) -> access$3802
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value access$3902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> access$3902
    int access$4002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument,int) -> access$4002
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$4100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument) -> access$4100
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder:
    int bitField0_ -> bitField0_
    int nameId_ -> nameId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value value_ -> value_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    boolean hasNameId() -> hasNameId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder setNameId(int) -> setNameId
    boolean hasValue() -> hasValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getValue() -> getValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder mergeValue(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> mergeValue
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Builder access$3600() -> access$3600
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type type_ -> type_
    long intValue_ -> intValue_
    float floatValue_ -> floatValue_
    double doubleValue_ -> doubleValue_
    int stringValue_ -> stringValue_
    int classId_ -> classId_
    int enumValueId_ -> enumValueId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation annotation_ -> annotation_
    java.util.List arrayElement_ -> arrayElement_
    int arrayDimensionCount_ -> arrayDimensionCount_
    int flags_ -> flags_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasType() -> hasType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type getType() -> getType
    boolean hasIntValue() -> hasIntValue
    long getIntValue() -> getIntValue
    boolean hasFloatValue() -> hasFloatValue
    float getFloatValue() -> getFloatValue
    boolean hasDoubleValue() -> hasDoubleValue
    double getDoubleValue() -> getDoubleValue
    boolean hasStringValue() -> hasStringValue
    int getStringValue() -> getStringValue
    boolean hasClassId() -> hasClassId
    int getClassId() -> getClassId
    boolean hasEnumValueId() -> hasEnumValueId
    int getEnumValueId() -> getEnumValueId
    boolean hasAnnotation() -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getAnnotation() -> getAnnotation
    java.util.List getArrayElementList() -> getArrayElementList
    int getArrayElementCount() -> getArrayElementCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getArrayElement(int) -> getArrayElement
    boolean hasArrayDimensionCount() -> hasArrayDimensionCount
    int getArrayDimensionCount() -> getArrayDimensionCount
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type access$2302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type) -> access$2302
    long access$2402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,long) -> access$2402
    float access$2502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,float) -> access$2502
    double access$2602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,double) -> access$2602
    int access$2702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$2702
    int access$2802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$2802
    int access$2902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$2902
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation access$3002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> access$3002
    java.util.List access$3102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,java.util.List) -> access$3102
    int access$3202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$3202
    int access$3302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$3302
    int access$3402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,int) -> access$3402
    java.util.List access$3100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> access$3100
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$3500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> access$3500
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type type_ -> type_
    long intValue_ -> intValue_
    float floatValue_ -> floatValue_
    double doubleValue_ -> doubleValue_
    int stringValue_ -> stringValue_
    int classId_ -> classId_
    int enumValueId_ -> enumValueId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation annotation_ -> annotation_
    java.util.List arrayElement_ -> arrayElement_
    int arrayDimensionCount_ -> arrayDimensionCount_
    int flags_ -> flags_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type) -> setType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setIntValue(long) -> setIntValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setFloatValue(float) -> setFloatValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setDoubleValue(double) -> setDoubleValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setStringValue(int) -> setStringValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setClassId(int) -> setClassId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setEnumValueId(int) -> setEnumValueId
    boolean hasAnnotation() -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getAnnotation() -> getAnnotation
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder mergeAnnotation(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> mergeAnnotation
    void ensureArrayElementIsMutable() -> ensureArrayElementIsMutable
    int getArrayElementCount() -> getArrayElementCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value getArrayElement(int) -> getArrayElement
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setArrayDimensionCount(int) -> setArrayDimensionCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder setFlags(int) -> setFlags
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Builder access$2100() -> access$2100
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type BYTE -> BYTE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type CHAR -> CHAR
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type SHORT -> SHORT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type INT -> INT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type LONG -> LONG
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type FLOAT -> FLOAT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type DOUBLE -> DOUBLE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type BOOLEAN -> BOOLEAN
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type STRING -> STRING
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type ENUM -> ENUM
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type ANNOTATION -> ANNOTATION
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type ARRAY -> ARRAY
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value$Type findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$ValueOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$ValueOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$ArgumentOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$ArgumentOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder:
    int bitField0_ -> bitField0_
    int id_ -> id_
    java.util.List argument_ -> argument_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    boolean hasId() -> hasId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder setId(int) -> setId
    void ensureArgumentIsMutable() -> ensureArgumentIsMutable
    int getArgumentCount() -> getArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument getArgument(int) -> getArgument
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Builder access$4200() -> access$4200
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$AnnotationOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$AnnotationOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int fqName_ -> fqName_
    int companionObjectName_ -> companionObjectName_
    java.util.List typeParameter_ -> typeParameter_
    java.util.List supertype_ -> supertype_
    java.util.List supertypeId_ -> supertypeId_
    int supertypeIdMemoizedSerializedSize -> supertypeIdMemoizedSerializedSize
    java.util.List nestedClassName_ -> nestedClassName_
    int nestedClassNameMemoizedSerializedSize -> nestedClassNameMemoizedSerializedSize
    java.util.List constructor_ -> constructor_
    java.util.List function_ -> function_
    java.util.List property_ -> property_
    java.util.List typeAlias_ -> typeAlias_
    java.util.List enumEntry_ -> enumEntry_
    java.util.List sealedSubclassFqName_ -> sealedSubclassFqName_
    int sealedSubclassFqNameMemoizedSerializedSize -> sealedSubclassFqNameMemoizedSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    java.util.List versionRequirement_ -> versionRequirement_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable versionRequirementTable_ -> versionRequirementTable_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasFqName() -> hasFqName
    int getFqName() -> getFqName
    boolean hasCompanionObjectName() -> hasCompanionObjectName
    int getCompanionObjectName() -> getCompanionObjectName
    java.util.List getTypeParameterList() -> getTypeParameterList
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    java.util.List getSupertypeList() -> getSupertypeList
    int getSupertypeCount() -> getSupertypeCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getSupertype(int) -> getSupertype
    java.util.List getSupertypeIdList() -> getSupertypeIdList
    java.util.List getNestedClassNameList() -> getNestedClassNameList
    java.util.List getConstructorList() -> getConstructorList
    int getConstructorCount() -> getConstructorCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getConstructor(int) -> getConstructor
    java.util.List getFunctionList() -> getFunctionList
    int getFunctionCount() -> getFunctionCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getFunction(int) -> getFunction
    java.util.List getPropertyList() -> getPropertyList
    int getPropertyCount() -> getPropertyCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProperty(int) -> getProperty
    java.util.List getTypeAliasList() -> getTypeAliasList
    int getTypeAliasCount() -> getTypeAliasCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getTypeAlias(int) -> getTypeAlias
    java.util.List getEnumEntryList() -> getEnumEntryList
    int getEnumEntryCount() -> getEnumEntryCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry getEnumEntry(int) -> getEnumEntry
    java.util.List getSealedSubclassFqNameList() -> getSealedSubclassFqNameList
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    java.util.List getVersionRequirementList() -> getVersionRequirementList
    boolean hasVersionRequirementTable() -> hasVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$8902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,int) -> access$8902
    int access$9002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,int) -> access$9002
    int access$9102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,int) -> access$9102
    java.util.List access$9202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9202
    java.util.List access$9302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9302
    java.util.List access$9402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9402
    java.util.List access$9502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9502
    java.util.List access$9602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9602
    java.util.List access$9702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9702
    java.util.List access$9802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9802
    java.util.List access$9902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$9902
    java.util.List access$10002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$10002
    java.util.List access$10102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$10102
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable access$10202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> access$10202
    java.util.List access$10302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,java.util.List) -> access$10302
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable access$10402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> access$10402
    int access$10502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,int) -> access$10502
    java.util.List access$9200(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9200
    java.util.List access$9300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9300
    java.util.List access$9400(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9400
    java.util.List access$9500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9500
    java.util.List access$9600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9600
    java.util.List access$9700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9700
    java.util.List access$9800(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9800
    java.util.List access$9900(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$9900
    java.util.List access$10000(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$10000
    java.util.List access$10100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$10100
    java.util.List access$10300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$10300
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$10600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> access$10600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int fqName_ -> fqName_
    int companionObjectName_ -> companionObjectName_
    java.util.List typeParameter_ -> typeParameter_
    java.util.List supertype_ -> supertype_
    java.util.List supertypeId_ -> supertypeId_
    java.util.List nestedClassName_ -> nestedClassName_
    java.util.List constructor_ -> constructor_
    java.util.List function_ -> function_
    java.util.List property_ -> property_
    java.util.List typeAlias_ -> typeAlias_
    java.util.List enumEntry_ -> enumEntry_
    java.util.List sealedSubclassFqName_ -> sealedSubclassFqName_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    java.util.List versionRequirement_ -> versionRequirement_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable versionRequirementTable_ -> versionRequirementTable_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder setFlags(int) -> setFlags
    boolean hasFqName() -> hasFqName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder setFqName(int) -> setFqName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder setCompanionObjectName(int) -> setCompanionObjectName
    void ensureTypeParameterIsMutable() -> ensureTypeParameterIsMutable
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    void ensureSupertypeIsMutable() -> ensureSupertypeIsMutable
    int getSupertypeCount() -> getSupertypeCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getSupertype(int) -> getSupertype
    void ensureSupertypeIdIsMutable() -> ensureSupertypeIdIsMutable
    void ensureNestedClassNameIsMutable() -> ensureNestedClassNameIsMutable
    void ensureConstructorIsMutable() -> ensureConstructorIsMutable
    int getConstructorCount() -> getConstructorCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getConstructor(int) -> getConstructor
    void ensureFunctionIsMutable() -> ensureFunctionIsMutable
    int getFunctionCount() -> getFunctionCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getFunction(int) -> getFunction
    void ensurePropertyIsMutable() -> ensurePropertyIsMutable
    int getPropertyCount() -> getPropertyCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProperty(int) -> getProperty
    void ensureTypeAliasIsMutable() -> ensureTypeAliasIsMutable
    int getTypeAliasCount() -> getTypeAliasCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getTypeAlias(int) -> getTypeAlias
    void ensureEnumEntryIsMutable() -> ensureEnumEntryIsMutable
    int getEnumEntryCount() -> getEnumEntryCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry getEnumEntry(int) -> getEnumEntry
    void ensureSealedSubclassFqNameIsMutable() -> ensureSealedSubclassFqNameIsMutable
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder mergeTypeTable(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> mergeTypeTable
    void ensureVersionRequirementIsMutable() -> ensureVersionRequirementIsMutable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder mergeVersionRequirementTable(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> mergeVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Builder access$8700() -> access$8700
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind INTERFACE -> INTERFACE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind ENUM_CLASS -> ENUM_CLASS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind ENUM_ENTRY -> ENUM_ENTRY
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind ANNOTATION_CLASS -> ANNOTATION_CLASS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind OBJECT -> OBJECT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind COMPANION_OBJECT -> COMPANION_OBJECT
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ClassOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ClassOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    java.util.List valueParameter_ -> valueParameter_
    java.util.List versionRequirement_ -> versionRequirement_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    java.util.List getValueParameterList() -> getValueParameterList
    int getValueParameterCount() -> getValueParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getValueParameter(int) -> getValueParameter
    java.util.List getVersionRequirementList() -> getVersionRequirementList
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$12702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,int) -> access$12702
    java.util.List access$12802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,java.util.List) -> access$12802
    java.util.List access$12902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,java.util.List) -> access$12902
    int access$13002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,int) -> access$13002
    java.util.List access$12800(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor) -> access$12800
    java.util.List access$12900(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor) -> access$12900
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$13100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor) -> access$13100
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    java.util.List valueParameter_ -> valueParameter_
    java.util.List versionRequirement_ -> versionRequirement_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder setFlags(int) -> setFlags
    void ensureValueParameterIsMutable() -> ensureValueParameterIsMutable
    int getValueParameterCount() -> getValueParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getValueParameter(int) -> getValueParameter
    void ensureVersionRequirementIsMutable() -> ensureVersionRequirementIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor$Builder access$12500() -> access$12500
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ConstructorOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ConstructorOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    java.util.List effect_ -> effect_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    int getEffectCount() -> getEffectCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect getEffect(int) -> getEffect
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$22502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract,java.util.List) -> access$22502
    java.util.List access$22500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> access$22500
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$22600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> access$22600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder:
    int bitField0_ -> bitField0_
    java.util.List effect_ -> effect_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureEffectIsMutable() -> ensureEffectIsMutable
    int getEffectCount() -> getEffectCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect getEffect(int) -> getEffect
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract$Builder access$22300() -> access$22300
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ContractOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ContractOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType effectType_ -> effectType_
    java.util.List effectConstructorArgument_ -> effectConstructorArgument_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression conclusionOfConditionalEffect_ -> conclusionOfConditionalEffect_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind kind_ -> kind_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasEffectType() -> hasEffectType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType getEffectType() -> getEffectType
    int getEffectConstructorArgumentCount() -> getEffectConstructorArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getEffectConstructorArgument(int) -> getEffectConstructorArgument
    boolean hasConclusionOfConditionalEffect() -> hasConclusionOfConditionalEffect
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getConclusionOfConditionalEffect() -> getConclusionOfConditionalEffect
    boolean hasKind() -> hasKind
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind getKind() -> getKind
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType access$23002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType) -> access$23002
    java.util.List access$23102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect,java.util.List) -> access$23102
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression access$23202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> access$23202
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind access$23302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind) -> access$23302
    int access$23402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect,int) -> access$23402
    java.util.List access$23100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect) -> access$23100
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$23500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect) -> access$23500
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType effectType_ -> effectType_
    java.util.List effectConstructorArgument_ -> effectConstructorArgument_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression conclusionOfConditionalEffect_ -> conclusionOfConditionalEffect_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind kind_ -> kind_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder setEffectType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType) -> setEffectType
    void ensureEffectConstructorArgumentIsMutable() -> ensureEffectConstructorArgumentIsMutable
    int getEffectConstructorArgumentCount() -> getEffectConstructorArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getEffectConstructorArgument(int) -> getEffectConstructorArgument
    boolean hasConclusionOfConditionalEffect() -> hasConclusionOfConditionalEffect
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getConclusionOfConditionalEffect() -> getConclusionOfConditionalEffect
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder mergeConclusionOfConditionalEffect(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> mergeConclusionOfConditionalEffect
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder setKind(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind) -> setKind
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$Builder access$22800() -> access$22800
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType RETURNS_CONSTANT -> RETURNS_CONSTANT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType CALLS -> CALLS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType RETURNS_NOT_NULL -> RETURNS_NOT_NULL
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$EffectType findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind AT_MOST_ONCE -> AT_MOST_ONCE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind EXACTLY_ONCE -> EXACTLY_ONCE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind AT_LEAST_ONCE -> AT_LEAST_ONCE
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Effect$InvocationKind findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EffectOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EffectOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int name_ -> name_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasName() -> hasName
    int getName() -> getName
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$19402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry,int) -> access$19402
    int access$19502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry,int) -> access$19502
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$19600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> access$19600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder:
    int bitField0_ -> bitField0_
    int name_ -> name_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder setName(int) -> setName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry$Builder access$19200() -> access$19200
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntryOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntryOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int valueParameterReference_ -> valueParameterReference_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue constantValue_ -> constantValue_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type isInstanceType_ -> isInstanceType_
    int isInstanceTypeId_ -> isInstanceTypeId_
    java.util.List andArgument_ -> andArgument_
    java.util.List orArgument_ -> orArgument_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasValueParameterReference() -> hasValueParameterReference
    int getValueParameterReference() -> getValueParameterReference
    boolean hasConstantValue() -> hasConstantValue
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue getConstantValue() -> getConstantValue
    boolean hasIsInstanceType() -> hasIsInstanceType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getIsInstanceType() -> getIsInstanceType
    boolean hasIsInstanceTypeId() -> hasIsInstanceTypeId
    int getIsInstanceTypeId() -> getIsInstanceTypeId
    int getAndArgumentCount() -> getAndArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getAndArgument(int) -> getAndArgument
    int getOrArgumentCount() -> getOrArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getOrArgument(int) -> getOrArgument
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$23902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,int) -> access$23902
    int access$24002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,int) -> access$24002
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue access$24102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue) -> access$24102
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$24202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$24202
    int access$24302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,int) -> access$24302
    java.util.List access$24402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,java.util.List) -> access$24402
    java.util.List access$24502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,java.util.List) -> access$24502
    int access$24602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression,int) -> access$24602
    java.util.List access$24400(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> access$24400
    java.util.List access$24500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> access$24500
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$24700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> access$24700
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int valueParameterReference_ -> valueParameterReference_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue constantValue_ -> constantValue_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type isInstanceType_ -> isInstanceType_
    int isInstanceTypeId_ -> isInstanceTypeId_
    java.util.List andArgument_ -> andArgument_
    java.util.List orArgument_ -> orArgument_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder setFlags(int) -> setFlags
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder setValueParameterReference(int) -> setValueParameterReference
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder setConstantValue(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue) -> setConstantValue
    boolean hasIsInstanceType() -> hasIsInstanceType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getIsInstanceType() -> getIsInstanceType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder mergeIsInstanceType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeIsInstanceType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder setIsInstanceTypeId(int) -> setIsInstanceTypeId
    void ensureAndArgumentIsMutable() -> ensureAndArgumentIsMutable
    int getAndArgumentCount() -> getAndArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getAndArgument(int) -> getAndArgument
    void ensureOrArgumentIsMutable() -> ensureOrArgumentIsMutable
    int getOrArgumentCount() -> getOrArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression getOrArgument(int) -> getOrArgument
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$Builder access$23700() -> access$23700
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue TRUE -> TRUE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue FALSE -> FALSE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue NULL -> NULL
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Expression$ConstantValue findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ExpressionOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ExpressionOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int oldFlags_ -> oldFlags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType_ -> returnType_
    int returnTypeId_ -> returnTypeId_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType_ -> receiverType_
    int receiverTypeId_ -> receiverTypeId_
    java.util.List valueParameter_ -> valueParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    java.util.List versionRequirement_ -> versionRequirement_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract contract_ -> contract_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasOldFlags() -> hasOldFlags
    int getOldFlags() -> getOldFlags
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasReturnType() -> hasReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReturnType() -> getReturnType
    boolean hasReturnTypeId() -> hasReturnTypeId
    int getReturnTypeId() -> getReturnTypeId
    java.util.List getTypeParameterList() -> getTypeParameterList
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasReceiverType() -> hasReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReceiverType() -> getReceiverType
    boolean hasReceiverTypeId() -> hasReceiverTypeId
    int getReceiverTypeId() -> getReceiverTypeId
    java.util.List getValueParameterList() -> getValueParameterList
    int getValueParameterCount() -> getValueParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getValueParameter(int) -> getValueParameter
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    java.util.List getVersionRequirementList() -> getVersionRequirementList
    boolean hasContract() -> hasContract
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract getContract() -> getContract
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$13502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$13502
    int access$13602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$13602
    int access$13702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$13702
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$13802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$13802
    int access$13902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$13902
    java.util.List access$14002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,java.util.List) -> access$14002
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$14102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$14102
    int access$14202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$14202
    java.util.List access$14302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,java.util.List) -> access$14302
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable access$14402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> access$14402
    java.util.List access$14502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,java.util.List) -> access$14502
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract access$14602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> access$14602
    int access$14702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,int) -> access$14702
    java.util.List access$14000(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> access$14000
    java.util.List access$14300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> access$14300
    java.util.List access$14500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> access$14500
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$14800(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> access$14800
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int oldFlags_ -> oldFlags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType_ -> returnType_
    int returnTypeId_ -> returnTypeId_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType_ -> receiverType_
    int receiverTypeId_ -> receiverTypeId_
    java.util.List valueParameter_ -> valueParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    java.util.List versionRequirement_ -> versionRequirement_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract contract_ -> contract_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder setFlags(int) -> setFlags
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder setOldFlags(int) -> setOldFlags
    boolean hasName() -> hasName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder setName(int) -> setName
    boolean hasReturnType() -> hasReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeReturnType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder setReturnTypeId(int) -> setReturnTypeId
    void ensureTypeParameterIsMutable() -> ensureTypeParameterIsMutable
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasReceiverType() -> hasReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReceiverType() -> getReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeReceiverType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder setReceiverTypeId(int) -> setReceiverTypeId
    void ensureValueParameterIsMutable() -> ensureValueParameterIsMutable
    int getValueParameterCount() -> getValueParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getValueParameter(int) -> getValueParameter
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeTypeTable(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> mergeTypeTable
    void ensureVersionRequirementIsMutable() -> ensureVersionRequirementIsMutable
    boolean hasContract() -> hasContract
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract getContract() -> getContract
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder mergeContract(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Contract) -> mergeContract
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function$Builder access$13300() -> access$13300
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$FunctionOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$FunctionOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind DECLARATION -> DECLARATION
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind FAKE_OVERRIDE -> FAKE_OVERRIDE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind DELEGATION -> DELEGATION
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind SYNTHESIZED -> SYNTHESIZED
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality FINAL -> FINAL
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality OPEN -> OPEN
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality ABSTRACT -> ABSTRACT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality SEALED -> SEALED
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    java.util.List function_ -> function_
    java.util.List property_ -> property_
    java.util.List typeAlias_ -> typeAlias_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable versionRequirementTable_ -> versionRequirementTable_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getFunctionList() -> getFunctionList
    int getFunctionCount() -> getFunctionCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getFunction(int) -> getFunction
    java.util.List getPropertyList() -> getPropertyList
    int getPropertyCount() -> getPropertyCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProperty(int) -> getProperty
    java.util.List getTypeAliasList() -> getTypeAliasList
    int getTypeAliasCount() -> getTypeAliasCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getTypeAlias(int) -> getTypeAlias
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    boolean hasVersionRequirementTable() -> hasVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$11002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,java.util.List) -> access$11002
    java.util.List access$11102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,java.util.List) -> access$11102
    java.util.List access$11202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,java.util.List) -> access$11202
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable access$11302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> access$11302
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable access$11402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> access$11402
    int access$11502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,int) -> access$11502
    java.util.List access$11000(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> access$11000
    java.util.List access$11100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> access$11100
    java.util.List access$11200(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> access$11200
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$11600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> access$11600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder:
    int bitField0_ -> bitField0_
    java.util.List function_ -> function_
    java.util.List property_ -> property_
    java.util.List typeAlias_ -> typeAlias_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable typeTable_ -> typeTable_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable versionRequirementTable_ -> versionRequirementTable_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureFunctionIsMutable() -> ensureFunctionIsMutable
    int getFunctionCount() -> getFunctionCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getFunction(int) -> getFunction
    void ensurePropertyIsMutable() -> ensurePropertyIsMutable
    int getPropertyCount() -> getPropertyCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProperty(int) -> getProperty
    void ensureTypeAliasIsMutable() -> ensureTypeAliasIsMutable
    int getTypeAliasCount() -> getTypeAliasCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getTypeAlias(int) -> getTypeAlias
    boolean hasTypeTable() -> hasTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder mergeTypeTable(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> mergeTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder mergeVersionRequirementTable(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> mergeVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package$Builder access$10800() -> access$10800
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable strings_ -> strings_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable qualifiedNames_ -> qualifiedNames_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package package_ -> package_
    java.util.List class__ -> class__
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasStrings() -> hasStrings
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable getStrings() -> getStrings
    boolean hasQualifiedNames() -> hasQualifiedNames
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable getQualifiedNames() -> getQualifiedNames
    boolean hasPackage() -> hasPackage
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package getPackage() -> getPackage
    java.util.List getClass_List() -> getClass_List
    int getClass_Count() -> getClass_Count
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getClass_(int) -> getClass_
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable access$21602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> access$21602
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable access$21702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> access$21702
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package access$21802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> access$21802
    java.util.List access$21902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,java.util.List) -> access$21902
    int access$22002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,int) -> access$22002
    java.util.List access$21900(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment) -> access$21900
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$22100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment) -> access$22100
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable strings_ -> strings_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable qualifiedNames_ -> qualifiedNames_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package package_ -> package_
    java.util.List class__ -> class__
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder mergeStrings(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> mergeStrings
    boolean hasQualifiedNames() -> hasQualifiedNames
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable getQualifiedNames() -> getQualifiedNames
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder mergeQualifiedNames(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> mergeQualifiedNames
    boolean hasPackage() -> hasPackage
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package getPackage() -> getPackage
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder mergePackage(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package) -> mergePackage
    void ensureClass_IsMutable() -> ensureClass_IsMutable
    int getClass_Count() -> getClass_Count
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getClass_(int) -> getClass_
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment$Builder access$21400() -> access$21400
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragmentOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragmentOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int oldFlags_ -> oldFlags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType_ -> returnType_
    int returnTypeId_ -> returnTypeId_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType_ -> receiverType_
    int receiverTypeId_ -> receiverTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter setterValueParameter_ -> setterValueParameter_
    int getterFlags_ -> getterFlags_
    int setterFlags_ -> setterFlags_
    java.util.List versionRequirement_ -> versionRequirement_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasOldFlags() -> hasOldFlags
    int getOldFlags() -> getOldFlags
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasReturnType() -> hasReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReturnType() -> getReturnType
    boolean hasReturnTypeId() -> hasReturnTypeId
    int getReturnTypeId() -> getReturnTypeId
    java.util.List getTypeParameterList() -> getTypeParameterList
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasReceiverType() -> hasReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReceiverType() -> getReceiverType
    boolean hasReceiverTypeId() -> hasReceiverTypeId
    int getReceiverTypeId() -> getReceiverTypeId
    boolean hasSetterValueParameter() -> hasSetterValueParameter
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getSetterValueParameter() -> getSetterValueParameter
    boolean hasGetterFlags() -> hasGetterFlags
    int getGetterFlags() -> getGetterFlags
    boolean hasSetterFlags() -> hasSetterFlags
    int getSetterFlags() -> getSetterFlags
    java.util.List getVersionRequirementList() -> getVersionRequirementList
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$15202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$15202
    int access$15302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$15302
    int access$15402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$15402
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$15502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$15502
    int access$15602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$15602
    java.util.List access$15702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,java.util.List) -> access$15702
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$15802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$15802
    int access$15902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$15902
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter access$16002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> access$16002
    int access$16102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$16102
    int access$16202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$16202
    java.util.List access$16302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,java.util.List) -> access$16302
    int access$16402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,int) -> access$16402
    java.util.List access$15700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> access$15700
    java.util.List access$16300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> access$16300
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$16500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> access$16500
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int oldFlags_ -> oldFlags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType_ -> returnType_
    int returnTypeId_ -> returnTypeId_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType_ -> receiverType_
    int receiverTypeId_ -> receiverTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter setterValueParameter_ -> setterValueParameter_
    int getterFlags_ -> getterFlags_
    int setterFlags_ -> setterFlags_
    java.util.List versionRequirement_ -> versionRequirement_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setFlags(int) -> setFlags
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setOldFlags(int) -> setOldFlags
    boolean hasName() -> hasName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setName(int) -> setName
    boolean hasReturnType() -> hasReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReturnType() -> getReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder mergeReturnType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeReturnType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setReturnTypeId(int) -> setReturnTypeId
    void ensureTypeParameterIsMutable() -> ensureTypeParameterIsMutable
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasReceiverType() -> hasReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getReceiverType() -> getReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder mergeReceiverType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeReceiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setReceiverTypeId(int) -> setReceiverTypeId
    boolean hasSetterValueParameter() -> hasSetterValueParameter
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getSetterValueParameter() -> getSetterValueParameter
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder mergeSetterValueParameter(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> mergeSetterValueParameter
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setGetterFlags(int) -> setGetterFlags
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder setSetterFlags(int) -> setSetterFlags
    void ensureVersionRequirementIsMutable() -> ensureVersionRequirementIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property$Builder access$15000() -> access$15000
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PropertyOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PropertyOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    java.util.List qualifiedName_ -> qualifiedName_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    int getQualifiedNameCount() -> getQualifiedNameCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName getQualifiedName(int) -> getQualifiedName
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$1602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable,java.util.List) -> access$1602
    java.util.List access$1600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> access$1600
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$1700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> access$1700
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder:
    int bitField0_ -> bitField0_
    java.util.List qualifiedName_ -> qualifiedName_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureQualifiedNameIsMutable() -> ensureQualifiedNameIsMutable
    int getQualifiedNameCount() -> getQualifiedNameCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName getQualifiedName(int) -> getQualifiedName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$Builder access$1400() -> access$1400
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int parentQualifiedName_ -> parentQualifiedName_
    int shortName_ -> shortName_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind kind_ -> kind_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasParentQualifiedName() -> hasParentQualifiedName
    int getParentQualifiedName() -> getParentQualifiedName
    boolean hasShortName() -> hasShortName
    int getShortName() -> getShortName
    boolean hasKind() -> hasKind
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind getKind() -> getKind
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName,int) -> access$902
    int access$1002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName,int) -> access$1002
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind access$1102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind) -> access$1102
    int access$1202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName,int) -> access$1202
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$1300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName) -> access$1300
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder:
    int bitField0_ -> bitField0_
    int parentQualifiedName_ -> parentQualifiedName_
    int shortName_ -> shortName_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind kind_ -> kind_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder setParentQualifiedName(int) -> setParentQualifiedName
    boolean hasShortName() -> hasShortName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder setShortName(int) -> setShortName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder setKind(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Builder access$700() -> access$700
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind CLASS -> CLASS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind PACKAGE -> PACKAGE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind LOCAL -> LOCAL
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedName$Kind findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedNameOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable$QualifiedNameOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTableOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTableOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList string_ -> string_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    kotlin.reflect.jvm.internal.impl.protobuf.ProtocolStringList getStringList() -> getStringList
    java.lang.String getString(int) -> getString
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList access$302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable,kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList) -> access$302
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList access$300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> access$300
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$400(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> access$400
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList string_ -> string_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureStringIsMutable() -> ensureStringIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable$Builder access$100() -> access$100
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTableOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTableOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    java.util.List argument_ -> argument_
    boolean nullable_ -> nullable_
    int flexibleTypeCapabilitiesId_ -> flexibleTypeCapabilitiesId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type flexibleUpperBound_ -> flexibleUpperBound_
    int flexibleUpperBoundId_ -> flexibleUpperBoundId_
    int className_ -> className_
    int typeParameter_ -> typeParameter_
    int typeParameterName_ -> typeParameterName_
    int typeAliasName_ -> typeAliasName_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type outerType_ -> outerType_
    int outerTypeId_ -> outerTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type abbreviatedType_ -> abbreviatedType_
    int abbreviatedTypeId_ -> abbreviatedTypeId_
    int flags_ -> flags_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getArgumentList() -> getArgumentList
    int getArgumentCount() -> getArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument getArgument(int) -> getArgument
    boolean hasNullable() -> hasNullable
    boolean getNullable() -> getNullable
    boolean hasFlexibleTypeCapabilitiesId() -> hasFlexibleTypeCapabilitiesId
    int getFlexibleTypeCapabilitiesId() -> getFlexibleTypeCapabilitiesId
    boolean hasFlexibleUpperBound() -> hasFlexibleUpperBound
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getFlexibleUpperBound() -> getFlexibleUpperBound
    boolean hasFlexibleUpperBoundId() -> hasFlexibleUpperBoundId
    int getFlexibleUpperBoundId() -> getFlexibleUpperBoundId
    boolean hasClassName() -> hasClassName
    int getClassName() -> getClassName
    boolean hasTypeParameter() -> hasTypeParameter
    int getTypeParameter() -> getTypeParameter
    boolean hasTypeParameterName() -> hasTypeParameterName
    int getTypeParameterName() -> getTypeParameterName
    boolean hasTypeAliasName() -> hasTypeAliasName
    int getTypeAliasName() -> getTypeAliasName
    boolean hasOuterType() -> hasOuterType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getOuterType() -> getOuterType
    boolean hasOuterTypeId() -> hasOuterTypeId
    int getOuterTypeId() -> getOuterTypeId
    boolean hasAbbreviatedType() -> hasAbbreviatedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getAbbreviatedType() -> getAbbreviatedType
    boolean hasAbbreviatedTypeId() -> hasAbbreviatedTypeId
    int getAbbreviatedTypeId() -> getAbbreviatedTypeId
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$5902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,java.util.List) -> access$5902
    boolean access$6002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,boolean) -> access$6002
    int access$6102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6102
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$6202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$6202
    int access$6302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6302
    int access$6402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6402
    int access$6502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6502
    int access$6602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6602
    int access$6702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6702
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$6802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$6802
    int access$6902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$6902
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$7002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$7002
    int access$7102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$7102
    int access$7202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$7202
    int access$7302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,int) -> access$7302
    java.util.List access$5900(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$5900
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$7400(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$7400
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection projection_ -> projection_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type_ -> type_
    int typeId_ -> typeId_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasProjection() -> hasProjection
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection getProjection() -> getProjection
    boolean hasType() -> hasType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType() -> getType
    boolean hasTypeId() -> hasTypeId
    int getTypeId() -> getTypeId
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection access$5202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection) -> access$5202
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$5302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$5302
    int access$5402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument,int) -> access$5402
    int access$5502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument,int) -> access$5502
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$5600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument) -> access$5600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection projection_ -> projection_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type_ -> type_
    int typeId_ -> typeId_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder setProjection(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection) -> setProjection
    boolean hasType() -> hasType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType() -> getType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder mergeType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder setTypeId(int) -> setTypeId
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Builder access$5000() -> access$5000
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection IN -> IN
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection OUT -> OUT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection INV -> INV
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection STAR -> STAR
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$ArgumentOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$ArgumentOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder:
    int bitField0_ -> bitField0_
    java.util.List argument_ -> argument_
    boolean nullable_ -> nullable_
    int flexibleTypeCapabilitiesId_ -> flexibleTypeCapabilitiesId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type flexibleUpperBound_ -> flexibleUpperBound_
    int flexibleUpperBoundId_ -> flexibleUpperBoundId_
    int className_ -> className_
    int typeParameter_ -> typeParameter_
    int typeParameterName_ -> typeParameterName_
    int typeAliasName_ -> typeAliasName_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type outerType_ -> outerType_
    int outerTypeId_ -> outerTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type abbreviatedType_ -> abbreviatedType_
    int abbreviatedTypeId_ -> abbreviatedTypeId_
    int flags_ -> flags_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureArgumentIsMutable() -> ensureArgumentIsMutable
    int getArgumentCount() -> getArgumentCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument getArgument(int) -> getArgument
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setNullable(boolean) -> setNullable
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setFlexibleTypeCapabilitiesId(int) -> setFlexibleTypeCapabilitiesId
    boolean hasFlexibleUpperBound() -> hasFlexibleUpperBound
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getFlexibleUpperBound() -> getFlexibleUpperBound
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder mergeFlexibleUpperBound(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeFlexibleUpperBound
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setFlexibleUpperBoundId(int) -> setFlexibleUpperBoundId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setClassName(int) -> setClassName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setTypeParameter(int) -> setTypeParameter
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setTypeParameterName(int) -> setTypeParameterName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setTypeAliasName(int) -> setTypeAliasName
    boolean hasOuterType() -> hasOuterType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getOuterType() -> getOuterType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder mergeOuterType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeOuterType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setOuterTypeId(int) -> setOuterTypeId
    boolean hasAbbreviatedType() -> hasAbbreviatedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getAbbreviatedType() -> getAbbreviatedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder mergeAbbreviatedType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeAbbreviatedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setAbbreviatedTypeId(int) -> setAbbreviatedTypeId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder setFlags(int) -> setFlags
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Builder access$5700() -> access$5700
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int name_ -> name_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type underlyingType_ -> underlyingType_
    int underlyingTypeId_ -> underlyingTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type expandedType_ -> expandedType_
    int expandedTypeId_ -> expandedTypeId_
    java.util.List annotation_ -> annotation_
    java.util.List versionRequirement_ -> versionRequirement_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasName() -> hasName
    int getName() -> getName
    java.util.List getTypeParameterList() -> getTypeParameterList
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasUnderlyingType() -> hasUnderlyingType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getUnderlyingType() -> getUnderlyingType
    boolean hasUnderlyingTypeId() -> hasUnderlyingTypeId
    int getUnderlyingTypeId() -> getUnderlyingTypeId
    boolean hasExpandedType() -> hasExpandedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getExpandedType() -> getExpandedType
    boolean hasExpandedTypeId() -> hasExpandedTypeId
    int getExpandedTypeId() -> getExpandedTypeId
    java.util.List getAnnotationList() -> getAnnotationList
    int getAnnotationCount() -> getAnnotationCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getAnnotation(int) -> getAnnotation
    java.util.List getVersionRequirementList() -> getVersionRequirementList
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias parseDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseDelimitedFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$18002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,int) -> access$18002
    int access$18102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,int) -> access$18102
    java.util.List access$18202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,java.util.List) -> access$18202
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$18302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$18302
    int access$18402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,int) -> access$18402
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$18502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$18502
    int access$18602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,int) -> access$18602
    java.util.List access$18702(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,java.util.List) -> access$18702
    java.util.List access$18802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,java.util.List) -> access$18802
    int access$18902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,int) -> access$18902
    java.util.List access$18200(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> access$18200
    java.util.List access$18700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> access$18700
    java.util.List access$18800(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> access$18800
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$19000(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> access$19000
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int name_ -> name_
    java.util.List typeParameter_ -> typeParameter_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type underlyingType_ -> underlyingType_
    int underlyingTypeId_ -> underlyingTypeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type expandedType_ -> expandedType_
    int expandedTypeId_ -> expandedTypeId_
    java.util.List annotation_ -> annotation_
    java.util.List versionRequirement_ -> versionRequirement_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder setFlags(int) -> setFlags
    boolean hasName() -> hasName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder setName(int) -> setName
    void ensureTypeParameterIsMutable() -> ensureTypeParameterIsMutable
    int getTypeParameterCount() -> getTypeParameterCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getTypeParameter(int) -> getTypeParameter
    boolean hasUnderlyingType() -> hasUnderlyingType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getUnderlyingType() -> getUnderlyingType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder mergeUnderlyingType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeUnderlyingType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder setUnderlyingTypeId(int) -> setUnderlyingTypeId
    boolean hasExpandedType() -> hasExpandedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getExpandedType() -> getExpandedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder mergeExpandedType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeExpandedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder setExpandedTypeId(int) -> setExpandedTypeId
    void ensureAnnotationIsMutable() -> ensureAnnotationIsMutable
    int getAnnotationCount() -> getAnnotationCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation getAnnotation(int) -> getAnnotation
    void ensureVersionRequirementIsMutable() -> ensureVersionRequirementIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias$Builder access$17800() -> access$17800
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAliasOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAliasOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int id_ -> id_
    int name_ -> name_
    boolean reified_ -> reified_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance variance_ -> variance_
    java.util.List upperBound_ -> upperBound_
    java.util.List upperBoundId_ -> upperBoundId_
    int upperBoundIdMemoizedSerializedSize -> upperBoundIdMemoizedSerializedSize
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasId() -> hasId
    int getId() -> getId
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasReified() -> hasReified
    boolean getReified() -> getReified
    boolean hasVariance() -> hasVariance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance getVariance() -> getVariance
    java.util.List getUpperBoundList() -> getUpperBoundList
    int getUpperBoundCount() -> getUpperBoundCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getUpperBound(int) -> getUpperBound
    java.util.List getUpperBoundIdList() -> getUpperBoundIdList
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$7802(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,int) -> access$7802
    int access$7902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,int) -> access$7902
    boolean access$8002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,boolean) -> access$8002
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance access$8102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance) -> access$8102
    java.util.List access$8202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,java.util.List) -> access$8202
    java.util.List access$8302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,java.util.List) -> access$8302
    int access$8402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,int) -> access$8402
    java.util.List access$8200(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter) -> access$8200
    java.util.List access$8300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter) -> access$8300
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$8500(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter) -> access$8500
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder:
    int bitField0_ -> bitField0_
    int id_ -> id_
    int name_ -> name_
    boolean reified_ -> reified_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance variance_ -> variance_
    java.util.List upperBound_ -> upperBound_
    java.util.List upperBoundId_ -> upperBoundId_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    boolean hasId() -> hasId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder setId(int) -> setId
    boolean hasName() -> hasName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder setName(int) -> setName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder setReified(boolean) -> setReified
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder setVariance(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance) -> setVariance
    void ensureUpperBoundIsMutable() -> ensureUpperBoundIsMutable
    int getUpperBoundCount() -> getUpperBoundCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getUpperBound(int) -> getUpperBound
    void ensureUpperBoundIdIsMutable() -> ensureUpperBoundIdIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Builder access$7600() -> access$7600
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance IN -> IN
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance OUT -> OUT
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance INV -> INV
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameterOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameterOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    java.util.List type_ -> type_
    int firstNullable_ -> firstNullable_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getTypeList() -> getTypeList
    int getTypeCount() -> getTypeCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType(int) -> getType
    boolean hasFirstNullable() -> hasFirstNullable
    int getFirstNullable() -> getFirstNullable
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$12002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable,java.util.List) -> access$12002
    int access$12102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable,int) -> access$12102
    int access$12202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable,int) -> access$12202
    java.util.List access$12000(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> access$12000
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$12300(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> access$12300
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder:
    int bitField0_ -> bitField0_
    java.util.List type_ -> type_
    int firstNullable_ -> firstNullable_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureTypeIsMutable() -> ensureTypeIsMutable
    int getTypeCount() -> getTypeCount
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType(int) -> getType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder setFirstNullable(int) -> setFirstNullable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable$Builder access$11800() -> access$11800
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTableOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTableOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type_ -> type_
    int typeId_ -> typeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type varargElementType_ -> varargElementType_
    int varargElementTypeId_ -> varargElementTypeId_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasFlags() -> hasFlags
    int getFlags() -> getFlags
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasType() -> hasType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType() -> getType
    boolean hasTypeId() -> hasTypeId
    int getTypeId() -> getTypeId
    boolean hasVarargElementType() -> hasVarargElementType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getVarargElementType() -> getVarargElementType
    boolean hasVarargElementTypeId() -> hasVarargElementTypeId
    int getVarargElementTypeId() -> getVarargElementTypeId
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$16902(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,int) -> access$16902
    int access$17002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,int) -> access$17002
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$17102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$17102
    int access$17202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,int) -> access$17202
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type access$17302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> access$17302
    int access$17402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,int) -> access$17402
    int access$17502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,int) -> access$17502
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$17600(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> access$17600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder:
    int bitField0_ -> bitField0_
    int flags_ -> flags_
    int name_ -> name_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type_ -> type_
    int typeId_ -> typeId_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type varargElementType_ -> varargElementType_
    int varargElementTypeId_ -> varargElementTypeId_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder setFlags(int) -> setFlags
    boolean hasName() -> hasName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder setName(int) -> setName
    boolean hasType() -> hasType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getType() -> getType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder mergeType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder setTypeId(int) -> setTypeId
    boolean hasVarargElementType() -> hasVarargElementType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type getVarargElementType() -> getVarargElementType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder mergeVarargElementType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> mergeVarargElementType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder setVarargElementTypeId(int) -> setVarargElementTypeId
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter$Builder access$16700() -> access$16700
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameterOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameterOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int version_ -> version_
    int versionFull_ -> versionFull_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level level_ -> level_
    int errorCode_ -> errorCode_
    int message_ -> message_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind versionKind_ -> versionKind_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasVersion() -> hasVersion
    int getVersion() -> getVersion
    boolean hasVersionFull() -> hasVersionFull
    int getVersionFull() -> getVersionFull
    boolean hasLevel() -> hasLevel
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level getLevel() -> getLevel
    boolean hasErrorCode() -> hasErrorCode
    int getErrorCode() -> getErrorCode
    boolean hasMessage() -> hasMessage
    int getMessage() -> getMessage
    boolean hasVersionKind() -> hasVersionKind
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind getVersionKind() -> getVersionKind
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    int access$20002(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,int) -> access$20002
    int access$20102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,int) -> access$20102
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level access$20202(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level) -> access$20202
    int access$20302(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,int) -> access$20302
    int access$20402(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,int) -> access$20402
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind access$20502(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind) -> access$20502
    int access$20602(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement,int) -> access$20602
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$20700(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement) -> access$20700
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder:
    int bitField0_ -> bitField0_
    int version_ -> version_
    int versionFull_ -> versionFull_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level level_ -> level_
    int errorCode_ -> errorCode_
    int message_ -> message_
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind versionKind_ -> versionKind_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setVersion(int) -> setVersion
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setVersionFull(int) -> setVersionFull
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setLevel(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level) -> setLevel
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setErrorCode(int) -> setErrorCode
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setMessage(int) -> setMessage
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder setVersionKind(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind) -> setVersionKind
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Builder access$19800() -> access$19800
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level WARNING -> WARNING
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level ERROR -> ERROR
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level HIDDEN -> HIDDEN
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$Level findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind LANGUAGE_VERSION -> LANGUAGE_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind COMPILER_VERSION -> COMPILER_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind API_VERSION -> API_VERSION
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    java.util.List requirement_ -> requirement_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getRequirementList() -> getRequirementList
    int getRequirementCount() -> getRequirementCount
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$1) -> <init>
    java.util.List access$21102(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable,java.util.List) -> access$21102
    java.util.List access$21100(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> access$21100
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$21200(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> access$21200
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder:
    int bitField0_ -> bitField0_
    java.util.List requirement_ -> requirement_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureRequirementIsMutable() -> ensureRequirementIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable$Builder access$20900() -> access$20900
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTableOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTableOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility INTERNAL -> INTERNAL
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility PRIVATE -> PRIVATE
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility PROTECTED -> PROTECTED
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility PUBLIC -> PUBLIC
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility PRIVATE_TO_THIS -> PRIVATE_TO_THIS
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility LOCAL -> LOCAL
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility$1 -> kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion -> kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion:
    kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion INVALID_VERSION -> INVALID_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion$Companion Companion -> Companion
    boolean isCompatible() -> isCompatible
    void <init>(int[]) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion$Companion -> kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion$Companion:
    kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion readFrom(java.io.InputStream) -> readFrom
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsProtoBuf -> kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsProtoBuf:
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension packageFqName -> packageFqName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension classAnnotation -> classAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension constructorAnnotation -> constructorAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension functionAnnotation -> functionAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertyAnnotation -> propertyAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertyGetterAnnotation -> propertyGetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertySetterAnnotation -> propertySetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension compileTimeValue -> compileTimeValue
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension enumEntryAnnotation -> enumEntryAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension parameterAnnotation -> parameterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeAnnotation -> typeAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeParameterAnnotation -> typeParameterAnnotation
    void registerAllExtensions(kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> registerAllExtensions
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion:
    int major -> major
    int minor -> minor
    int patch -> patch
    java.util.List rest -> rest
    int[] numbers -> numbers
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion$Companion Companion -> Companion
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    int[] toArray() -> toArray
    boolean isCompatibleTo(kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion) -> isCompatibleTo
    boolean isAtLeast(kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion) -> isAtLeast
    boolean isAtLeast(int,int,int) -> isAtLeast
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(int[]) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion$Companion -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField SUSPEND_TYPE -> SUSPEND_TYPE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField HAS_ANNOTATIONS -> HAS_ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField VISIBILITY -> VISIBILITY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField MODALITY -> MODALITY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField CLASS_KIND -> CLASS_KIND
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_INNER -> IS_INNER
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_DATA -> IS_DATA
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXTERNAL_CLASS -> IS_EXTERNAL_CLASS
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXPECT_CLASS -> IS_EXPECT_CLASS
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_INLINE_CLASS -> IS_INLINE_CLASS
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_SECONDARY -> IS_SECONDARY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField MEMBER_KIND -> MEMBER_KIND
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_OPERATOR -> IS_OPERATOR
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_INFIX -> IS_INFIX
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_INLINE -> IS_INLINE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_TAILREC -> IS_TAILREC
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXTERNAL_FUNCTION -> IS_EXTERNAL_FUNCTION
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_SUSPEND -> IS_SUSPEND
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXPECT_FUNCTION -> IS_EXPECT_FUNCTION
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_VAR -> IS_VAR
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField HAS_GETTER -> HAS_GETTER
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField HAS_SETTER -> HAS_SETTER
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_CONST -> IS_CONST
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_LATEINIT -> IS_LATEINIT
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField HAS_CONSTANT -> HAS_CONSTANT
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXTERNAL_PROPERTY -> IS_EXTERNAL_PROPERTY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_DELEGATED -> IS_DELEGATED
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXPECT_PROPERTY -> IS_EXPECT_PROPERTY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField DECLARES_DEFAULT_VALUE -> DECLARES_DEFAULT_VALUE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_CROSSINLINE -> IS_CROSSINLINE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_NOINLINE -> IS_NOINLINE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_NOT_DEFAULT -> IS_NOT_DEFAULT
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_EXTERNAL_ACCESSOR -> IS_EXTERNAL_ACCESSOR
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_INLINE_ACCESSOR -> IS_INLINE_ACCESSOR
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_NEGATED -> IS_NEGATED
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_NULL_CHECK_PREDICATE -> IS_NULL_CHECK_PREDICATE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_UNSIGNED -> IS_UNSIGNED
    int getAccessorFlags(boolean,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality,boolean,boolean,boolean) -> getAccessorFlags
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$1 -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$1:
kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField:
    void <init>(int) -> <init>
    java.lang.Boolean get(int) -> get
    int toFlags(java.lang.Boolean) -> toFlags
    int toFlags(java.lang.Object) -> toFlags
    java.lang.Object get(int) -> get
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$EnumLiteFlagField -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$EnumLiteFlagField:
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite[] values -> values
    void <init>(int,kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite[]) -> <init>
    int bitWidth(java.lang.Object[]) -> bitWidth
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite get(int) -> get
    int toFlags(kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite) -> toFlags
    int toFlags(java.lang.Object) -> toFlags
    java.lang.Object get(int) -> get
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField:
    int offset -> offset
    int bitWidth -> bitWidth
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField after(kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField,kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite[]) -> after
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField booleanFirst() -> booleanFirst
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField booleanAfter(kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$FlagField) -> booleanAfter
    void <init>(int,int) -> <init>
    java.lang.Object get(int) -> get
    int toFlags(java.lang.Object) -> toFlags
    void <init>(int,int,kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$1) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver:
    java.lang.String getString(int) -> getString
    java.lang.String getQualifiedClassName(int) -> getQualifiedClassName
    boolean isLocalClassName(int) -> isLocalClassName
kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolverImpl -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolverImpl:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable strings -> strings
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable qualifiedNames -> qualifiedNames
    java.lang.String getString(int) -> getString
    java.lang.String getQualifiedClassName(int) -> getQualifiedClassName
    boolean isLocalClassName(int) -> isLocalClassName
    kotlin.Triple traverseIds(int) -> traverseIds
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$StringTable,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$QualifiedNameTable) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolverImpl$WhenMappings -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolverImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.ProtoBufUtilKt -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.ProtoBufUtilKt:
    java.lang.Object getExtensionOrNull(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> getExtensionOrNull
    java.lang.Object getExtensionOrNull(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,int) -> getExtensionOrNull
kotlin.reflect.jvm.internal.impl.metadata.deserialization.ProtoTypeTableUtilKt -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.ProtoTypeTableUtilKt:
    java.util.List supertypes(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> supertypes
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> type
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type flexibleUpperBound(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> flexibleUpperBound
    java.util.List upperBounds(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> upperBounds
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> returnType
    boolean hasReceiver(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> hasReceiver
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> receiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type returnType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> returnType
    boolean hasReceiver(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> hasReceiver
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type receiverType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> receiverType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type type(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> type
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type varargElementType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> varargElementType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type outerType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> outerType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type abbreviatedType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> abbreviatedType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type underlyingType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> underlyingType
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type expandedType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> expandedType
kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable:
    java.util.List types -> types
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type get(int) -> get
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeTable) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version version -> version
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind kind -> kind
    kotlin.DeprecationLevel level -> level
    java.lang.Integer errorCode -> errorCode
    java.lang.String message -> message
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Companion Companion -> Companion
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version getVersion() -> getVersion
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind getKind() -> getKind
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement$VersionKind,kotlin.DeprecationLevel,java.lang.Integer,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Companion -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Companion:
    java.util.List create(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable) -> create
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement create(int,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Companion$WhenMappings -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Companion$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version:
    int major -> major
    int minor -> minor
    int patch -> patch
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version INFINITY -> INFINITY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version$Companion Companion -> Companion
    java.lang.String asString() -> asString
    java.lang.String toString() -> toString
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version$Companion -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version$Companion:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirement$Version decode(java.lang.Integer,java.lang.Integer) -> decode
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable:
    java.util.List infos -> infos
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirement get(int) -> get
    void <init>(java.util.List) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable access$getEMPTY$cp() -> access$getEMPTY$cp
    void <init>(java.util.List,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable$Companion -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable$Companion:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getEMPTY() -> getEMPTY
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable create(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$VersionRequirementTable) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionSpecificBehaviorKt -> kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionSpecificBehaviorKt:
    boolean isVersionRequirementTableWrittenCorrectly(kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion) -> isVersionRequirementTableWrittenCorrectly
    boolean isKotlin1Dot4OrLater(kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion) -> isKotlin1Dot4OrLater
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf:
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension constructorSignature -> constructorSignature
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension methodSignature -> methodSignature
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension lambdaClassOriginName -> lambdaClassOriginName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertySignature -> propertySignature
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension flags -> flags
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeAnnotation -> typeAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension isRaw -> isRaw
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeParameterAnnotation -> typeParameterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension classModuleName -> classModuleName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension classLocalVariable -> classLocalVariable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension anonymousObjectOriginName -> anonymousObjectOriginName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension packageModuleName -> packageModuleName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension packageLocalVariable -> packageLocalVariable
    void registerAllExtensions(kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> registerAllExtensions
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1:
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int name_ -> name_
    int desc_ -> desc_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasDesc() -> hasDesc
    int getDesc() -> getDesc
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    int access$2702(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature,int) -> access$2702
    int access$2802(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature,int) -> access$2802
    int access$2902(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature,int) -> access$2902
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$3000(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature) -> access$3000
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder:
    int bitField0_ -> bitField0_
    int name_ -> name_
    int desc_ -> desc_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder setName(int) -> setName
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder setDesc(int) -> setDesc
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature$Builder access$2500() -> access$2500
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignatureOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignatureOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int name_ -> name_
    int desc_ -> desc_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasName() -> hasName
    int getName() -> getName
    boolean hasDesc() -> hasDesc
    int getDesc() -> getDesc
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    int access$2002(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature,int) -> access$2002
    int access$2102(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature,int) -> access$2102
    int access$2202(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature,int) -> access$2202
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$2300(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> access$2300
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder:
    int bitField0_ -> bitField0_
    int name_ -> name_
    int desc_ -> desc_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder setName(int) -> setName
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder setDesc(int) -> setDesc
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature$Builder access$1800() -> access$1800
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignatureOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignatureOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature field_ -> field_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature syntheticMethod_ -> syntheticMethod_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getter_ -> getter_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature setter_ -> setter_
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasField() -> hasField
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature getField() -> getField
    boolean hasSyntheticMethod() -> hasSyntheticMethod
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getSyntheticMethod() -> getSyntheticMethod
    boolean hasGetter() -> hasGetter
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getGetter() -> getGetter
    boolean hasSetter() -> hasSetter
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getSetter() -> getSetter
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature access$3402(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature) -> access$3402
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature access$3502(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> access$3502
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature access$3602(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> access$3602
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature access$3702(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> access$3702
    int access$3802(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature,int) -> access$3802
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$3900(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature) -> access$3900
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder:
    int bitField0_ -> bitField0_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature field_ -> field_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature syntheticMethod_ -> syntheticMethod_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature getter_ -> getter_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature setter_ -> setter_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeField(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmFieldSignature) -> mergeField
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeSyntheticMethod(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> mergeSyntheticMethod
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeGetter(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> mergeGetter
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder mergeSetter(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmMethodSignature) -> mergeSetter
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignature$Builder access$3200() -> access$3200
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignatureOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$JvmPropertySignatureOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    java.util.List record_ -> record_
    java.util.List localName_ -> localName_
    int localNameMemoizedSerializedSize -> localNameMemoizedSerializedSize
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getRecordList() -> getRecordList
    java.util.List getLocalNameList() -> getLocalNameList
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes parseDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseDelimitedFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    java.util.List access$1402(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes,java.util.List) -> access$1402
    java.util.List access$1502(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes,java.util.List) -> access$1502
    java.util.List access$1400(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes) -> access$1400
    java.util.List access$1500(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes) -> access$1500
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$1600(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes) -> access$1600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder:
    int bitField0_ -> bitField0_
    java.util.List record_ -> record_
    java.util.List localName_ -> localName_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    void ensureRecordIsMutable() -> ensureRecordIsMutable
    void ensureLocalNameIsMutable() -> ensureLocalNameIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Builder access$1200() -> access$1200
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.Parser PARSER -> PARSER
    int bitField0_ -> bitField0_
    int range_ -> range_
    int predefinedIndex_ -> predefinedIndex_
    java.lang.Object string_ -> string_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation operation_ -> operation_
    java.util.List substringIndex_ -> substringIndex_
    int substringIndexMemoizedSerializedSize -> substringIndexMemoizedSerializedSize
    java.util.List replaceChar_ -> replaceChar_
    int replaceCharMemoizedSerializedSize -> replaceCharMemoizedSerializedSize
    byte memoizedIsInitialized -> memoizedIsInitialized
    int memoizedSerializedSize -> memoizedSerializedSize
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record getDefaultInstance() -> getDefaultInstance
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean hasRange() -> hasRange
    int getRange() -> getRange
    boolean hasPredefinedIndex() -> hasPredefinedIndex
    int getPredefinedIndex() -> getPredefinedIndex
    boolean hasString() -> hasString
    java.lang.String getString() -> getString
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString getStringBytes() -> getStringBytes
    boolean hasOperation() -> hasOperation
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation getOperation() -> getOperation
    java.util.List getSubstringIndexList() -> getSubstringIndexList
    int getSubstringIndexCount() -> getSubstringIndexCount
    java.util.List getReplaceCharList() -> getReplaceCharList
    int getReplaceCharCount() -> getReplaceCharCount
    void initFields() -> initFields
    boolean isInitialized() -> isInitialized
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder newBuilder() -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder newBuilder(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> newBuilder
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$1) -> <init>
    int access$402(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,int) -> access$402
    int access$502(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,int) -> access$502
    java.lang.Object access$602(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,java.lang.Object) -> access$602
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation access$702(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation) -> access$702
    java.util.List access$802(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,java.util.List) -> access$802
    java.util.List access$902(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,java.util.List) -> access$902
    int access$1002(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record,int) -> access$1002
    java.lang.Object access$600(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> access$600
    java.util.List access$800(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> access$800
    java.util.List access$900(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> access$900
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$1100(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> access$1100
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder:
    int bitField0_ -> bitField0_
    int range_ -> range_
    int predefinedIndex_ -> predefinedIndex_
    java.lang.Object string_ -> string_
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation operation_ -> operation_
    java.util.List substringIndex_ -> substringIndex_
    java.util.List replaceChar_ -> replaceChar_
    void <init>() -> <init>
    void maybeForceBuilderInitialization() -> maybeForceBuilderInitialization
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder create() -> create
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record build() -> build
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record buildPartial() -> buildPartial
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record) -> mergeFrom
    boolean isInitialized() -> isInitialized
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder setRange(int) -> setRange
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder setPredefinedIndex(int) -> setPredefinedIndex
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder setOperation(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation) -> setOperation
    void ensureSubstringIndexIsMutable() -> ensureSubstringIndexIsMutable
    void ensureReplaceCharIsMutable() -> ensureReplaceCharIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Builder access$200() -> access$200
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation NONE -> NONE
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation INTERNAL_TO_CLASS_ID -> INTERNAL_TO_CLASS_ID
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation DESC_TO_CLASS_ID -> DESC_TO_CLASS_ID
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap internalValueMap -> internalValueMap
    int value -> value
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation[] values() -> values
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation valueOf(java.lang.String) -> valueOf
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation valueOf(int) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$Record$Operation findValueByNumber(int) -> findValueByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$RecordOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes$RecordOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypesOrBuilder -> kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypesOrBuilder:
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.BitEncoding -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.BitEncoding:
    boolean FORCE_8TO7_ENCODING -> FORCE_8TO7_ENCODING
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void addModuloByte(byte[],int) -> addModuloByte
    byte[] decodeBytes(java.lang.String[]) -> decodeBytes
    java.lang.String[] dropMarker(java.lang.String[]) -> dropMarker
    byte[] combineStringArrayIntoBytes(java.lang.String[]) -> combineStringArrayIntoBytes
    byte[] decode7to8(byte[]) -> decode7to8
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.ClassMapperLite -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.ClassMapperLite:
    java.util.Map map -> map
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.ClassMapperLite INSTANCE -> INSTANCE
    java.lang.String mapClass(java.lang.String) -> mapClass
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.ClassMapperLite$map$1$1 -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.ClassMapperLite$map$1$1:
    java.util.Map $this_apply -> $this_apply
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void invoke(java.lang.String,java.lang.String) -> invoke
    void <init>(java.util.Map) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion:
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion INVALID_VERSION -> INVALID_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion$Companion Companion -> Companion
    void <init>(int[]) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion$Companion -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmBytecodeBinaryVersion$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmFlags -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmFlags:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField IS_MOVED_FROM_INTERFACE_COMPANION -> IS_MOVED_FROM_INTERFACE_COMPANION
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmFlags INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.Flags$BooleanFlagField getIS_MOVED_FROM_INTERFACE_COMPANION() -> getIS_MOVED_FROM_INTERFACE_COMPANION
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature:
    java.lang.String getName() -> getName
    java.lang.String getDesc() -> getDesc
    java.lang.String toString() -> toString
    java.lang.String asString() -> asString
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Field -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Field:
    java.lang.String name -> name
    java.lang.String desc -> desc
    java.lang.String asString() -> asString
    java.lang.String getName() -> getName
    java.lang.String getDesc() -> getDesc
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String component1() -> component1
    java.lang.String component2() -> component2
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method:
    java.lang.String name -> name
    java.lang.String desc -> desc
    java.lang.String asString() -> asString
    java.lang.String getName() -> getName
    java.lang.String getDesc() -> getDesc
    void <init>(java.lang.String,java.lang.String) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion:
    boolean isStrictSemantics -> isStrictSemantics
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion INVALID_VERSION -> INVALID_VERSION
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion$Companion Companion -> Companion
    boolean isCompatible() -> isCompatible
    void <init>(int[],boolean) -> <init>
    void <init>(int[]) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion$Companion -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMetadataVersion$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver:
    java.util.Set localNameIndices -> localNameIndices
    java.util.List records -> records
    kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes types -> types
    java.lang.String[] strings -> strings
    java.util.List PREDEFINED_STRINGS -> PREDEFINED_STRINGS
    java.util.Map PREDEFINED_STRINGS_MAP -> PREDEFINED_STRINGS_MAP
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver$Companion Companion -> Companion
    java.lang.String getString(int) -> getString
    java.lang.String getQualifiedClassName(int) -> getQualifiedClassName
    boolean isLocalClassName(int) -> isLocalClassName
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.jvm.JvmProtoBuf$StringTableTypes,java.lang.String[]) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver$Companion -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver$WhenMappings -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmProtoBufUtil -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmProtoBufUtil:
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite EXTENSION_REGISTRY -> EXTENSION_REGISTRY
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmProtoBufUtil INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite getEXTENSION_REGISTRY() -> getEXTENSION_REGISTRY
    kotlin.Pair readClassDataFrom(java.lang.String[],java.lang.String[]) -> readClassDataFrom
    kotlin.Pair readClassDataFrom(byte[],java.lang.String[]) -> readClassDataFrom
    kotlin.Pair readPackageDataFrom(java.lang.String[],java.lang.String[]) -> readPackageDataFrom
    kotlin.Pair readPackageDataFrom(byte[],java.lang.String[]) -> readPackageDataFrom
    kotlin.Pair readFunctionDataFrom(java.lang.String[],java.lang.String[]) -> readFunctionDataFrom
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmNameResolver readNameResolver(java.io.InputStream,java.lang.String[]) -> readNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method getJvmMethodSignature(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> getJvmMethodSignature
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Method getJvmConstructorSignature(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable) -> getJvmConstructorSignature
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Field getJvmFieldSignature(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,boolean) -> getJvmFieldSignature
    kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmMemberSignature$Field getJvmFieldSignature$default(kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.JvmProtoBufUtil,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,boolean,int,java.lang.Object) -> getJvmFieldSignature$default
    java.lang.String mapTypeDefault(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> mapTypeDefault
    boolean isMovedFromInterfaceCompanion(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> isMovedFromInterfaceCompanion
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.UtfEncodingKt -> kotlin.reflect.jvm.internal.impl.metadata.jvm.deserialization.UtfEncodingKt:
    byte[] stringsToBytes(java.lang.String[]) -> stringsToBytes
kotlin.reflect.jvm.internal.impl.name.ClassId -> kotlin.reflect.jvm.internal.impl.name.ClassId:
    kotlin.reflect.jvm.internal.impl.name.FqName packageFqName -> packageFqName
    kotlin.reflect.jvm.internal.impl.name.FqName relativeClassName -> relativeClassName
    boolean local -> local
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.name.ClassId topLevel(kotlin.reflect.jvm.internal.impl.name.FqName) -> topLevel
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.FqName,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.name.FqName getPackageFqName() -> getPackageFqName
    kotlin.reflect.jvm.internal.impl.name.FqName getRelativeClassName() -> getRelativeClassName
    kotlin.reflect.jvm.internal.impl.name.Name getShortClassName() -> getShortClassName
    boolean isLocal() -> isLocal
    kotlin.reflect.jvm.internal.impl.name.ClassId createNestedClassId(kotlin.reflect.jvm.internal.impl.name.Name) -> createNestedClassId
    kotlin.reflect.jvm.internal.impl.name.ClassId getOuterClassId() -> getOuterClassId
    boolean isNestedClass() -> isNestedClass
    kotlin.reflect.jvm.internal.impl.name.FqName asSingleFqName() -> asSingleFqName
    kotlin.reflect.jvm.internal.impl.name.ClassId fromString(java.lang.String) -> fromString
    kotlin.reflect.jvm.internal.impl.name.ClassId fromString(java.lang.String,boolean) -> fromString
    java.lang.String asString() -> asString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.name.FqName -> kotlin.reflect.jvm.internal.impl.name.FqName:
    kotlin.reflect.jvm.internal.impl.name.FqName ROOT -> ROOT
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe fqName -> fqName
    kotlin.reflect.jvm.internal.impl.name.FqName parent -> parent
    void <init>(java.lang.String) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
    java.lang.String asString() -> asString
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe toUnsafe() -> toUnsafe
    boolean isRoot() -> isRoot
    kotlin.reflect.jvm.internal.impl.name.FqName parent() -> parent
    kotlin.reflect.jvm.internal.impl.name.FqName child(kotlin.reflect.jvm.internal.impl.name.Name) -> child
    kotlin.reflect.jvm.internal.impl.name.Name shortName() -> shortName
    kotlin.reflect.jvm.internal.impl.name.Name shortNameOrSpecial() -> shortNameOrSpecial
    java.util.List pathSegments() -> pathSegments
    boolean startsWith(kotlin.reflect.jvm.internal.impl.name.Name) -> startsWith
    kotlin.reflect.jvm.internal.impl.name.FqName topLevel(kotlin.reflect.jvm.internal.impl.name.Name) -> topLevel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe -> kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe:
    kotlin.reflect.jvm.internal.impl.name.Name ROOT_NAME -> ROOT_NAME
    java.util.regex.Pattern SPLIT_BY_DOTS -> SPLIT_BY_DOTS
    kotlin.jvm.functions.Function1 STRING_TO_NAME -> STRING_TO_NAME
    java.lang.String fqName -> fqName
    kotlin.reflect.jvm.internal.impl.name.FqName safe -> safe
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe parent -> parent
    kotlin.reflect.jvm.internal.impl.name.Name shortName -> shortName
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.name.FqName) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    void compute() -> compute
    java.lang.String asString() -> asString
    boolean isSafe() -> isSafe
    kotlin.reflect.jvm.internal.impl.name.FqName toSafe() -> toSafe
    boolean isRoot() -> isRoot
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe parent() -> parent
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe child(kotlin.reflect.jvm.internal.impl.name.Name) -> child
    kotlin.reflect.jvm.internal.impl.name.Name shortName() -> shortName
    kotlin.reflect.jvm.internal.impl.name.Name shortNameOrSpecial() -> shortNameOrSpecial
    java.util.List pathSegments() -> pathSegments
    boolean startsWith(kotlin.reflect.jvm.internal.impl.name.Name) -> startsWith
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe topLevel(kotlin.reflect.jvm.internal.impl.name.Name) -> topLevel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe$1 -> kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe$1:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.name.Name invoke(java.lang.String) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.name.FqNamesUtilKt -> kotlin.reflect.jvm.internal.impl.name.FqNamesUtilKt:
    boolean isSubpackageOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.FqName) -> isSubpackageOf
    boolean isSubpackageOf(java.lang.String,java.lang.String) -> isSubpackageOf
    kotlin.reflect.jvm.internal.impl.name.FqName tail(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.name.FqName) -> tail
    boolean isValidJavaFqName(java.lang.String) -> isValidJavaFqName
kotlin.reflect.jvm.internal.impl.name.FqNamesUtilKt$WhenMappings -> kotlin.reflect.jvm.internal.impl.name.FqNamesUtilKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.name.Name -> kotlin.reflect.jvm.internal.impl.name.Name:
    java.lang.String name -> name
    boolean special -> special
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.String asString() -> asString
    java.lang.String getIdentifier() -> getIdentifier
    boolean isSpecial() -> isSpecial
    int compareTo(kotlin.reflect.jvm.internal.impl.name.Name) -> compareTo
    kotlin.reflect.jvm.internal.impl.name.Name identifier(java.lang.String) -> identifier
    boolean isValidIdentifier(java.lang.String) -> isValidIdentifier
    kotlin.reflect.jvm.internal.impl.name.Name special(java.lang.String) -> special
    kotlin.reflect.jvm.internal.impl.name.Name guessByFirstCharacter(java.lang.String) -> guessByFirstCharacter
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.name.NameUtils -> kotlin.reflect.jvm.internal.impl.name.NameUtils:
    kotlin.text.Regex SANITIZE_AS_JAVA_INVALID_CHARACTERS -> SANITIZE_AS_JAVA_INVALID_CHARACTERS
    kotlin.reflect.jvm.internal.impl.name.NameUtils INSTANCE -> INSTANCE
    java.lang.String sanitizeAsJavaIdentifier(java.lang.String) -> sanitizeAsJavaIdentifier
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.name.SpecialNames -> kotlin.reflect.jvm.internal.impl.name.SpecialNames:
    kotlin.reflect.jvm.internal.impl.name.Name NO_NAME_PROVIDED -> NO_NAME_PROVIDED
    kotlin.reflect.jvm.internal.impl.name.Name ROOT_PACKAGE -> ROOT_PACKAGE
    kotlin.reflect.jvm.internal.impl.name.Name DEFAULT_NAME_FOR_COMPANION_OBJECT -> DEFAULT_NAME_FOR_COMPANION_OBJECT
    kotlin.reflect.jvm.internal.impl.name.Name SAFE_IDENTIFIER_FOR_NO_NAME -> SAFE_IDENTIFIER_FOR_NO_NAME
    kotlin.reflect.jvm.internal.impl.name.Name ANONYMOUS_FUNCTION -> ANONYMOUS_FUNCTION
    kotlin.reflect.jvm.internal.impl.name.Name safeIdentifier(kotlin.reflect.jvm.internal.impl.name.Name) -> safeIdentifier
    boolean isSafeIdentifier(kotlin.reflect.jvm.internal.impl.name.Name) -> isSafeIdentifier
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.name.State -> kotlin.reflect.jvm.internal.impl.name.State:
    kotlin.reflect.jvm.internal.impl.name.State BEGINNING -> BEGINNING
    kotlin.reflect.jvm.internal.impl.name.State MIDDLE -> MIDDLE
    kotlin.reflect.jvm.internal.impl.name.State AFTER_DOT -> AFTER_DOT
    kotlin.reflect.jvm.internal.impl.name.State[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.name.State[] values() -> values
    kotlin.reflect.jvm.internal.impl.name.State valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.platform.PlatformUtilKt -> kotlin.reflect.jvm.internal.impl.platform.PlatformUtilKt:
    java.lang.String getPresentableDescription(kotlin.reflect.jvm.internal.impl.platform.TargetPlatform) -> getPresentableDescription
kotlin.reflect.jvm.internal.impl.platform.SimplePlatform -> kotlin.reflect.jvm.internal.impl.platform.SimplePlatform:
    java.lang.String platformName -> platformName
    java.lang.String toString() -> toString
kotlin.reflect.jvm.internal.impl.platform.TargetPlatform -> kotlin.reflect.jvm.internal.impl.platform.TargetPlatform:
    java.util.Set componentPlatforms -> componentPlatforms
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Set getComponentPlatforms() -> getComponentPlatforms
    int getSize() -> getSize
    int size() -> size
    boolean contains(kotlin.reflect.jvm.internal.impl.platform.SimplePlatform) -> contains
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite -> kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite:
    int memoizedHashCode -> memoizedHashCode
    void <init>() -> <init>
    void writeDelimitedTo(java.io.OutputStream) -> writeDelimitedTo
    kotlin.reflect.jvm.internal.impl.protobuf.UninitializedMessageException newUninitializedMessageException() -> newUninitializedMessageException
kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder -> kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.UninitializedMessageException newUninitializedMessageException(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> newUninitializedMessageException
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder$LimitedInputStream -> kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder$LimitedInputStream:
    int limit -> limit
    void <init>(java.io.InputStream,int) -> <init>
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
kotlin.reflect.jvm.internal.impl.protobuf.AbstractParser -> kotlin.reflect.jvm.internal.impl.protobuf.AbstractParser:
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite EMPTY_REGISTRY -> EMPTY_REGISTRY
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.UninitializedMessageException newUninitializedMessageException(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> newUninitializedMessageException
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite checkMessageInitialized(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> checkMessageInitialized
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parseFrom(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parsePartialFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parsePartialDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialDelimitedFrom
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite parseDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseDelimitedFrom
    java.lang.Object parseDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseDelimitedFrom
    java.lang.Object parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    java.lang.Object parseFrom(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString -> kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString:
    int bytesOffset -> bytesOffset
    int bytesLength -> bytesLength
    void <init>(byte[],int,int) -> <init>
    byte byteAt(int) -> byteAt
    int size() -> size
    int getOffsetIntoBytes() -> getOffsetIntoBytes
    void copyToInternal(byte[],int,int,int) -> copyToInternal
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString$1 -> kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString$1:
kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString$BoundedByteIterator -> kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString$BoundedByteIterator:
    int position -> position
    int limit -> limit
    kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Byte next() -> next
    byte nextByte() -> nextByte
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString,kotlin.reflect.jvm.internal.impl.protobuf.BoundedByteString$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.ByteString -> kotlin.reflect.jvm.internal.impl.protobuf.ByteString:
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString EMPTY -> EMPTY
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString copyFrom(byte[],int,int) -> copyFrom
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString copyFrom(byte[]) -> copyFrom
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString copyFromUtf8(java.lang.String) -> copyFromUtf8
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString concat(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> concat
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString copyFrom(java.lang.Iterable) -> copyFrom
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString balancedConcat(java.util.Iterator,int) -> balancedConcat
    void copyTo(byte[],int,int,int) -> copyTo
    void copyToInternal(byte[],int,int,int) -> copyToInternal
    byte[] toByteArray() -> toByteArray
    void writeTo(java.io.OutputStream,int,int) -> writeTo
    void writeToInternal(java.io.OutputStream,int,int) -> writeToInternal
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toStringUtf8() -> toStringUtf8
    boolean isValidUtf8() -> isValidUtf8
    int partialIsValidUtf8(int,int,int) -> partialIsValidUtf8
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream newCodedInput() -> newCodedInput
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$Output newOutput() -> newOutput
    int getTreeDepth() -> getTreeDepth
    boolean isBalanced() -> isBalanced
    int peekCachedHashCode() -> peekCachedHashCode
    int partialHash(int,int,int) -> partialHash
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator -> kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator:
    byte nextByte() -> nextByte
kotlin.reflect.jvm.internal.impl.protobuf.ByteString$Output -> kotlin.reflect.jvm.internal.impl.protobuf.ByteString$Output:
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    int initialCapacity -> initialCapacity
    java.util.ArrayList flushedBuffers -> flushedBuffers
    int flushedBuffersTotalBytes -> flushedBuffersTotalBytes
    byte[] buffer -> buffer
    int bufferPos -> bufferPos
    void <init>(int) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString toByteString() -> toByteString
    byte[] copyArray(byte[],int) -> copyArray
    int size() -> size
    java.lang.String toString() -> toString
    void flushFullBuffer(int) -> flushFullBuffer
    void flushLastBuffer() -> flushLastBuffer
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream -> kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream:
    byte[] buffer -> buffer
    boolean bufferIsImmutable -> bufferIsImmutable
    int bufferSize -> bufferSize
    int bufferSizeAfterLimit -> bufferSizeAfterLimit
    int bufferPos -> bufferPos
    java.io.InputStream input -> input
    int lastTag -> lastTag
    boolean enableAliasing -> enableAliasing
    int totalBytesRetired -> totalBytesRetired
    int currentLimit -> currentLimit
    int recursionDepth -> recursionDepth
    int recursionLimit -> recursionLimit
    int sizeLimit -> sizeLimit
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream$RefillCallback refillCallback -> refillCallback
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream newInstance(java.io.InputStream) -> newInstance
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream newInstance(kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString) -> newInstance
    int readTag() -> readTag
    void checkLastTagWas(int) -> checkLastTagWas
    boolean skipField(int,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> skipField
    void skipMessage(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> skipMessage
    double readDouble() -> readDouble
    float readFloat() -> readFloat
    long readUInt64() -> readUInt64
    long readInt64() -> readInt64
    int readInt32() -> readInt32
    long readFixed64() -> readFixed64
    int readFixed32() -> readFixed32
    boolean readBool() -> readBool
    java.lang.String readString() -> readString
    java.lang.String readStringRequireUtf8() -> readStringRequireUtf8
    void readGroup(int,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> readGroup
    void readMessage(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> readMessage
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite readMessage(kotlin.reflect.jvm.internal.impl.protobuf.Parser,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> readMessage
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString readBytes() -> readBytes
    int readUInt32() -> readUInt32
    int readEnum() -> readEnum
    int readSFixed32() -> readSFixed32
    long readSFixed64() -> readSFixed64
    int readSInt32() -> readSInt32
    long readSInt64() -> readSInt64
    int readRawVarint32() -> readRawVarint32
    int readRawVarint32(int,java.io.InputStream) -> readRawVarint32
    long readRawVarint64() -> readRawVarint64
    long readRawVarint64SlowPath() -> readRawVarint64SlowPath
    int readRawLittleEndian32() -> readRawLittleEndian32
    long readRawLittleEndian64() -> readRawLittleEndian64
    int decodeZigZag32(int) -> decodeZigZag32
    long decodeZigZag64(long) -> decodeZigZag64
    void <init>(java.io.InputStream) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString) -> <init>
    int pushLimit(int) -> pushLimit
    void recomputeBufferSizeAfterLimit() -> recomputeBufferSizeAfterLimit
    void popLimit(int) -> popLimit
    int getBytesUntilLimit() -> getBytesUntilLimit
    boolean isAtEnd() -> isAtEnd
    void ensureAvailable(int) -> ensureAvailable
    void refillBuffer(int) -> refillBuffer
    boolean tryRefillBuffer(int) -> tryRefillBuffer
    byte readRawByte() -> readRawByte
    byte[] readRawBytesSlowPath(int) -> readRawBytesSlowPath
    void skipRawBytes(int) -> skipRawBytes
    void skipRawBytesSlowPath(int) -> skipRawBytesSlowPath
kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream$RefillCallback -> kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream$RefillCallback:
    void onRefill() -> onRefill
kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream -> kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream:
    byte[] buffer -> buffer
    int limit -> limit
    int position -> position
    int totalBytesWritten -> totalBytesWritten
    java.io.OutputStream output -> output
    int computePreferredBufferSize(int) -> computePreferredBufferSize
    void <init>(java.io.OutputStream,byte[]) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream newInstance(java.io.OutputStream,int) -> newInstance
    void writeDouble(int,double) -> writeDouble
    void writeFloat(int,float) -> writeFloat
    void writeInt32(int,int) -> writeInt32
    void writeBool(int,boolean) -> writeBool
    void writeGroup(int,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> writeGroup
    void writeMessage(int,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> writeMessage
    void writeBytes(int,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> writeBytes
    void writeUInt32(int,int) -> writeUInt32
    void writeEnum(int,int) -> writeEnum
    void writeSInt64(int,long) -> writeSInt64
    void writeMessageSetExtension(int,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> writeMessageSetExtension
    void writeDoubleNoTag(double) -> writeDoubleNoTag
    void writeFloatNoTag(float) -> writeFloatNoTag
    void writeUInt64NoTag(long) -> writeUInt64NoTag
    void writeInt64NoTag(long) -> writeInt64NoTag
    void writeInt32NoTag(int) -> writeInt32NoTag
    void writeFixed64NoTag(long) -> writeFixed64NoTag
    void writeFixed32NoTag(int) -> writeFixed32NoTag
    void writeBoolNoTag(boolean) -> writeBoolNoTag
    void writeStringNoTag(java.lang.String) -> writeStringNoTag
    void writeGroupNoTag(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> writeGroupNoTag
    void writeMessageNoTag(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> writeMessageNoTag
    void writeBytesNoTag(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> writeBytesNoTag
    void writeByteArrayNoTag(byte[]) -> writeByteArrayNoTag
    void writeUInt32NoTag(int) -> writeUInt32NoTag
    void writeEnumNoTag(int) -> writeEnumNoTag
    void writeSFixed32NoTag(int) -> writeSFixed32NoTag
    void writeSFixed64NoTag(long) -> writeSFixed64NoTag
    void writeSInt32NoTag(int) -> writeSInt32NoTag
    void writeSInt64NoTag(long) -> writeSInt64NoTag
    int computeDoubleSize(int,double) -> computeDoubleSize
    int computeFloatSize(int,float) -> computeFloatSize
    int computeInt32Size(int,int) -> computeInt32Size
    int computeBoolSize(int,boolean) -> computeBoolSize
    int computeMessageSize(int,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> computeMessageSize
    int computeBytesSize(int,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> computeBytesSize
    int computeEnumSize(int,int) -> computeEnumSize
    int computeSInt64Size(int,long) -> computeSInt64Size
    int computeDoubleSizeNoTag(double) -> computeDoubleSizeNoTag
    int computeFloatSizeNoTag(float) -> computeFloatSizeNoTag
    int computeUInt64SizeNoTag(long) -> computeUInt64SizeNoTag
    int computeInt64SizeNoTag(long) -> computeInt64SizeNoTag
    int computeInt32SizeNoTag(int) -> computeInt32SizeNoTag
    int computeFixed64SizeNoTag(long) -> computeFixed64SizeNoTag
    int computeFixed32SizeNoTag(int) -> computeFixed32SizeNoTag
    int computeBoolSizeNoTag(boolean) -> computeBoolSizeNoTag
    int computeStringSizeNoTag(java.lang.String) -> computeStringSizeNoTag
    int computeGroupSizeNoTag(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> computeGroupSizeNoTag
    int computeMessageSizeNoTag(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> computeMessageSizeNoTag
    int computeLazyFieldSizeNoTag(kotlin.reflect.jvm.internal.impl.protobuf.LazyFieldLite) -> computeLazyFieldSizeNoTag
    int computeBytesSizeNoTag(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> computeBytesSizeNoTag
    int computeByteArraySizeNoTag(byte[]) -> computeByteArraySizeNoTag
    int computeUInt32SizeNoTag(int) -> computeUInt32SizeNoTag
    int computeEnumSizeNoTag(int) -> computeEnumSizeNoTag
    int computeSFixed32SizeNoTag(int) -> computeSFixed32SizeNoTag
    int computeSFixed64SizeNoTag(long) -> computeSFixed64SizeNoTag
    int computeSInt32SizeNoTag(int) -> computeSInt32SizeNoTag
    int computeSInt64SizeNoTag(long) -> computeSInt64SizeNoTag
    void refreshBuffer() -> refreshBuffer
    void flush() -> flush
    void writeRawByte(byte) -> writeRawByte
    void writeRawByte(int) -> writeRawByte
    void writeRawBytes(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> writeRawBytes
    void writeRawBytes(byte[]) -> writeRawBytes
    void writeRawBytes(byte[],int,int) -> writeRawBytes
    void writeRawBytes(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,int,int) -> writeRawBytes
    void writeTag(int,int) -> writeTag
    int computeTagSize(int) -> computeTagSize
    void writeRawVarint32(int) -> writeRawVarint32
    int computeRawVarint32Size(int) -> computeRawVarint32Size
    void writeRawVarint64(long) -> writeRawVarint64
    int computeRawVarint64Size(long) -> computeRawVarint64Size
    void writeRawLittleEndian32(int) -> writeRawLittleEndian32
    void writeRawLittleEndian64(long) -> writeRawLittleEndian64
    int encodeZigZag32(int) -> encodeZigZag32
    long encodeZigZag64(long) -> encodeZigZag64
kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream$OutOfSpaceException -> kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream$OutOfSpaceException:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite -> kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite:
    boolean eagerlyParseMessageSets -> eagerlyParseMessageSets
    java.util.Map extensionsByNumber -> extensionsByNumber
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite newInstance() -> newInstance
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite getEmptyRegistry() -> getEmptyRegistry
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension findLiteExtensionByNumber(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,int) -> findLiteExtensionByNumber
    void add(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> add
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite$ObjectIntPair -> kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite$ObjectIntPair:
    java.lang.Object object -> object
    int number -> number
    void <init>(java.lang.Object,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.protobuf.FieldSet -> kotlin.reflect.jvm.internal.impl.protobuf.FieldSet:
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap fields -> fields
    boolean isImmutable -> isImmutable
    boolean hasLazyField -> hasLazyField
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet DEFAULT_INSTANCE -> DEFAULT_INSTANCE
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet newFieldSet() -> newFieldSet
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet emptySet() -> emptySet
    void makeImmutable() -> makeImmutable
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet clone() -> clone
    java.util.Iterator iterator() -> iterator
    boolean hasField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite) -> hasField
    java.lang.Object getField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite) -> getField
    void setField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> setField
    int getRepeatedFieldCount(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite) -> getRepeatedFieldCount
    java.lang.Object getRepeatedField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite,int) -> getRepeatedField
    void addRepeatedField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> addRepeatedField
    void verifyType(kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,java.lang.Object) -> verifyType
    boolean isInitialized() -> isInitialized
    boolean isInitialized(java.util.Map$Entry) -> isInitialized
    int getWireFormatForFieldType(kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,boolean) -> getWireFormatForFieldType
    void mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet) -> mergeFrom
    java.lang.Object cloneIfMutable(java.lang.Object) -> cloneIfMutable
    void mergeFromField(java.util.Map$Entry) -> mergeFromField
    java.lang.Object readPrimitiveField(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,boolean) -> readPrimitiveField
    void writeElement(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,int,java.lang.Object) -> writeElement
    void writeElementNoTag(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,java.lang.Object) -> writeElementNoTag
    void writeField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeField
    int getSerializedSize() -> getSerializedSize
    int computeElementSize(kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,int,java.lang.Object) -> computeElementSize
    int computeElementSizeNoTag(kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,java.lang.Object) -> computeElementSizeNoTag
    int computeFieldSize(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> computeFieldSize
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$1 -> kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$1:
    int[] $SwitchMap$com$google$protobuf$WireFormat$JavaType -> $SwitchMap$com$google$protobuf$WireFormat$JavaType
    int[] $SwitchMap$com$google$protobuf$WireFormat$FieldType -> $SwitchMap$com$google$protobuf$WireFormat$FieldType
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite -> kotlin.reflect.jvm.internal.impl.protobuf.FieldSet$FieldDescriptorLite:
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType getLiteType() -> getLiteType
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType getLiteJavaType() -> getLiteJavaType
    boolean isRepeated() -> isRepeated
    boolean isPacked() -> isPacked
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder internalMergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> internalMergeFrom
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite:
    void <init>() -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    boolean parseUnknownField(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,int) -> parseUnknownField
    void makeExtensionsImmutable() -> makeExtensionsImmutable
    boolean parseUnknownField(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,int) -> parseUnknownField
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension newSingularGeneratedExtension(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,java.lang.Object,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,java.lang.Class) -> newSingularGeneratedExtension
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension newRepeatedGeneratedExtension(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,boolean,java.lang.Class) -> newRepeatedGeneratedExtension
    java.lang.reflect.Method getMethodOrDie(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethodOrDie
    java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> invokeOrDie
    boolean access$100(kotlin.reflect.jvm.internal.impl.protobuf.FieldSet,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,int) -> access$100
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$1 -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$1:
    int[] $SwitchMap$com$google$protobuf$WireFormat$JavaType -> $SwitchMap$com$google$protobuf$WireFormat$JavaType
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder:
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString unknownFields -> unknownFields
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite) -> mergeFrom
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString getUnknownFields() -> getUnknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder setUnknownFields(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> setUnknownFields
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    java.lang.Object clone() -> clone
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder:
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet extensions -> extensions
    boolean extensionsIsMutable -> extensionsIsMutable
    void <init>() -> <init>
    void ensureExtensionsIsMutable() -> ensureExtensionsIsMutable
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet buildExtensions() -> buildExtensions
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> clone
    boolean extensionsAreInitialized() -> extensionsAreInitialized
    void mergeExtensionFields(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage) -> mergeExtensionFields
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$Builder clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet access$000(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> access$000
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage:
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet extensions -> extensions
    void <init>() -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableBuilder) -> <init>
    void verifyExtensionContainingType(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> verifyExtensionContainingType
    boolean hasExtension(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> hasExtension
    int getExtensionCount(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> getExtensionCount
    java.lang.Object getExtension(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> getExtension
    java.lang.Object getExtension(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,int) -> getExtension
    boolean extensionsAreInitialized() -> extensionsAreInitialized
    boolean parseUnknownField(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,int) -> parseUnknownField
    void makeExtensionsImmutable() -> makeExtensionsImmutable
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage$ExtensionWriter newExtensionWriter() -> newExtensionWriter
    int extensionsSerializedSize() -> extensionsSerializedSize
    kotlin.reflect.jvm.internal.impl.protobuf.FieldSet access$200(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage) -> access$200
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage$ExtensionWriter -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage$ExtensionWriter:
    java.util.Iterator iter -> iter
    java.util.Map$Entry next -> next
    boolean messageSetWireFormat -> messageSetWireFormat
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage,boolean) -> <init>
    void writeUntil(int,kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeUntil
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessage,boolean,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessageOrBuilder -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtendableMessageOrBuilder:
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtensionDescriptor -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtensionDescriptor:
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap enumTypeMap -> enumTypeMap
    int number -> number
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType type -> type
    boolean isRepeated -> isRepeated
    boolean isPacked -> isPacked
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType,boolean,boolean) -> <init>
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType getLiteType() -> getLiteType
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType getLiteJavaType() -> getLiteJavaType
    boolean isRepeated() -> isRepeated
    boolean isPacked() -> isPacked
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap getEnumType() -> getEnumType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder internalMergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> internalMergeFrom
    int compareTo(kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtensionDescriptor) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension -> kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite containingTypeDefaultInstance -> containingTypeDefaultInstance
    java.lang.Object defaultValue -> defaultValue
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite messageDefaultInstance -> messageDefaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtensionDescriptor descriptor -> descriptor
    java.lang.Class singularType -> singularType
    java.lang.reflect.Method enumValueOf -> enumValueOf
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,java.lang.Object,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$ExtensionDescriptor,java.lang.Class) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getContainingTypeDefaultInstance() -> getContainingTypeDefaultInstance
    int getNumber() -> getNumber
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getMessageDefaultInstance() -> getMessageDefaultInstance
    java.lang.Object fromFieldSetType(java.lang.Object) -> fromFieldSetType
    java.lang.Object singularFromFieldSetType(java.lang.Object) -> singularFromFieldSetType
    java.lang.Object singularToFieldSetType(java.lang.Object) -> singularToFieldSetType
kotlin.reflect.jvm.internal.impl.protobuf.Internal -> kotlin.reflect.jvm.internal.impl.protobuf.Internal:
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.nio.ByteBuffer EMPTY_BYTE_BUFFER -> EMPTY_BYTE_BUFFER
    boolean isValidUtf8(byte[]) -> isValidUtf8
    java.lang.String toStringUtf8(byte[]) -> toStringUtf8
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite -> kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite:
    int getNumber() -> getNumber
kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap -> kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLiteMap:
    kotlin.reflect.jvm.internal.impl.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException -> kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite unfinishedMessage -> unfinishedMessage
    void <init>(java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException setUnfinishedMessage(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> setUnfinishedMessage
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getUnfinishedMessage() -> getUnfinishedMessage
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException truncatedMessage() -> truncatedMessage
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException negativeSize() -> negativeSize
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException malformedVarint() -> malformedVarint
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException invalidTag() -> invalidTag
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException invalidEndTag() -> invalidEndTag
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException invalidWireType() -> invalidWireType
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException recursionLimitExceeded() -> recursionLimitExceeded
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException sizeLimitExceeded() -> sizeLimitExceeded
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException invalidUtf8() -> invalidUtf8
kotlin.reflect.jvm.internal.impl.protobuf.LazyField -> kotlin.reflect.jvm.internal.impl.protobuf.LazyField:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite defaultInstance -> defaultInstance
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getValue() -> getValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
kotlin.reflect.jvm.internal.impl.protobuf.LazyField$1 -> kotlin.reflect.jvm.internal.impl.protobuf.LazyField$1:
kotlin.reflect.jvm.internal.impl.protobuf.LazyField$LazyEntry -> kotlin.reflect.jvm.internal.impl.protobuf.LazyField$LazyEntry:
    java.util.Map$Entry entry -> entry
    void <init>(java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    void <init>(java.util.Map$Entry,kotlin.reflect.jvm.internal.impl.protobuf.LazyField$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.LazyField$LazyIterator -> kotlin.reflect.jvm.internal.impl.protobuf.LazyField$LazyIterator:
    java.util.Iterator iterator -> iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
kotlin.reflect.jvm.internal.impl.protobuf.LazyFieldLite -> kotlin.reflect.jvm.internal.impl.protobuf.LazyFieldLite:
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString bytes -> bytes
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite extensionRegistry -> extensionRegistry
    boolean isDirty -> isDirty
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite value -> value
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getValue(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> getValue
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite setValue(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> setValue
    int getSerializedSize() -> getSerializedSize
    void ensureInitialized(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> ensureInitialized
kotlin.reflect.jvm.internal.impl.protobuf.LazyStringArrayList -> kotlin.reflect.jvm.internal.impl.protobuf.LazyStringArrayList:
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList EMPTY -> EMPTY
    java.util.List list -> list
    void <init>() -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList) -> <init>
    java.lang.String get(int) -> get
    int size() -> size
    java.lang.String set(int,java.lang.String) -> set
    void add(int,java.lang.String) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.String remove(int) -> remove
    void clear() -> clear
    void add(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> add
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString getByteString(int) -> getByteString
    java.lang.String asString(java.lang.Object) -> asString
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString asByteString(java.lang.Object) -> asByteString
    java.util.List getUnderlyingElements() -> getUnderlyingElements
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList getUnmodifiableView() -> getUnmodifiableView
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList -> kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList:
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString getByteString(int) -> getByteString
    void add(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> add
    java.util.List getUnderlyingElements() -> getUnderlyingElements
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList getUnmodifiableView() -> getUnmodifiableView
kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString -> kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString:
    byte[] bytes -> bytes
    int hash -> hash
    void <init>(byte[]) -> <init>
    byte byteAt(int) -> byteAt
    int size() -> size
    void copyToInternal(byte[],int,int,int) -> copyToInternal
    void writeToInternal(java.io.OutputStream,int,int) -> writeToInternal
    java.lang.String toString(java.lang.String) -> toString
    boolean isValidUtf8() -> isValidUtf8
    int partialIsValidUtf8(int,int,int) -> partialIsValidUtf8
    boolean equals(java.lang.Object) -> equals
    boolean equalsRange(kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString,int,int) -> equalsRange
    int hashCode() -> hashCode
    int peekCachedHashCode() -> peekCachedHashCode
    int partialHash(int,int,int) -> partialHash
    int hashCode(int,byte[],int,int) -> hashCode
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream newCodedInput() -> newCodedInput
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator iterator() -> iterator
    int getTreeDepth() -> getTreeDepth
    boolean isBalanced() -> isBalanced
    int getOffsetIntoBytes() -> getOffsetIntoBytes
    java.util.Iterator iterator() -> iterator
kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString$1 -> kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString$1:
kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString$LiteralByteIterator -> kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString$LiteralByteIterator:
    int position -> position
    int limit -> limit
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Byte next() -> next
    byte nextByte() -> nextByte
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString,kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.MessageLite -> kotlin.reflect.jvm.internal.impl.protobuf.MessageLite:
    void writeTo(kotlin.reflect.jvm.internal.impl.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    kotlin.reflect.jvm.internal.impl.protobuf.Parser getParserForType() -> getParserForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder toBuilder() -> toBuilder
kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder -> kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite build() -> build
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite$Builder mergeFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> mergeFrom
kotlin.reflect.jvm.internal.impl.protobuf.MessageLiteOrBuilder -> kotlin.reflect.jvm.internal.impl.protobuf.MessageLiteOrBuilder:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean isInitialized() -> isInitialized
kotlin.reflect.jvm.internal.impl.protobuf.Parser -> kotlin.reflect.jvm.internal.impl.protobuf.Parser:
    java.lang.Object parsePartialFrom(kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    java.lang.Object parseFrom(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    java.lang.Object parseFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseFrom
    java.lang.Object parseDelimitedFrom(java.io.InputStream,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite) -> parseDelimitedFrom
kotlin.reflect.jvm.internal.impl.protobuf.ProtocolStringList -> kotlin.reflect.jvm.internal.impl.protobuf.ProtocolStringList:
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString:
    int[] minLengthByDepth -> minLengthByDepth
    int totalLength -> totalLength
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString left -> left
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString right -> right
    int leftLength -> leftLength
    int treeDepth -> treeDepth
    int hash -> hash
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString concatenate(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> concatenate
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString concatenateBytes(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> concatenateBytes
    int size() -> size
    int getTreeDepth() -> getTreeDepth
    boolean isBalanced() -> isBalanced
    void copyToInternal(byte[],int,int,int) -> copyToInternal
    void writeToInternal(java.io.OutputStream,int,int) -> writeToInternal
    java.lang.String toString(java.lang.String) -> toString
    boolean isValidUtf8() -> isValidUtf8
    int partialIsValidUtf8(int,int,int) -> partialIsValidUtf8
    boolean equals(java.lang.Object) -> equals
    boolean equalsFragments(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> equalsFragments
    int hashCode() -> hashCode
    int peekCachedHashCode() -> peekCachedHashCode
    int partialHash(int,int,int) -> partialHash
    kotlin.reflect.jvm.internal.impl.protobuf.CodedInputStream newCodedInput() -> newCodedInput
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$400(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString) -> access$400
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$500(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString) -> access$500
    int[] access$600() -> access$600
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1 -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1:
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$Balancer -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$Balancer:
    java.util.Stack prefixesStack -> prefixesStack
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString balance(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> balance
    void doBalance(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> doBalance
    void insert(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> insert
    int getDepthBinForLength(int) -> getDepthBinForLength
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString access$100(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$Balancer,kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> access$100
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$PieceIterator -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$PieceIterator:
    java.util.Stack breadCrumbs -> breadCrumbs
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString next -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString getLeafByLeft(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> getLeafByLeft
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString getNextNonEmptyLeaf() -> getNextNonEmptyLeaf
    boolean hasNext() -> hasNext
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.ByteString,kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$RopeByteIterator -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$RopeByteIterator:
    kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$PieceIterator pieces -> pieces
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString$ByteIterator bytes -> bytes
    int bytesRemaining -> bytesRemaining
    kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Byte next() -> next
    byte nextByte() -> nextByte
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString,kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$RopeInputStream -> kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$RopeInputStream:
    kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString$PieceIterator pieceIterator -> pieceIterator
    kotlin.reflect.jvm.internal.impl.protobuf.LiteralByteString currentPiece -> currentPiece
    int currentPieceSize -> currentPieceSize
    int currentPieceIndex -> currentPieceIndex
    int currentPieceOffsetInRope -> currentPieceOffsetInRope
    int mark -> mark
    kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.RopeByteString) -> <init>
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int readSkipInternal(byte[],int,int) -> readSkipInternal
    int read() -> read
    int available() -> available
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void initialize() -> initialize
    void advanceIfCurrentPieceFullyRead() -> advanceIfCurrentPieceFullyRead
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap:
    int maxArraySize -> maxArraySize
    java.util.List entryList -> entryList
    java.util.Map overflowEntries -> overflowEntries
    boolean isImmutable -> isImmutable
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EntrySet lazyEntrySet -> lazyEntrySet
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap newFieldMap(int) -> newFieldMap
    void <init>(int) -> <init>
    void makeImmutable() -> makeImmutable
    boolean isImmutable() -> isImmutable
    int getNumArrayEntries() -> getNumArrayEntries
    java.util.Map$Entry getArrayEntryAt(int) -> getArrayEntryAt
    java.lang.Iterable getOverflowEntries() -> getOverflowEntries
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Comparable,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeArrayEntryAt(int) -> removeArrayEntryAt
    int binarySearchInArray(java.lang.Comparable) -> binarySearchInArray
    java.util.Set entrySet() -> entrySet
    void checkMutable() -> checkMutable
    java.util.SortedMap getOverflowEntriesMutable() -> getOverflowEntriesMutable
    void ensureEntryArrayMutable() -> ensureEntryArrayMutable
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void <init>(int,kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$1) -> <init>
    void access$200(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap) -> access$200
    java.util.List access$400(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap) -> access$400
    java.lang.Object access$500(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap,int) -> access$500
    java.util.Map access$600(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap) -> access$600
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$1 -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$1:
    void <init>(int) -> <init>
    void makeImmutable() -> makeImmutable
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet:
    java.util.Iterator ITERATOR -> ITERATOR
    java.lang.Iterable ITERABLE -> ITERABLE
    java.lang.Iterable iterable() -> iterable
    java.util.Iterator access$700() -> access$700
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet$1 -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet$1:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet$2 -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EmptySet$2:
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$Entry -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$Entry:
    java.lang.Comparable key -> key
    java.lang.Object value -> value
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap,java.util.Map$Entry) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap,java.lang.Comparable,java.lang.Object) -> <init>
    java.lang.Comparable getKey() -> getKey
    java.lang.Object getValue() -> getValue
    int compareTo(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$Entry) -> compareTo
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    int compareTo(java.lang.Object) -> compareTo
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EntryIterator -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EntryIterator:
    int pos -> pos
    boolean nextCalledBeforeRemove -> nextCalledBeforeRemove
    java.util.Iterator lazyOverflowIterator -> lazyOverflowIterator
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.util.Iterator getOverflowIterator() -> getOverflowIterator
    java.lang.Object next() -> next
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap,kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EntrySet -> kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$EntrySet:
    kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean add(java.util.Map$Entry) -> add
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap,kotlin.reflect.jvm.internal.impl.protobuf.SmallSortedMap$1) -> <init>
kotlin.reflect.jvm.internal.impl.protobuf.UninitializedMessageException -> kotlin.reflect.jvm.internal.impl.protobuf.UninitializedMessageException:
    java.util.List missingFields -> missingFields
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException() -> asInvalidProtocolBufferException
kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList -> kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList:
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList list -> list
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList) -> <init>
    java.lang.String get(int) -> get
    int size() -> size
    kotlin.reflect.jvm.internal.impl.protobuf.ByteString getByteString(int) -> getByteString
    void add(kotlin.reflect.jvm.internal.impl.protobuf.ByteString) -> add
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.Iterator iterator() -> iterator
    java.util.List getUnderlyingElements() -> getUnderlyingElements
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList getUnmodifiableView() -> getUnmodifiableView
    java.lang.Object get(int) -> get
    kotlin.reflect.jvm.internal.impl.protobuf.LazyStringList access$000(kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList) -> access$000
kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList$1 -> kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList$1:
    java.util.ListIterator iter -> iter
    int val$index -> val$index
    kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.String previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.String) -> set
    void add(java.lang.String) -> add
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList$2 -> kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList$2:
    java.util.Iterator iter -> iter
    kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.UnmodifiableLazyStringList) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
kotlin.reflect.jvm.internal.impl.protobuf.Utf8 -> kotlin.reflect.jvm.internal.impl.protobuf.Utf8:
    boolean isValidUtf8(byte[]) -> isValidUtf8
    boolean isValidUtf8(byte[],int,int) -> isValidUtf8
    int partialIsValidUtf8(int,byte[],int,int) -> partialIsValidUtf8
    int partialIsValidUtf8(byte[],int,int) -> partialIsValidUtf8
    int partialIsValidUtf8NonAscii(byte[],int,int) -> partialIsValidUtf8NonAscii
    int incompleteStateFor(int) -> incompleteStateFor
    int incompleteStateFor(int,int) -> incompleteStateFor
    int incompleteStateFor(int,int,int) -> incompleteStateFor
    int incompleteStateFor(byte[],int,int) -> incompleteStateFor
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat:
    int MESSAGE_SET_ITEM_TAG -> MESSAGE_SET_ITEM_TAG
    int MESSAGE_SET_ITEM_END_TAG -> MESSAGE_SET_ITEM_END_TAG
    int MESSAGE_SET_TYPE_ID_TAG -> MESSAGE_SET_TYPE_ID_TAG
    int MESSAGE_SET_MESSAGE_TAG -> MESSAGE_SET_MESSAGE_TAG
    int getTagWireType(int) -> getTagWireType
    int getTagFieldNumber(int) -> getTagFieldNumber
    int makeTag(int,int) -> makeTag
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$1 -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$1:
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType:
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType DOUBLE -> DOUBLE
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType FLOAT -> FLOAT
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType INT64 -> INT64
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType UINT64 -> UINT64
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType INT32 -> INT32
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType FIXED64 -> FIXED64
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType FIXED32 -> FIXED32
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType BOOL -> BOOL
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType STRING -> STRING
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType GROUP -> GROUP
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType MESSAGE -> MESSAGE
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType BYTES -> BYTES
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType UINT32 -> UINT32
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType ENUM -> ENUM
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType SFIXED32 -> SFIXED32
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType SFIXED64 -> SFIXED64
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType SINT32 -> SINT32
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType SINT64 -> SINT64
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType javaType -> javaType
    int wireType -> wireType
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType[] values() -> values
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int) -> <init>
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType getJavaType() -> getJavaType
    int getWireType() -> getWireType
    boolean isPackable() -> isPackable
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$1) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$1 -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$1:
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int) -> <init>
    boolean isPackable() -> isPackable
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$2 -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$2:
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int) -> <init>
    boolean isPackable() -> isPackable
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$3 -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$3:
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int) -> <init>
    boolean isPackable() -> isPackable
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$4 -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$FieldType$4:
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType,int) -> <init>
    boolean isPackable() -> isPackable
kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType -> kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType:
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType INT -> INT
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType LONG -> LONG
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType FLOAT -> FLOAT
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType DOUBLE -> DOUBLE
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType BOOLEAN -> BOOLEAN
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType STRING -> STRING
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType BYTE_STRING -> BYTE_STRING
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType ENUM -> ENUM
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType MESSAGE -> MESSAGE
    java.lang.Object defaultDefault -> defaultDefault
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType[] values() -> values
    kotlin.reflect.jvm.internal.impl.protobuf.WireFormat$JavaType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Object) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy -> kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy:
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy NO_ARGUMENTS -> NO_ARGUMENTS
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy UNLESS_EMPTY -> UNLESS_EMPTY
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy ALWAYS_PARENTHESIZED -> ALWAYS_PARENTHESIZED
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy[] $VALUES -> $VALUES
    boolean includeAnnotationArguments -> includeAnnotationArguments
    boolean includeEmptyAnnotationArguments -> includeEmptyAnnotationArguments
    void <clinit>() -> <clinit>
    boolean getIncludeAnnotationArguments() -> getIncludeAnnotationArguments
    boolean getIncludeEmptyAnnotationArguments() -> getIncludeEmptyAnnotationArguments
    void <init>(java.lang.String,int,boolean,boolean) -> <init>
    void <init>(java.lang.String,int,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy -> kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy:
    java.lang.String renderClassifier(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer) -> renderClassifier
kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$FULLY_QUALIFIED -> kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$FULLY_QUALIFIED:
    kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$FULLY_QUALIFIED INSTANCE -> INSTANCE
    java.lang.String renderClassifier(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer) -> renderClassifier
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SHORT -> kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SHORT:
    kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SHORT INSTANCE -> INSTANCE
    java.lang.String renderClassifier(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer) -> renderClassifier
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED -> kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED:
    kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy$SOURCE_CODE_QUALIFIED INSTANCE -> INSTANCE
    java.lang.String renderClassifier(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer) -> renderClassifier
    java.lang.String qualifiedNameForSourceCode(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) -> qualifiedNameForSourceCode
    java.lang.String qualifierName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> qualifierName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer COMPACT_WITH_MODIFIERS -> COMPACT_WITH_MODIFIERS
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer COMPACT -> COMPACT
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer COMPACT_WITHOUT_SUPERTYPES -> COMPACT_WITHOUT_SUPERTYPES
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer COMPACT_WITH_SHORT_TYPES -> COMPACT_WITH_SHORT_TYPES
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer ONLY_NAMES_WITH_SHORT_TYPES -> ONLY_NAMES_WITH_SHORT_TYPES
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer FQ_NAMES_IN_TYPES -> FQ_NAMES_IN_TYPES
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer SHORT_NAMES_IN_TYPES -> SHORT_NAMES_IN_TYPES
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer DEBUG_TEXT -> DEBUG_TEXT
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer HTML -> HTML
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer withOptions(kotlin.jvm.functions.Function1) -> withOptions
    java.lang.String renderType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderType
    java.lang.String renderFlexibleType(java.lang.String,java.lang.String,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> renderFlexibleType
    java.lang.String renderTypeProjection(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> renderTypeProjection
    java.lang.String renderAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget) -> renderAnnotation
    java.lang.String renderAnnotation$default(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget,int,java.lang.Object) -> renderAnnotation$default
    java.lang.String render(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> render
    java.lang.String renderName(kotlin.reflect.jvm.internal.impl.name.Name,boolean) -> renderName
    java.lang.String renderFqName(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> renderFqName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer withOptions(kotlin.jvm.functions.Function1) -> withOptions
    java.lang.String getClassifierKindPrefix(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters) -> getClassifierKindPrefix
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITHOUT_SUPERTYPES$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITHOUT_SUPERTYPES$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITHOUT_SUPERTYPES$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_MODIFIERS$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_MODIFIERS$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_MODIFIERS$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_SHORT_TYPES$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_SHORT_TYPES$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$COMPACT_WITH_SHORT_TYPES$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$DEBUG_TEXT$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$DEBUG_TEXT$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$DEBUG_TEXT$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$FQ_NAMES_IN_TYPES$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$FQ_NAMES_IN_TYPES$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$FQ_NAMES_IN_TYPES$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$HTML$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$HTML$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$HTML$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$ONLY_NAMES_WITH_SHORT_TYPES$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$ONLY_NAMES_WITH_SHORT_TYPES$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$ONLY_NAMES_WITH_SHORT_TYPES$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$SHORT_NAMES_IN_TYPES$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$SHORT_NAMES_IN_TYPES$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$SHORT_NAMES_IN_TYPES$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$WhenMappings -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$Companion$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler:
    void appendBeforeValueParameters(int,java.lang.StringBuilder) -> appendBeforeValueParameters
    void appendAfterValueParameters(int,java.lang.StringBuilder) -> appendAfterValueParameters
    void appendBeforeValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,int,java.lang.StringBuilder) -> appendBeforeValueParameter
    void appendAfterValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,int,java.lang.StringBuilder) -> appendAfterValueParameter
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler$DEFAULT INSTANCE -> INSTANCE
    void appendBeforeValueParameters(int,java.lang.StringBuilder) -> appendBeforeValueParameters
    void appendAfterValueParameters(int,java.lang.StringBuilder) -> appendAfterValueParameters
    void appendBeforeValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,int,java.lang.StringBuilder) -> appendBeforeValueParameter
    void appendAfterValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,int,int,java.lang.StringBuilder) -> appendAfterValueParameter
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy functionTypeAnnotationsRenderer$delegate -> functionTypeAnnotationsRenderer$delegate
    kotlin.Lazy functionTypeParameterTypesRenderer$delegate -> functionTypeParameterTypesRenderer$delegate
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl options -> options
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl getFunctionTypeAnnotationsRenderer() -> getFunctionTypeAnnotationsRenderer
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer getFunctionTypeParameterTypesRenderer() -> getFunctionTypeParameterTypesRenderer
    java.lang.String renderKeyword(java.lang.String) -> renderKeyword
    java.lang.String renderError(java.lang.String) -> renderError
    java.lang.String escape(java.lang.String) -> escape
    java.lang.String lt() -> lt
    java.lang.String gt() -> gt
    java.lang.String arrow() -> arrow
    java.lang.String renderMessage(java.lang.String) -> renderMessage
    java.lang.String renderName(kotlin.reflect.jvm.internal.impl.name.Name,boolean) -> renderName
    void renderName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.StringBuilder,boolean) -> renderName
    void renderCompanionObjectName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.StringBuilder) -> renderCompanionObjectName
    java.lang.String renderFqName(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> renderFqName
    java.lang.String renderFqName(java.util.List) -> renderFqName
    java.lang.String renderClassifierName(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) -> renderClassifierName
    java.lang.String renderType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderType
    void renderNormalizedType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderNormalizedType
    void renderAbbreviatedTypeExpansion(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.AbbreviatedType) -> renderAbbreviatedTypeExpansion
    void renderNormalizedTypeAsIs(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderNormalizedTypeAsIs
    void renderSimpleType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> renderSimpleType
    boolean shouldRenderAsPrettyFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> shouldRenderAsPrettyFunctionType
    java.lang.String renderFlexibleType(java.lang.String,java.lang.String,kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> renderFlexibleType
    java.lang.String renderTypeArguments(java.util.List) -> renderTypeArguments
    void renderDefaultType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderDefaultType
    void renderTypeConstructorAndArguments(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> renderTypeConstructorAndArguments
    void renderTypeConstructorAndArguments$default(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,int,java.lang.Object) -> renderTypeConstructorAndArguments$default
    void renderPossiblyInnerType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType) -> renderPossiblyInnerType
    java.lang.String renderTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> renderTypeConstructor
    java.lang.String renderTypeProjection(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> renderTypeProjection
    void appendTypeProjections(java.lang.StringBuilder,java.util.List) -> appendTypeProjections
    void renderFunctionType(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> renderFunctionType
    boolean hasModifiersOrAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> hasModifiersOrAnnotations
    void appendDefinedIn(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> appendDefinedIn
    void renderAnnotations(java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget) -> renderAnnotations
    void renderAnnotations$default(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotated,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget,int,java.lang.Object) -> renderAnnotations$default
    java.lang.String renderAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationUseSiteTarget) -> renderAnnotation
    java.util.List renderAndSortAnnotationArguments(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> renderAndSortAnnotationArguments
    java.lang.String renderConstant(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue) -> renderConstant
    boolean renderVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.lang.StringBuilder) -> renderVisibility
    void renderModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality,java.lang.StringBuilder,kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> renderModality
    kotlin.reflect.jvm.internal.impl.descriptors.Modality implicitModalityWithoutExtensions(kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor) -> implicitModalityWithoutExtensions
    void renderModalityForCallable(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.lang.StringBuilder) -> renderModalityForCallable
    void renderOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.lang.StringBuilder) -> renderOverride
    void renderMemberKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.lang.StringBuilder) -> renderMemberKind
    void renderModifier(java.lang.StringBuilder,boolean,java.lang.String) -> renderModifier
    void renderMemberModifiers(kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor,java.lang.StringBuilder) -> renderMemberModifiers
    void renderAdditionalModifiers(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.StringBuilder) -> renderAdditionalModifiers
    void renderSuspendModifier(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.StringBuilder) -> renderSuspendModifier
    java.lang.String render(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> render
    void renderTypeParameter(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.StringBuilder,boolean) -> renderTypeParameter
    void renderTypeParameters(java.util.List,java.lang.StringBuilder,boolean) -> renderTypeParameters
    void renderTypeParameterList(java.lang.StringBuilder,java.util.List) -> renderTypeParameterList
    void renderFunction(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.StringBuilder) -> renderFunction
    void renderReceiverAfterName(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.lang.StringBuilder) -> renderReceiverAfterName
    void renderReceiver(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.lang.StringBuilder) -> renderReceiver
    void renderConstructor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.StringBuilder) -> renderConstructor
    void renderWhereSuffix(java.util.List,java.lang.StringBuilder) -> renderWhereSuffix
    void renderValueParameters(java.util.Collection,boolean,java.lang.StringBuilder) -> renderValueParameters
    boolean shouldRenderParameterNames(boolean) -> shouldRenderParameterNames
    void renderValueParameter(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,boolean,java.lang.StringBuilder,boolean) -> renderValueParameter
    void renderValVarPrefix(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,java.lang.StringBuilder,boolean) -> renderValVarPrefix
    void renderValVarPrefix$default(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,java.lang.StringBuilder,boolean,int,java.lang.Object) -> renderValVarPrefix$default
    void renderVariable(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,boolean,java.lang.StringBuilder,boolean,boolean) -> renderVariable
    void renderProperty(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.StringBuilder) -> renderProperty
    void renderPropertyAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.StringBuilder) -> renderPropertyAnnotations
    void renderInitializer(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,java.lang.StringBuilder) -> renderInitializer
    void renderTypeAlias(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.StringBuilder) -> renderTypeAlias
    void renderCapturedTypeParametersIfRequired(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters,java.lang.StringBuilder) -> renderCapturedTypeParametersIfRequired
    void renderClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.StringBuilder) -> renderClass
    void renderSuperTypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.StringBuilder) -> renderSuperTypes
    void renderClassKindPrefix(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.StringBuilder) -> renderClassKindPrefix
    void renderPackageView(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.StringBuilder) -> renderPackageView
    void renderPackageFragment(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.StringBuilder) -> renderPackageFragment
    void renderPackageHeader(kotlin.reflect.jvm.internal.impl.name.FqName,java.lang.String,java.lang.StringBuilder) -> renderPackageHeader
    void renderAccessorModifiers(kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor,java.lang.StringBuilder) -> renderAccessorModifiers
    void renderSpaceIfNeeded(java.lang.StringBuilder) -> renderSpaceIfNeeded
    java.lang.String replacePrefixes(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> replacePrefixes
    boolean differsOnlyInNullability(java.lang.String,java.lang.String) -> differsOnlyInNullability
    boolean overridesSomething(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> overridesSomething
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl getOptions() -> getOptions
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl) -> <init>
    boolean getActualPropertiesInPrimaryConstructor() -> getActualPropertiesInPrimaryConstructor
    boolean getAlwaysRenderModifiers() -> getAlwaysRenderModifiers
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy getAnnotationArgumentsRenderingPolicy() -> getAnnotationArgumentsRenderingPolicy
    void setAnnotationArgumentsRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy) -> setAnnotationArgumentsRenderingPolicy
    kotlin.jvm.functions.Function1 getAnnotationFilter() -> getAnnotationFilter
    boolean getBoldOnlyForNamesInHtml() -> getBoldOnlyForNamesInHtml
    boolean getClassWithPrimaryConstructor() -> getClassWithPrimaryConstructor
    kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy getClassifierNamePolicy() -> getClassifierNamePolicy
    void setClassifierNamePolicy(kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy) -> setClassifierNamePolicy
    boolean getDebugMode() -> getDebugMode
    void setDebugMode(boolean) -> setDebugMode
    kotlin.jvm.functions.Function1 getDefaultParameterValueRenderer() -> getDefaultParameterValueRenderer
    boolean getEachAnnotationOnNewLine() -> getEachAnnotationOnNewLine
    boolean getEnhancedTypes() -> getEnhancedTypes
    java.util.Set getExcludedAnnotationClasses() -> getExcludedAnnotationClasses
    java.util.Set getExcludedTypeAnnotationClasses() -> getExcludedTypeAnnotationClasses
    void setExcludedTypeAnnotationClasses(java.util.Set) -> setExcludedTypeAnnotationClasses
    boolean getIncludeAdditionalModifiers() -> getIncludeAdditionalModifiers
    boolean getIncludeAnnotationArguments() -> getIncludeAnnotationArguments
    boolean getIncludeEmptyAnnotationArguments() -> getIncludeEmptyAnnotationArguments
    boolean getIncludePropertyConstant() -> getIncludePropertyConstant
    java.util.Set getModifiers() -> getModifiers
    void setModifiers(java.util.Set) -> setModifiers
    boolean getNormalizedVisibilities() -> getNormalizedVisibilities
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy getOverrideRenderingPolicy() -> getOverrideRenderingPolicy
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy getParameterNameRenderingPolicy() -> getParameterNameRenderingPolicy
    void setParameterNameRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy) -> setParameterNameRenderingPolicy
    boolean getParameterNamesInFunctionalTypes() -> getParameterNamesInFunctionalTypes
    boolean getPresentableUnresolvedTypes() -> getPresentableUnresolvedTypes
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy getPropertyAccessorRenderingPolicy() -> getPropertyAccessorRenderingPolicy
    boolean getReceiverAfterName() -> getReceiverAfterName
    void setReceiverAfterName(boolean) -> setReceiverAfterName
    boolean getRenderCompanionObjectName() -> getRenderCompanionObjectName
    void setRenderCompanionObjectName(boolean) -> setRenderCompanionObjectName
    boolean getRenderConstructorDelegation() -> getRenderConstructorDelegation
    boolean getRenderConstructorKeyword() -> getRenderConstructorKeyword
    boolean getRenderDefaultAnnotationArguments() -> getRenderDefaultAnnotationArguments
    boolean getRenderDefaultModality() -> getRenderDefaultModality
    boolean getRenderDefaultVisibility() -> getRenderDefaultVisibility
    boolean getRenderPrimaryConstructorParametersAsProperties() -> getRenderPrimaryConstructorParametersAsProperties
    boolean getRenderTypeExpansions() -> getRenderTypeExpansions
    boolean getRenderUnabbreviatedType() -> getRenderUnabbreviatedType
    boolean getSecondaryConstructorsAsPrimary() -> getSecondaryConstructorsAsPrimary
    boolean getStartFromDeclarationKeyword() -> getStartFromDeclarationKeyword
    boolean getStartFromName() -> getStartFromName
    void setStartFromName(boolean) -> setStartFromName
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat getTextFormat() -> getTextFormat
    void setTextFormat(kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat) -> setTextFormat
    kotlin.jvm.functions.Function1 getTypeNormalizer() -> getTypeNormalizer
    boolean getUninferredTypeParameterAsName() -> getUninferredTypeParameterAsName
    boolean getUnitReturnType() -> getUnitReturnType
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler getValueParametersHandler() -> getValueParametersHandler
    boolean getVerbose() -> getVerbose
    void setVerbose(boolean) -> setVerbose
    boolean getWithDefinedIn() -> getWithDefinedIn
    void setWithDefinedIn(boolean) -> setWithDefinedIn
    boolean getWithSourceFileForTopLevel() -> getWithSourceFileForTopLevel
    boolean getWithoutReturnType() -> getWithoutReturnType
    boolean getWithoutSuperTypes() -> getWithoutSuperTypes
    void setWithoutSuperTypes(boolean) -> setWithoutSuperTypes
    boolean getWithoutTypeParameters() -> getWithoutTypeParameters
    void setWithoutTypeParameters(boolean) -> setWithoutTypeParameters
    void access$renderValueParameter(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,boolean,java.lang.StringBuilder,boolean) -> access$renderValueParameter
    void access$renderProperty(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.StringBuilder) -> access$renderProperty
    void access$renderAccessorModifiers(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor,java.lang.StringBuilder) -> access$renderAccessorModifiers
    void access$renderFunction(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.StringBuilder) -> access$renderFunction
    void access$renderConstructor(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.StringBuilder) -> access$renderConstructor
    void access$renderTypeParameter(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.StringBuilder,boolean) -> access$renderTypeParameter
    void access$renderPackageFragment(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.StringBuilder) -> access$renderPackageFragment
    void access$renderPackageView(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.StringBuilder) -> access$renderPackageView
    void access$renderName(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.StringBuilder,boolean) -> access$renderName
    void access$renderClass(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.StringBuilder) -> access$renderClass
    void access$renderTypeAlias(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.StringBuilder) -> access$renderTypeAlias
    java.lang.String access$renderConstant(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl,kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue) -> access$renderConstant
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    void visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,java.lang.StringBuilder) -> visitValueParameterDescriptor
    java.lang.Object visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor,java.lang.Object) -> visitValueParameterDescriptor
    void visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.StringBuilder) -> visitPropertyDescriptor
    java.lang.Object visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,java.lang.Object) -> visitPropertyDescriptor
    void visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor,java.lang.StringBuilder) -> visitPropertyGetterDescriptor
    java.lang.Object visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor,java.lang.Object) -> visitPropertyGetterDescriptor
    void visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,java.lang.StringBuilder) -> visitPropertySetterDescriptor
    java.lang.Object visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,java.lang.Object) -> visitPropertySetterDescriptor
    void visitPropertyAccessorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor,java.lang.StringBuilder,java.lang.String) -> visitPropertyAccessorDescriptor
    void visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.StringBuilder) -> visitFunctionDescriptor
    java.lang.Object visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,java.lang.Object) -> visitFunctionDescriptor
    void visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.lang.StringBuilder) -> visitReceiverParameterDescriptor
    java.lang.Object visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.lang.Object) -> visitReceiverParameterDescriptor
    void visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.StringBuilder) -> visitConstructorDescriptor
    java.lang.Object visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,java.lang.Object) -> visitConstructorDescriptor
    void visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.StringBuilder) -> visitTypeParameterDescriptor
    java.lang.Object visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,java.lang.Object) -> visitTypeParameterDescriptor
    void visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.StringBuilder) -> visitPackageFragmentDescriptor
    java.lang.Object visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,java.lang.Object) -> visitPackageFragmentDescriptor
    void visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.StringBuilder) -> visitPackageViewDescriptor
    java.lang.Object visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor,java.lang.Object) -> visitPackageViewDescriptor
    void visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.StringBuilder) -> visitModuleDeclaration
    java.lang.Object visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.Object) -> visitModuleDeclaration
    void visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.StringBuilder) -> visitClassDescriptor
    java.lang.Object visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.lang.Object) -> visitClassDescriptor
    void visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.StringBuilder) -> visitTypeAliasDescriptor
    java.lang.Object visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.lang.Object) -> visitTypeAliasDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor$WhenMappings -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$RenderDeclarationDescriptorVisitor$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$WhenMappings -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    int[] $EnumSwitchMapping$2 -> $EnumSwitchMapping$2
    int[] $EnumSwitchMapping$3 -> $EnumSwitchMapping$3
    int[] $EnumSwitchMapping$4 -> $EnumSwitchMapping$4
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$appendTypeProjections$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$appendTypeProjections$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.CharSequence invoke(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeAnnotationsRenderer$2 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeAnnotationsRenderer$2:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeAnnotationsRenderer$2$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeAnnotationsRenderer$2$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeAnnotationsRenderer$2$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeParameterTypesRenderer$2 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeParameterTypesRenderer$2:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeParameterTypesRenderer$2$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeParameterTypesRenderer$2$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$functionTypeParameterTypesRenderer$2$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderConstant$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderConstant$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderConstructor$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderConstructor$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderConstructor$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderSuperTypes$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl$renderSuperTypes$1:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererImpl) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier VISIBILITY -> VISIBILITY
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier MODALITY -> MODALITY
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier OVERRIDE -> OVERRIDE
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier ANNOTATIONS -> ANNOTATIONS
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier INNER -> INNER
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier MEMBER_KIND -> MEMBER_KIND
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier DATA -> DATA
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier INLINE -> INLINE
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier EXPECT -> EXPECT
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier ACTUAL -> ACTUAL
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier CONST -> CONST
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier LATEINIT -> LATEINIT
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier[] $VALUES -> $VALUES
    boolean includeByDefault -> includeByDefault
    java.util.Set DEFAULTS -> DEFAULTS
    java.util.Set ALL -> ALL
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,boolean) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier$Companion -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions:
    void setClassifierNamePolicy(kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy) -> setClassifierNamePolicy
    void setWithDefinedIn(boolean) -> setWithDefinedIn
    void setModifiers(java.util.Set) -> setModifiers
    void setStartFromName(boolean) -> setStartFromName
    boolean getDebugMode() -> getDebugMode
    void setDebugMode(boolean) -> setDebugMode
    void setVerbose(boolean) -> setVerbose
    boolean getEnhancedTypes() -> getEnhancedTypes
    void setTextFormat(kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat) -> setTextFormat
    java.util.Set getExcludedTypeAnnotationClasses() -> getExcludedTypeAnnotationClasses
    void setExcludedTypeAnnotationClasses(java.util.Set) -> setExcludedTypeAnnotationClasses
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy getAnnotationArgumentsRenderingPolicy() -> getAnnotationArgumentsRenderingPolicy
    void setAnnotationArgumentsRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy) -> setAnnotationArgumentsRenderingPolicy
    void setParameterNameRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy) -> setParameterNameRenderingPolicy
    void setWithoutTypeParameters(boolean) -> setWithoutTypeParameters
    void setReceiverAfterName(boolean) -> setReceiverAfterName
    void setRenderCompanionObjectName(boolean) -> setRenderCompanionObjectName
    void setWithoutSuperTypes(boolean) -> setWithoutSuperTypes
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions$DefaultImpls -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions$DefaultImpls:
    boolean getIncludeAnnotationArguments(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> getIncludeAnnotationArguments
    boolean getIncludeEmptyAnnotationArguments(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> getIncludeEmptyAnnotationArguments
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    boolean isLocked -> isLocked
    kotlin.properties.ReadWriteProperty classifierNamePolicy$delegate -> classifierNamePolicy$delegate
    kotlin.properties.ReadWriteProperty withDefinedIn$delegate -> withDefinedIn$delegate
    kotlin.properties.ReadWriteProperty withSourceFileForTopLevel$delegate -> withSourceFileForTopLevel$delegate
    kotlin.properties.ReadWriteProperty modifiers$delegate -> modifiers$delegate
    kotlin.properties.ReadWriteProperty startFromName$delegate -> startFromName$delegate
    kotlin.properties.ReadWriteProperty startFromDeclarationKeyword$delegate -> startFromDeclarationKeyword$delegate
    kotlin.properties.ReadWriteProperty debugMode$delegate -> debugMode$delegate
    kotlin.properties.ReadWriteProperty classWithPrimaryConstructor$delegate -> classWithPrimaryConstructor$delegate
    kotlin.properties.ReadWriteProperty verbose$delegate -> verbose$delegate
    kotlin.properties.ReadWriteProperty unitReturnType$delegate -> unitReturnType$delegate
    kotlin.properties.ReadWriteProperty withoutReturnType$delegate -> withoutReturnType$delegate
    kotlin.properties.ReadWriteProperty enhancedTypes$delegate -> enhancedTypes$delegate
    kotlin.properties.ReadWriteProperty normalizedVisibilities$delegate -> normalizedVisibilities$delegate
    kotlin.properties.ReadWriteProperty renderDefaultVisibility$delegate -> renderDefaultVisibility$delegate
    kotlin.properties.ReadWriteProperty renderDefaultModality$delegate -> renderDefaultModality$delegate
    kotlin.properties.ReadWriteProperty renderConstructorDelegation$delegate -> renderConstructorDelegation$delegate
    kotlin.properties.ReadWriteProperty renderPrimaryConstructorParametersAsProperties$delegate -> renderPrimaryConstructorParametersAsProperties$delegate
    kotlin.properties.ReadWriteProperty actualPropertiesInPrimaryConstructor$delegate -> actualPropertiesInPrimaryConstructor$delegate
    kotlin.properties.ReadWriteProperty uninferredTypeParameterAsName$delegate -> uninferredTypeParameterAsName$delegate
    kotlin.properties.ReadWriteProperty includePropertyConstant$delegate -> includePropertyConstant$delegate
    kotlin.properties.ReadWriteProperty withoutTypeParameters$delegate -> withoutTypeParameters$delegate
    kotlin.properties.ReadWriteProperty withoutSuperTypes$delegate -> withoutSuperTypes$delegate
    kotlin.properties.ReadWriteProperty typeNormalizer$delegate -> typeNormalizer$delegate
    kotlin.properties.ReadWriteProperty defaultParameterValueRenderer$delegate -> defaultParameterValueRenderer$delegate
    kotlin.properties.ReadWriteProperty secondaryConstructorsAsPrimary$delegate -> secondaryConstructorsAsPrimary$delegate
    kotlin.properties.ReadWriteProperty overrideRenderingPolicy$delegate -> overrideRenderingPolicy$delegate
    kotlin.properties.ReadWriteProperty valueParametersHandler$delegate -> valueParametersHandler$delegate
    kotlin.properties.ReadWriteProperty textFormat$delegate -> textFormat$delegate
    kotlin.properties.ReadWriteProperty parameterNameRenderingPolicy$delegate -> parameterNameRenderingPolicy$delegate
    kotlin.properties.ReadWriteProperty receiverAfterName$delegate -> receiverAfterName$delegate
    kotlin.properties.ReadWriteProperty renderCompanionObjectName$delegate -> renderCompanionObjectName$delegate
    kotlin.properties.ReadWriteProperty propertyAccessorRenderingPolicy$delegate -> propertyAccessorRenderingPolicy$delegate
    kotlin.properties.ReadWriteProperty renderDefaultAnnotationArguments$delegate -> renderDefaultAnnotationArguments$delegate
    kotlin.properties.ReadWriteProperty eachAnnotationOnNewLine$delegate -> eachAnnotationOnNewLine$delegate
    kotlin.properties.ReadWriteProperty excludedAnnotationClasses$delegate -> excludedAnnotationClasses$delegate
    kotlin.properties.ReadWriteProperty excludedTypeAnnotationClasses$delegate -> excludedTypeAnnotationClasses$delegate
    kotlin.properties.ReadWriteProperty annotationFilter$delegate -> annotationFilter$delegate
    kotlin.properties.ReadWriteProperty annotationArgumentsRenderingPolicy$delegate -> annotationArgumentsRenderingPolicy$delegate
    kotlin.properties.ReadWriteProperty alwaysRenderModifiers$delegate -> alwaysRenderModifiers$delegate
    kotlin.properties.ReadWriteProperty renderConstructorKeyword$delegate -> renderConstructorKeyword$delegate
    kotlin.properties.ReadWriteProperty renderUnabbreviatedType$delegate -> renderUnabbreviatedType$delegate
    kotlin.properties.ReadWriteProperty renderTypeExpansions$delegate -> renderTypeExpansions$delegate
    kotlin.properties.ReadWriteProperty includeAdditionalModifiers$delegate -> includeAdditionalModifiers$delegate
    kotlin.properties.ReadWriteProperty parameterNamesInFunctionalTypes$delegate -> parameterNamesInFunctionalTypes$delegate
    kotlin.properties.ReadWriteProperty renderFunctionContracts$delegate -> renderFunctionContracts$delegate
    kotlin.properties.ReadWriteProperty presentableUnresolvedTypes$delegate -> presentableUnresolvedTypes$delegate
    kotlin.properties.ReadWriteProperty boldOnlyForNamesInHtml$delegate -> boldOnlyForNamesInHtml$delegate
    void <clinit>() -> <clinit>
    boolean isLocked() -> isLocked
    void lock() -> lock
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl copy() -> copy
    kotlin.properties.ReadWriteProperty property(java.lang.Object) -> property
    kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy getClassifierNamePolicy() -> getClassifierNamePolicy
    void setClassifierNamePolicy(kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy) -> setClassifierNamePolicy
    boolean getWithDefinedIn() -> getWithDefinedIn
    void setWithDefinedIn(boolean) -> setWithDefinedIn
    boolean getWithSourceFileForTopLevel() -> getWithSourceFileForTopLevel
    java.util.Set getModifiers() -> getModifiers
    void setModifiers(java.util.Set) -> setModifiers
    boolean getStartFromName() -> getStartFromName
    void setStartFromName(boolean) -> setStartFromName
    boolean getStartFromDeclarationKeyword() -> getStartFromDeclarationKeyword
    boolean getDebugMode() -> getDebugMode
    void setDebugMode(boolean) -> setDebugMode
    boolean getClassWithPrimaryConstructor() -> getClassWithPrimaryConstructor
    boolean getVerbose() -> getVerbose
    void setVerbose(boolean) -> setVerbose
    boolean getUnitReturnType() -> getUnitReturnType
    boolean getWithoutReturnType() -> getWithoutReturnType
    boolean getEnhancedTypes() -> getEnhancedTypes
    boolean getNormalizedVisibilities() -> getNormalizedVisibilities
    boolean getRenderDefaultVisibility() -> getRenderDefaultVisibility
    boolean getRenderDefaultModality() -> getRenderDefaultModality
    boolean getRenderConstructorDelegation() -> getRenderConstructorDelegation
    boolean getRenderPrimaryConstructorParametersAsProperties() -> getRenderPrimaryConstructorParametersAsProperties
    boolean getActualPropertiesInPrimaryConstructor() -> getActualPropertiesInPrimaryConstructor
    boolean getUninferredTypeParameterAsName() -> getUninferredTypeParameterAsName
    boolean getIncludePropertyConstant() -> getIncludePropertyConstant
    boolean getWithoutTypeParameters() -> getWithoutTypeParameters
    void setWithoutTypeParameters(boolean) -> setWithoutTypeParameters
    boolean getWithoutSuperTypes() -> getWithoutSuperTypes
    void setWithoutSuperTypes(boolean) -> setWithoutSuperTypes
    kotlin.jvm.functions.Function1 getTypeNormalizer() -> getTypeNormalizer
    kotlin.jvm.functions.Function1 getDefaultParameterValueRenderer() -> getDefaultParameterValueRenderer
    boolean getSecondaryConstructorsAsPrimary() -> getSecondaryConstructorsAsPrimary
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy getOverrideRenderingPolicy() -> getOverrideRenderingPolicy
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer$ValueParametersHandler getValueParametersHandler() -> getValueParametersHandler
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat getTextFormat() -> getTextFormat
    void setTextFormat(kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat) -> setTextFormat
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy getParameterNameRenderingPolicy() -> getParameterNameRenderingPolicy
    void setParameterNameRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy) -> setParameterNameRenderingPolicy
    boolean getReceiverAfterName() -> getReceiverAfterName
    void setReceiverAfterName(boolean) -> setReceiverAfterName
    boolean getRenderCompanionObjectName() -> getRenderCompanionObjectName
    void setRenderCompanionObjectName(boolean) -> setRenderCompanionObjectName
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy getPropertyAccessorRenderingPolicy() -> getPropertyAccessorRenderingPolicy
    boolean getRenderDefaultAnnotationArguments() -> getRenderDefaultAnnotationArguments
    boolean getEachAnnotationOnNewLine() -> getEachAnnotationOnNewLine
    java.util.Set getExcludedAnnotationClasses() -> getExcludedAnnotationClasses
    java.util.Set getExcludedTypeAnnotationClasses() -> getExcludedTypeAnnotationClasses
    void setExcludedTypeAnnotationClasses(java.util.Set) -> setExcludedTypeAnnotationClasses
    kotlin.jvm.functions.Function1 getAnnotationFilter() -> getAnnotationFilter
    kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy getAnnotationArgumentsRenderingPolicy() -> getAnnotationArgumentsRenderingPolicy
    void setAnnotationArgumentsRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy) -> setAnnotationArgumentsRenderingPolicy
    boolean getAlwaysRenderModifiers() -> getAlwaysRenderModifiers
    boolean getRenderConstructorKeyword() -> getRenderConstructorKeyword
    boolean getRenderUnabbreviatedType() -> getRenderUnabbreviatedType
    boolean getRenderTypeExpansions() -> getRenderTypeExpansions
    boolean getIncludeAdditionalModifiers() -> getIncludeAdditionalModifiers
    boolean getParameterNamesInFunctionalTypes() -> getParameterNamesInFunctionalTypes
    boolean getPresentableUnresolvedTypes() -> getPresentableUnresolvedTypes
    boolean getBoldOnlyForNamesInHtml() -> getBoldOnlyForNamesInHtml
    void <init>() -> <init>
    boolean getIncludeAnnotationArguments() -> getIncludeAnnotationArguments
    boolean getIncludeEmptyAnnotationArguments() -> getIncludeEmptyAnnotationArguments
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$defaultParameterValueRenderer$2 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$defaultParameterValueRenderer$2:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$defaultParameterValueRenderer$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$property$$inlined$vetoable$1 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$property$$inlined$vetoable$1:
    java.lang.Object $initialValue -> $initialValue
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl this$0 -> this$0
    void <init>(java.lang.Object,java.lang.Object,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl) -> <init>
    boolean beforeChange(kotlin.reflect.KProperty,java.lang.Object,java.lang.Object) -> beforeChange
kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$typeNormalizer$2 -> kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$typeNormalizer$2:
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptionsImpl$typeNormalizer$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.ExcludedTypeAnnotations -> kotlin.reflect.jvm.internal.impl.renderer.ExcludedTypeAnnotations:
    java.util.Set internalAnnotationsForResolve -> internalAnnotationsForResolve
    kotlin.reflect.jvm.internal.impl.renderer.ExcludedTypeAnnotations INSTANCE -> INSTANCE
    java.util.Set getInternalAnnotationsForResolve() -> getInternalAnnotationsForResolve
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.KeywordStringsGenerated -> kotlin.reflect.jvm.internal.impl.renderer.KeywordStringsGenerated:
    java.util.Set KEYWORDS -> KEYWORDS
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy -> kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy:
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy RENDER_OVERRIDE -> RENDER_OVERRIDE
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy RENDER_OPEN -> RENDER_OPEN
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy RENDER_OPEN_OVERRIDE -> RENDER_OPEN_OVERRIDE
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.OverrideRenderingPolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy -> kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy:
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy ALL -> ALL
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy ONLY_NON_SYNTHESIZED -> ONLY_NON_SYNTHESIZED
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy NONE -> NONE
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy -> kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy:
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy PRETTY -> PRETTY
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy DEBUG -> DEBUG
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy NONE -> NONE
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.PropertyAccessorRenderingPolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat -> kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat:
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat PLAIN -> PLAIN
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat HTML -> HTML
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    java.lang.String escape(java.lang.String) -> escape
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat[] values() -> values
    kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat$HTML -> kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat$HTML:
    java.lang.String escape(java.lang.String) -> escape
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat$PLAIN -> kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat$PLAIN:
    java.lang.String escape(java.lang.String) -> escape
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.renderer.RenderingUtilsKt -> kotlin.reflect.jvm.internal.impl.renderer.RenderingUtilsKt:
    java.lang.String render(kotlin.reflect.jvm.internal.impl.name.Name) -> render
    boolean shouldBeEscaped(kotlin.reflect.jvm.internal.impl.name.Name) -> shouldBeEscaped
    java.lang.String render(kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe) -> render
    java.lang.String renderFqName(java.util.List) -> renderFqName
kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides:
    kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides INSTANCE -> INSTANCE
    boolean areEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,boolean) -> areEquivalent
    boolean areClassesEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> areClassesEquivalent
    boolean areTypeParametersEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,boolean,kotlin.jvm.functions.Function2) -> areTypeParametersEquivalent
    boolean areTypeParametersEquivalent$default(kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,boolean,kotlin.jvm.functions.Function2,int,java.lang.Object) -> areTypeParametersEquivalent$default
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement singleSource(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> singleSource
    boolean areCallableDescriptorsEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,boolean,boolean) -> areCallableDescriptorsEquivalent
    boolean areCallableDescriptorsEquivalent$default(kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,boolean,boolean,int,java.lang.Object) -> areCallableDescriptorsEquivalent$default
    boolean ownersEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.jvm.functions.Function2,boolean) -> ownersEquivalent
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean access$areTypeParametersEquivalent(kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,boolean,kotlin.jvm.functions.Function2) -> access$areTypeParametersEquivalent
kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$1 -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$1:
    kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1 -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1:
    boolean $allowCopiesFromTheSameDeclaration -> $allowCopiesFromTheSameDeclaration
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor $a -> $a
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor $b -> $b
    boolean equals(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> equals
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> invoke
    void <init>(boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1$1 -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1$1:
    kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areCallableDescriptorsEquivalent$overridingUtil$1) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areTypeParametersEquivalent$1 -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areTypeParametersEquivalent$1:
    kotlin.reflect.jvm.internal.impl.resolve.DescriptorEquivalenceForOverrides$areTypeParametersEquivalent$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory:
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createDefaultSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createDefaultSetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertySetterDescriptorImpl createSetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createDefaultGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createDefaultGetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,boolean,boolean) -> createGetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl createGetter(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createGetter
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl createPrimaryConstructorForObject(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createPrimaryConstructorForObject
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValuesMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> createEnumValuesMethod
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createEnumValueOfMethod(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> createEnumValueOfMethod
    boolean isEnumValuesMethod(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isEnumValuesMethod
    boolean isEnumValueOfMethod(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isEnumValueOfMethod
    boolean isEnumSpecialMethod(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isEnumSpecialMethod
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor createExtensionReceiverParameterForCallable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createExtensionReceiverParameterForCallable
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory$DefaultClassConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorFactory$DefaultClassConstructorDescriptor:
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils -> kotlin.reflect.jvm.internal.impl.resolve.DescriptorUtils:
    kotlin.reflect.jvm.internal.impl.name.Name ENUM_VALUES -> ENUM_VALUES
    kotlin.reflect.jvm.internal.impl.name.Name ENUM_VALUE_OF -> ENUM_VALUE_OF
    kotlin.reflect.jvm.internal.impl.name.FqName COROUTINES_PACKAGE_FQ_NAME_RELEASE -> COROUTINES_PACKAGE_FQ_NAME_RELEASE
    kotlin.reflect.jvm.internal.impl.name.FqName COROUTINES_PACKAGE_FQ_NAME_EXPERIMENTAL -> COROUTINES_PACKAGE_FQ_NAME_EXPERIMENTAL
    kotlin.reflect.jvm.internal.impl.name.FqName COROUTINES_INTRINSICS_PACKAGE_FQ_NAME_EXPERIMENTAL -> COROUTINES_INTRINSICS_PACKAGE_FQ_NAME_EXPERIMENTAL
    kotlin.reflect.jvm.internal.impl.name.FqName CONTINUATION_INTERFACE_FQ_NAME_EXPERIMENTAL -> CONTINUATION_INTERFACE_FQ_NAME_EXPERIMENTAL
    kotlin.reflect.jvm.internal.impl.name.FqName CONTINUATION_INTERFACE_FQ_NAME_RELEASE -> CONTINUATION_INTERFACE_FQ_NAME_RELEASE
    kotlin.reflect.jvm.internal.impl.name.FqName RESULT_FQ_NAME -> RESULT_FQ_NAME
    kotlin.reflect.jvm.internal.impl.name.FqName JVM_NAME -> JVM_NAME
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameterIfNeeded(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getDispatchReceiverParameterIfNeeded
    boolean isLocal(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isLocal
    boolean isDescriptorWithLocalVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isDescriptorWithLocalVisibility
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getFqName(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqName
    kotlin.reflect.jvm.internal.impl.name.FqName getFqNameSafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqNameSafe
    kotlin.reflect.jvm.internal.impl.name.FqName getFqNameSafeIfPossible(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqNameSafeIfPossible
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getFqNameUnsafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqNameUnsafe
    boolean isTopLevelDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isTopLevelDeclaration
    boolean areInSameModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> areInSameModule
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getParentOfType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.Class) -> getParentOfType
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getParentOfType(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.lang.Class,boolean) -> getParentOfType
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModuleOrNull(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getContainingModuleOrNull
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getContainingModule
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingModuleOrNull(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getContainingModuleOrNull
    boolean isDirectSubclass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isDirectSubclass
    boolean isSubclass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isSubclass
    boolean isSameClass(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isSameClass
    boolean isSubtypeOfClass(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isSubtypeOfClass
    boolean isCompanionObject(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isCompanionObject
    boolean isSealedClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isSealedClass
    boolean isAnonymousObject(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isAnonymousObject
    boolean isEnumEntry(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isEnumEntry
    boolean isEnumClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isEnumClass
    boolean isAnnotationClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isAnnotationClass
    boolean isInterface(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isInterface
    boolean isClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isClass
    boolean isClassOrEnumClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isClassOrEnumClass
    boolean isKindOf(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassKind) -> isKindOf
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getSuperClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getSuperClassDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getClassDescriptorForType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptorForTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> getClassDescriptorForTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getDefaultConstructorVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getDefaultConstructorVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor unwrapFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> unwrapFakeOverride
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility unwrapFakeOverrideToAnyDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility) -> unwrapFakeOverrideToAnyDeclaration
    boolean shouldRecordInitializerForProperty(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> shouldRecordInitializerForProperty
    java.util.Set getAllOverriddenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> getAllOverriddenDescriptors
    void collectAllOverriddenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.util.Set) -> collectAllOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingSourceFile(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getContainingSourceFile
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition -> kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition:
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isOverridable
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract getContract() -> getContract
kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract -> kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract:
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract CONFLICTS_ONLY -> CONFLICTS_ONLY
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract SUCCESS_ONLY -> SUCCESS_ONLY
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract BOTH -> BOTH
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract[] values() -> values
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Contract valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result -> kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result:
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result OVERRIDABLE -> OVERRIDABLE
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result CONFLICT -> CONFLICT
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result INCOMPATIBLE -> INCOMPATIBLE
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result UNKNOWN -> UNKNOWN
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result[] values() -> values
    kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition$Result valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.InlineClassesUtilsKt -> kotlin.reflect.jvm.internal.impl.resolve.InlineClassesUtilsKt:
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor underlyingRepresentation(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> underlyingRepresentation
    boolean isInlineClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isInlineClass
    kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor unsubstitutedUnderlyingParameter(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> unsubstitutedUnderlyingParameter
    boolean isInlineClassType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isInlineClassType
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitutedUnderlyingType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> substitutedUnderlyingType
    boolean isGetterOfUnderlyingPropertyOfInlineClass(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> isGetterOfUnderlyingPropertyOfInlineClass
    boolean isUnderlyingPropertyOfInlineClass(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor) -> isUnderlyingPropertyOfInlineClass
kotlin.reflect.jvm.internal.impl.resolve.MemberComparator -> kotlin.reflect.jvm.internal.impl.resolve.MemberComparator:
    kotlin.reflect.jvm.internal.impl.resolve.MemberComparator INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer RENDERER -> RENDERER
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    int compare(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.MemberComparator$1 -> kotlin.reflect.jvm.internal.impl.resolve.MemberComparator$1:
    void <init>() -> <init>
    kotlin.Unit invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.MemberComparator$NameAndTypeMemberComparator -> kotlin.reflect.jvm.internal.impl.resolve.MemberComparator$NameAndTypeMemberComparator:
    kotlin.reflect.jvm.internal.impl.resolve.MemberComparator$NameAndTypeMemberComparator INSTANCE -> INSTANCE
    void <init>() -> <init>
    int getDeclarationPriority(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getDeclarationPriority
    int compare(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> compare
    java.lang.Integer compareInternal(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> compareInternal
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Integer access$000(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> access$000
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.NonReportingOverrideStrategy -> kotlin.reflect.jvm.internal.impl.resolve.NonReportingOverrideStrategy:
    void overrideConflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> overrideConflict
    void inheritanceConflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> inheritanceConflict
    void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> conflict
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy -> kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy:
    void addFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> addFakeOverride
    void overrideConflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> overrideConflict
    void inheritanceConflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> inheritanceConflict
    void setOverriddenDescriptors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.Collection) -> setOverriddenDescriptors
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil:
    java.util.List EXTERNAL_CONDITIONS -> EXTERNAL_CONDITIONS
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil DEFAULT -> DEFAULT
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality DEFAULT_TYPE_CONSTRUCTOR_EQUALITY -> DEFAULT_TYPE_CONSTRUCTOR_EQUALITY
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefiner -> kotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality equalityAxioms -> equalityAxioms
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil createWithEqualityAxioms(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality) -> createWithEqualityAxioms
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil createWithTypeRefiner(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> createWithTypeRefiner
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    java.util.Set filterOutOverridden(java.util.Set) -> filterOutOverridden
    java.util.Set filterOverrides(java.util.Set,boolean,kotlin.jvm.functions.Function2) -> filterOverrides
    boolean overrides(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,boolean) -> overrides
    java.util.Set getOverriddenDeclarations(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getOverriddenDeclarations
    void collectOverriddenDeclarations(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.Set) -> collectOverriddenDeclarations
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo isOverridableBy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isOverridableBy
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo isOverridableBy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,boolean) -> isOverridableBy
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo isOverridableByWithoutExternalConditions(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,boolean) -> isOverridableByWithoutExternalConditions
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo getBasicOverridabilityProblem(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> getBasicOverridabilityProblem
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker createTypeChecker(java.util.List,java.util.List) -> createTypeChecker
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo checkReceiverAndParameterCount(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> checkReceiverAndParameterCount
    boolean areTypesEquivalent(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker) -> areTypesEquivalent
    boolean areTypeParametersEquivalent(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker) -> areTypeParametersEquivalent
    java.util.List compiledValueParameters(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> compiledValueParameters
    void generateOverridesInFunctionGroup(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy) -> generateOverridesInFunctionGroup
    boolean isVisibleForOverride(kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor) -> isVisibleForOverride
    java.util.Collection extractAndBindOverridesForMember(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy) -> extractAndBindOverridesForMember
    boolean allHasSameContainingDeclaration(java.util.Collection) -> allHasSameContainingDeclaration
    void createAndBindFakeOverrides(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.Collection,kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy) -> createAndBindFakeOverrides
    boolean isMoreSpecific(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> isMoreSpecific
    boolean isVisibilityMoreSpecific(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility) -> isVisibilityMoreSpecific
    boolean isAccessorMoreSpecific(kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor) -> isAccessorMoreSpecific
    boolean isMoreSpecificThenAllOf(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,java.util.Collection) -> isMoreSpecificThenAllOf
    boolean isReturnTypeMoreSpecific(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isReturnTypeMoreSpecific
    java.lang.Object selectMostSpecificMember(java.util.Collection,kotlin.jvm.functions.Function1) -> selectMostSpecificMember
    void createAndBindFakeOverride(java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy) -> createAndBindFakeOverride
    kotlin.reflect.jvm.internal.impl.descriptors.Modality determineModalityForFakeOverride(java.util.Collection,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> determineModalityForFakeOverride
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getMinimalModality(java.util.Collection,boolean,kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> getMinimalModality
    java.util.Collection filterVisibleFakeOverrides(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.Collection) -> filterVisibleFakeOverrides
    java.util.Collection extractMembersOverridableInBothWays(java.lang.Object,java.util.Collection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> extractMembersOverridableInBothWays
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result getBothWaysOverridability(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> getBothWaysOverridability
    java.util.Collection extractMembersOverridableInBothWays(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,java.util.Queue,kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy) -> extractMembersOverridableInBothWays
    void resolveUnknownVisibilityForMember(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.jvm.functions.Function1) -> resolveUnknownVisibilityForMember
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility computeVisibilityToInherit(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> computeVisibilityToInherit
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility findMaxVisibility(java.util.Collection) -> findMaxVisibility
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality access$000(kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil) -> access$000
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$1 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$1:
    void <init>() -> <init>
    boolean equals(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> equals
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$2 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$2:
    void <init>() -> <init>
    kotlin.Pair invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$3 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$3:
    java.util.Map val$matchingTypeConstructors -> val$matchingTypeConstructors
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil,java.util.Map) -> <init>
    boolean equals(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> equals
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$4 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$4:
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor val$containingDeclaration -> val$containingDeclaration
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> <init>
    java.lang.Boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$5 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$5:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$6 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$6:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor val$current -> val$current
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    java.lang.Boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$7 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$7:
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$8 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$8:
    kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy val$strategy -> val$strategy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor val$overrider -> val$overrider
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.OverridingStrategy,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> <init>
    kotlin.Unit invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$9 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$9:
    int[] $SwitchMap$org$jetbrains$kotlin$resolve$ExternalOverridabilityCondition$Result -> $SwitchMap$org$jetbrains$kotlin$resolve$ExternalOverridabilityCondition$Result
    int[] $SwitchMap$org$jetbrains$kotlin$resolve$OverridingUtil$OverrideCompatibilityInfo$Result -> $SwitchMap$org$jetbrains$kotlin$resolve$OverridingUtil$OverrideCompatibilityInfo$Result
    int[] $SwitchMap$org$jetbrains$kotlin$descriptors$Modality -> $SwitchMap$org$jetbrains$kotlin$descriptors$Modality
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo:
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo SUCCESS -> SUCCESS
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result overridable -> overridable
    java.lang.String debugMessage -> debugMessage
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo success() -> success
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo incompatible(java.lang.String) -> incompatible
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo conflict(java.lang.String) -> conflict
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result getResult() -> getResult
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result:
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result OVERRIDABLE -> OVERRIDABLE
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result INCOMPATIBLE -> INCOMPATIBLE
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result CONFLICT -> CONFLICT
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result[] values() -> values
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil$OverrideCompatibilityInfo$Result valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt:
    java.util.Collection selectMostSpecificInEachOverridableGroup(java.util.Collection,kotlin.jvm.functions.Function1) -> selectMostSpecificInEachOverridableGroup
    void retainMostSpecificInEachOverridableGroup(java.util.Collection) -> retainMostSpecificInEachOverridableGroup
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt$retainMostSpecificInEachOverridableGroup$newResult$1 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt$retainMostSpecificInEachOverridableGroup$newResult$1:
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt$retainMostSpecificInEachOverridableGroup$newResult$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt$selectMostSpecificInEachOverridableGroup$overridableGroup$1 -> kotlin.reflect.jvm.internal.impl.resolve.OverridingUtilsKt$selectMostSpecificInEachOverridableGroup$overridableGroup$1:
    kotlin.reflect.jvm.internal.impl.utils.SmartSet $conflictedHandles -> $conflictedHandles
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(java.lang.Object) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.utils.SmartSet) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.VisibilityUtilKt -> kotlin.reflect.jvm.internal.impl.resolve.VisibilityUtilKt:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor findMemberWithMaxVisibility(java.util.Collection) -> findMemberWithMaxVisibility
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedType -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedType:
    kotlin.reflect.jvm.internal.impl.types.TypeProjection typeProjection -> typeProjection
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor constructor -> constructor
    boolean isMarkedNullable -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    java.util.List getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSubTypeRepresentative() -> getSubTypeRepresentative
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSuperTypeRepresentative() -> getSuperTypeRepresentative
    kotlin.reflect.jvm.internal.impl.types.KotlinType representative(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> representative
    boolean sameTypeConstructor(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> sameTypeConstructor
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor getConstructor() -> getConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor,boolean,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor,boolean,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructor:
    kotlin.reflect.jvm.internal.impl.types.TypeProjection getProjection() -> getProjection
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorImpl -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorImpl:
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor newTypeConstructor -> newTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeProjection projection -> projection
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor getNewTypeConstructor() -> getNewTypeConstructor
    void setNewTypeConstructor(kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor) -> setNewTypeConstructor
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    java.lang.Void getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorImpl refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeProjection getProjection() -> getProjection
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt:
    kotlin.reflect.jvm.internal.impl.types.KotlinType createCapturedType(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> createCapturedType
    boolean isCaptured(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isCaptured
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution wrapWithCapturingSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,boolean) -> wrapWithCapturingSubstitution
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution wrapWithCapturingSubstitution$default(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,boolean,int,java.lang.Object) -> wrapWithCapturingSubstitution$default
    kotlin.reflect.jvm.internal.impl.types.TypeProjection createCapturedIfNeeded(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> createCapturedIfNeeded
    kotlin.reflect.jvm.internal.impl.types.TypeProjection access$createCapturedIfNeeded(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> access$createCapturedIfNeeded
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt$createCapturedIfNeeded$1 -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt$createCapturedIfNeeded$1:
    kotlin.reflect.jvm.internal.impl.types.TypeProjection $this_createCapturedIfNeeded -> $this_createCapturedIfNeeded
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt$wrapWithCapturingSubstitution$2 -> kotlin.reflect.jvm.internal.impl.resolve.calls.inference.CapturedTypeConstructorKt$wrapWithCapturingSubstitution$2:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution $this_wrapWithCapturingSubstitution -> $this_wrapWithCapturingSubstitution
    boolean $needApproximation -> $needApproximation
    boolean approximateContravariantCapturedTypes() -> approximateContravariantCapturedTypes
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,boolean,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.AnnotationValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.AnnotationValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ArrayValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ArrayValue:
    kotlin.jvm.functions.Function1 computeType -> computeType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    void <init>(java.util.List,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.BooleanValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.BooleanValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    void <init>(boolean) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ByteValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ByteValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(byte) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.CharValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.CharValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    java.lang.String getPrintablePart(char) -> getPrintablePart
    boolean isPrintableUnicode(char) -> isPrintableUnicode
    void <init>(char) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    int arrayNestedness -> arrayNestedness
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    int getArrayNestedness() -> getArrayNestedness
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,int) -> <init>
    kotlin.reflect.jvm.internal.impl.name.ClassId component1() -> component1
    int component2() -> component2
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue:
    java.lang.Object value -> value
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory -> kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.resolve.constants.ArrayValue createArrayValue(java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> createArrayValue
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue createConstantValue(java.lang.Object) -> createConstantValue
    kotlin.reflect.jvm.internal.impl.resolve.constants.ArrayValue createArrayValue(java.util.List,kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> createArrayValue
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory$createArrayValue$1 -> kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory$createArrayValue$1:
    kotlin.reflect.jvm.internal.impl.types.KotlinType $type -> $type
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory$createArrayValue$3 -> kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValueFactory$createArrayValue$3:
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType $componentType -> $componentType
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.DoubleValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.DoubleValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(double) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.EnumValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.EnumValue:
    kotlin.reflect.jvm.internal.impl.name.ClassId enumClassId -> enumClassId
    kotlin.reflect.jvm.internal.impl.name.Name enumEntryName -> enumEntryName
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.name.Name getEnumEntryName() -> getEnumEntryName
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue$Companion Companion -> Companion
    kotlin.Unit getValue() -> getValue
    java.lang.Object getValue() -> getValue
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue$Companion -> kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue$Companion:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue create(java.lang.String) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue$ErrorValueWithMessage -> kotlin.reflect.jvm.internal.impl.resolve.constants.ErrorValue$ErrorValueWithMessage:
    java.lang.String message -> message
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.FloatValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.FloatValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(float) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    void <init>(int) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    long value -> value
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    java.util.Set possibleTypes -> possibleTypes
    kotlin.reflect.jvm.internal.impl.types.SimpleType type -> type
    kotlin.Lazy supertypes$delegate -> supertypes$delegate
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    java.util.Set getPossibleTypes() -> getPossibleTypes
    boolean isContainsOnlyUnsignedTypes() -> isContainsOnlyUnsignedTypes
    java.util.List getSupertypes() -> getSupertypes
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    java.lang.String toString() -> toString
    boolean checkConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> checkConstructor
    java.lang.String valueToString() -> valueToString
    void <init>(long,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.util.Set) -> <init>
    kotlin.reflect.jvm.internal.impl.types.SimpleType access$getType$p(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor) -> access$getType$p
    boolean access$isContainsOnlyUnsignedTypes(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor) -> access$isContainsOnlyUnsignedTypes
    void <init>(long,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.util.Set,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    long access$getValue$p(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor) -> access$getValue$p
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor access$getModule$p(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor) -> access$getModule$p
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion:
    kotlin.reflect.jvm.internal.impl.types.SimpleType findIntersectionType(java.util.Collection) -> findIntersectionType
    kotlin.reflect.jvm.internal.impl.types.SimpleType findCommonSuperTypeOrIntersectionType(java.util.Collection,kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode) -> findCommonSuperTypeOrIntersectionType
    kotlin.reflect.jvm.internal.impl.types.SimpleType fold(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode) -> fold
    kotlin.reflect.jvm.internal.impl.types.SimpleType fold(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode) -> fold
    kotlin.reflect.jvm.internal.impl.types.SimpleType fold(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> fold
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode:
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode COMMON_SUPER_TYPE -> COMMON_SUPER_TYPE
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode INTERSECTION_TYPE -> INTERSECTION_TYPE
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode[] values() -> values
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$Mode valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$WhenMappings -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$Companion$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$supertypes$2 -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$supertypes$2:
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$valueToString$1 -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$valueToString$1:
    kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor$valueToString$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerValueConstant -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerValueConstant:
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerValueTypeConstructor -> kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerValueTypeConstructor:
    java.util.ArrayList supertypes -> supertypes
    long value -> value
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    java.util.Collection getSupertypes() -> getSupertypes
    java.util.List getParameters() -> getParameters
    boolean isDenotable() -> isDenotable
    java.lang.Void getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    java.lang.String toString() -> toString
kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue:
    kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getArgumentType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getArgumentType
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Companion -> kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Companion:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue create(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value -> kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value$LocalClass -> kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value$LocalClass:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value$NormalClass -> kotlin.reflect.jvm.internal.impl.resolve.constants.KClassValue$Value$NormalClass:
    kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue value -> value
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    int getArrayDimensions() -> getArrayDimensions
    kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue getValue() -> getValue
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.constants.ClassLiteralValue) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.resolve.constants.LongValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.LongValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(long) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.NullValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.NullValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.PrimitiveTypeUtilKt -> kotlin.reflect.jvm.internal.impl.resolve.constants.PrimitiveTypeUtilKt:
    java.util.Collection getAllSignedLiteralTypes(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getAllSignedLiteralTypes
kotlin.reflect.jvm.internal.impl.resolve.constants.ShortValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ShortValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(short) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.StringValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.StringValue:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.UByteValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.UByteValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(byte) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.UIntValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.UIntValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(int) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.ULongValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.ULongValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(long) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.UShortValue -> kotlin.reflect.jvm.internal.impl.resolve.constants.UShortValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getType
    java.lang.String toString() -> toString
    void <init>(short) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.constants.UnsignedValueConstant -> kotlin.reflect.jvm.internal.impl.resolve.constants.UnsignedValueConstant:
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.deprecation.DeprecationKt -> kotlin.reflect.jvm.internal.impl.resolve.deprecation.DeprecationKt:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey DEPRECATED_FUNCTION_KEY -> DEPRECATED_FUNCTION_KEY
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey getDEPRECATED_FUNCTION_KEY() -> getDEPRECATED_FUNCTION_KEY
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.deprecation.DeprecationKt$DEPRECATED_FUNCTION_KEY$1 -> kotlin.reflect.jvm.internal.impl.resolve.deprecation.DeprecationKt$DEPRECATED_FUNCTION_KEY$1:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt:
    kotlin.reflect.jvm.internal.impl.name.Name RETENTION_PARAMETER_NAME -> RETENTION_PARAMETER_NAME
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getFqNameUnsafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqNameUnsafe
    kotlin.reflect.jvm.internal.impl.name.FqName getFqNameSafe(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getFqNameSafe
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getModule
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveTopLevelClass(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> resolveTopLevelClass
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) -> getClassId
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getSuperClassNotAny(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> getSuperClassNotAny
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getBuiltIns
    boolean declaresOrInheritsDefaultValue(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> declaresOrInheritsDefaultValue
    kotlin.sequences.Sequence getParentsWithSelf(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getParentsWithSelf
    kotlin.sequences.Sequence getParents(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> getParents
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getPropertyIfAccessor(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getPropertyIfAccessor
    kotlin.reflect.jvm.internal.impl.name.FqName fqNameOrNull(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> fqNameOrNull
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor firstOverridden(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,boolean,kotlin.jvm.functions.Function1) -> firstOverridden
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor firstOverridden$default(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object) -> firstOverridden$default
    java.util.Collection computeSealedSubclasses(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> computeSealedSubclasses
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getAnnotationClass(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> getAnnotationClass
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue firstArgument(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> firstArgument
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner getKotlinTypeRefiner(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> getKotlinTypeRefiner
    boolean isTypeRefinementEnabled(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> isTypeRefinementEnabled
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$computeSealedSubclasses$1 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$computeSealedSubclasses$1:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor $sealedClass -> $sealedClass
    java.util.LinkedHashSet $result -> $result
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,boolean) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.LinkedHashSet) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$1 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$1:
    kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$1 INSTANCE -> INSTANCE
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.util.List getNeighbors(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> getNeighbors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$2 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$2:
    kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$declaresOrInheritsDefaultValue$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$firstOverridden$1 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$firstOverridden$1:
    boolean $useOriginal -> $useOriginal
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
    java.lang.Iterable getNeighbors(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> getNeighbors
    void <init>(boolean) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$firstOverridden$2 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$firstOverridden$2:
    kotlin.jvm.internal.Ref$ObjectRef $result -> $result
    kotlin.jvm.functions.Function1 $predicate -> $predicate
    boolean beforeChildren(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> beforeChildren
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    void afterChildren(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> afterChildren
    void afterChildren(java.lang.Object) -> afterChildren
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor result() -> result
    java.lang.Object result() -> result
    void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$parentsWithSelf$1 -> kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$parentsWithSelf$1:
    kotlin.reflect.jvm.internal.impl.resolve.descriptorUtil.DescriptorUtilsKt$parentsWithSelf$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.jvm.InlineClassManglingRulesKt -> kotlin.reflect.jvm.internal.impl.resolve.jvm.InlineClassManglingRulesKt:
    boolean shouldHideConstructorDueToInlineClassTypeValueParameters(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> shouldHideConstructorDueToInlineClassTypeValueParameters
    boolean isInlineClassThatRequiresMangling(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isInlineClassThatRequiresMangling
    boolean isInlineClassThatRequiresMangling(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isInlineClassThatRequiresMangling
    boolean requiresFunctionNameMangling(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> requiresFunctionNameMangling
    boolean isDontMangleClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> isDontMangleClass
    boolean isTypeParameterWithUpperBoundThatRequiresMangling(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isTypeParameterWithUpperBoundThatRequiresMangling
kotlin.reflect.jvm.internal.impl.resolve.jvm.JavaDescriptorResolver -> kotlin.reflect.jvm.internal.impl.resolve.jvm.JavaDescriptorResolver:
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider packageFragmentProvider -> packageFragmentProvider
    kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache javaResolverCache -> javaResolverCache
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.load.java.structure.JavaClass) -> resolveClass
    kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider getPackageFragmentProvider() -> getPackageFragmentProvider
    void <init>(kotlin.reflect.jvm.internal.impl.load.java.lazy.LazyJavaPackageFragmentProvider,kotlin.reflect.jvm.internal.impl.load.java.components.JavaResolverCache) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName -> kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName:
    java.lang.String internalName -> internalName
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName byInternalName(java.lang.String) -> byInternalName
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName byClassId(kotlin.reflect.jvm.internal.impl.name.ClassId) -> byClassId
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmClassName byFqNameWithoutInnerClasses(kotlin.reflect.jvm.internal.impl.name.FqName) -> byFqNameWithoutInnerClasses
    void <init>(java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.name.FqName getFqNameForTopLevelClassMaybeWithDollars() -> getFqNameForTopLevelClassMaybeWithDollars
    kotlin.reflect.jvm.internal.impl.name.FqName getPackageFqName() -> getPackageFqName
    java.lang.String getInternalName() -> getInternalName
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType -> kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType:
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType BOOLEAN -> BOOLEAN
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType CHAR -> CHAR
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType BYTE -> BYTE
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType SHORT -> SHORT
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType INT -> INT
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType FLOAT -> FLOAT
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType LONG -> LONG
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType DOUBLE -> DOUBLE
    java.util.Set WRAPPERS_CLASS_NAMES -> WRAPPERS_CLASS_NAMES
    java.util.Map TYPE_BY_NAME -> TYPE_BY_NAME
    java.util.Map TYPE_BY_PRIMITIVE_TYPE -> TYPE_BY_PRIMITIVE_TYPE
    java.util.Map TYPE_BY_DESC -> TYPE_BY_DESC
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType primitiveType -> primitiveType
    java.lang.String name -> name
    java.lang.String desc -> desc
    kotlin.reflect.jvm.internal.impl.name.FqName wrapperFqName -> wrapperFqName
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType[] values() -> values
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType valueOf(java.lang.String) -> valueOf
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType get(java.lang.String) -> get
    kotlin.reflect.jvm.internal.impl.resolve.jvm.JvmPrimitiveType get(kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType) -> get
    void <init>(java.lang.String,int,kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType,java.lang.String,java.lang.String,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType() -> getPrimitiveType
    java.lang.String getJavaKeywordName() -> getJavaKeywordName
    java.lang.String getDesc() -> getDesc
    kotlin.reflect.jvm.internal.impl.name.FqName getWrapperFqName() -> getWrapperFqName
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.scopes.AbstractScopeAdapter -> kotlin.reflect.jvm.internal.impl.resolve.scopes.AbstractScopeAdapter:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getWorkerScope() -> getWorkerScope
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope:
    java.lang.String debugName -> debugName
    java.util.List scopes -> scopes
    kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.lang.String toString() -> toString
    void <init>(java.lang.String,java.util.List) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope$Companion -> kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope$Companion:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope create(java.lang.String,java.util.List) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude:
    int getFullyExcludedDescriptorKinds() -> getFullyExcludedDescriptorKinds
    java.lang.String toString() -> toString
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$NonExtensions -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$NonExtensions:
    int fullyExcludedDescriptorKinds -> fullyExcludedDescriptorKinds
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$NonExtensions INSTANCE -> INSTANCE
    int getFullyExcludedDescriptorKinds() -> getFullyExcludedDescriptorKinds
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$TopLevelPackages -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$TopLevelPackages:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindExclude$TopLevelPackages INSTANCE -> INSTANCE
    int getFullyExcludedDescriptorKinds() -> getFullyExcludedDescriptorKinds
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter:
    int kindMask -> kindMask
    java.util.List excludes -> excludes
    int nextMaskValue -> nextMaskValue
    int NON_SINGLETON_CLASSIFIERS_MASK -> NON_SINGLETON_CLASSIFIERS_MASK
    int SINGLETON_CLASSIFIERS_MASK -> SINGLETON_CLASSIFIERS_MASK
    int TYPE_ALIASES_MASK -> TYPE_ALIASES_MASK
    int PACKAGES_MASK -> PACKAGES_MASK
    int FUNCTIONS_MASK -> FUNCTIONS_MASK
    int VARIABLES_MASK -> VARIABLES_MASK
    int ALL_KINDS_MASK -> ALL_KINDS_MASK
    int CLASSIFIERS_MASK -> CLASSIFIERS_MASK
    int VALUES_MASK -> VALUES_MASK
    int CALLABLES_MASK -> CALLABLES_MASK
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter ALL -> ALL
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter CALLABLES -> CALLABLES
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter NON_SINGLETON_CLASSIFIERS -> NON_SINGLETON_CLASSIFIERS
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter SINGLETON_CLASSIFIERS -> SINGLETON_CLASSIFIERS
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter TYPE_ALIASES -> TYPE_ALIASES
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter CLASSIFIERS -> CLASSIFIERS
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter PACKAGES -> PACKAGES
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter FUNCTIONS -> FUNCTIONS
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter VARIABLES -> VARIABLES
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter VALUES -> VALUES
    java.util.List DEBUG_PREDEFINED_FILTERS_MASK_NAMES -> DEBUG_PREDEFINED_FILTERS_MASK_NAMES
    java.util.List DEBUG_MASK_BIT_NAMES -> DEBUG_MASK_BIT_NAMES
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion Companion -> Companion
    int getKindMask() -> getKindMask
    boolean acceptsKinds(int) -> acceptsKinds
    kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter restrictedToKindsOrNull(int) -> restrictedToKindsOrNull
    java.lang.String toString() -> toString
    java.util.List getExcludes() -> getExcludes
    void <init>(int,java.util.List) -> <init>
    void <init>(int,java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
    int access$getNextMaskValue$cp() -> access$getNextMaskValue$cp
    void access$setNextMaskValue$cp(int) -> access$setNextMaskValue$cp
    int access$getNON_SINGLETON_CLASSIFIERS_MASK$cp() -> access$getNON_SINGLETON_CLASSIFIERS_MASK$cp
    int access$getSINGLETON_CLASSIFIERS_MASK$cp() -> access$getSINGLETON_CLASSIFIERS_MASK$cp
    int access$getTYPE_ALIASES_MASK$cp() -> access$getTYPE_ALIASES_MASK$cp
    int access$getPACKAGES_MASK$cp() -> access$getPACKAGES_MASK$cp
    int access$getFUNCTIONS_MASK$cp() -> access$getFUNCTIONS_MASK$cp
    int access$getVARIABLES_MASK$cp() -> access$getVARIABLES_MASK$cp
    int access$getALL_KINDS_MASK$cp() -> access$getALL_KINDS_MASK$cp
    int access$getCLASSIFIERS_MASK$cp() -> access$getCLASSIFIERS_MASK$cp
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion:
    int nextMask() -> nextMask
    int getNON_SINGLETON_CLASSIFIERS_MASK() -> getNON_SINGLETON_CLASSIFIERS_MASK
    int getSINGLETON_CLASSIFIERS_MASK() -> getSINGLETON_CLASSIFIERS_MASK
    int getTYPE_ALIASES_MASK() -> getTYPE_ALIASES_MASK
    int getPACKAGES_MASK() -> getPACKAGES_MASK
    int getFUNCTIONS_MASK() -> getFUNCTIONS_MASK
    int getVARIABLES_MASK() -> getVARIABLES_MASK
    int getALL_KINDS_MASK() -> getALL_KINDS_MASK
    int getCLASSIFIERS_MASK() -> getCLASSIFIERS_MASK
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    int access$nextMask(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion) -> access$nextMask
kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion$MaskToName -> kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter$Companion$MaskToName:
    int mask -> mask
    java.lang.String name -> name
    int getMask() -> getMask
    java.lang.String getName() -> getName
    void <init>(int,java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allDescriptors$delegate -> allDescriptors$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor containingClass -> containingClass
    void <clinit>() -> <clinit>
    java.util.List getAllDescriptors() -> getAllDescriptors
    java.util.List computeDeclaredFunctions() -> computeDeclaredFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.List createFakeOverrides(java.util.List) -> createFakeOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getContainingClass() -> getContainingClass
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    java.util.List access$createFakeOverrides(kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope,java.util.List) -> access$createFakeOverrides
kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope$allDescriptors$2 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope$allDescriptors$2:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope$createFakeOverrides$4 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope$createFakeOverrides$4:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope this$0 -> this$0
    java.util.ArrayList $result -> $result
    void addFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> addFakeOverride
    void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> conflict
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.GivenFunctionsMemberScope,java.util.ArrayList) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.InnerClassesScopeWrapper -> kotlin.reflect.jvm.internal.impl.resolve.scopes.InnerClassesScopeWrapper:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope workerScope -> workerScope
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.List getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.lang.String toString() -> toString
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.LazyScopeAdapter -> kotlin.reflect.jvm.internal.impl.resolve.scopes.LazyScopeAdapter:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue scope -> scope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getWorkerScope() -> getWorkerScope
    void <init>(kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion Companion -> Companion
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion:
    kotlin.jvm.functions.Function1 ALL_NAME_FILTER -> ALL_NAME_FILTER
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion $$INSTANCE -> $$INSTANCE
    kotlin.jvm.functions.Function1 getALL_NAME_FILTER() -> getALL_NAME_FILTER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion$ALL_NAME_FILTER$1 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion$ALL_NAME_FILTER$1:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Companion$ALL_NAME_FILTER$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$DefaultImpls -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$DefaultImpls:
    void recordLookup(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope$Empty INSTANCE -> INSTANCE
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScopeImpl -> kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScopeImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void <init>() -> <init>
    void recordLookup(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope$DefaultImpls -> kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope$DefaultImpls:
    java.util.Collection getContributedDescriptors$default(kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope,kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1,int,java.lang.Object) -> getContributedDescriptors$default
    void recordLookup(kotlin.reflect.jvm.internal.impl.resolve.scopes.ResolutionScope,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum -> kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue functions$delegate -> functions$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor containingClass -> containingClass
    void <clinit>() -> <clinit>
    java.lang.Void getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.List getFunctions() -> getFunctions
    java.util.List getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.ArrayList getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$getContainingClass$p(kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum) -> access$getContainingClass$p
kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum$functions$2 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum$functions$2:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.StaticScopeForKotlinEnum) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor substitutor -> substitutor
    java.util.Map substitutedDescriptors -> substitutedDescriptors
    kotlin.Lazy _allDescriptors$delegate -> _allDescriptors$delegate
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope workerScope -> workerScope
    void <clinit>() -> <clinit>
    java.util.Collection get_allDescriptors() -> get_allDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor substitute(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> substitute
    java.util.Collection substitute(java.util.Collection) -> substitute
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> <init>
    java.util.Collection access$substitute(kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope,java.util.Collection) -> access$substitute
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope access$getWorkerScope$p(kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope) -> access$getWorkerScope$p
kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope$_allDescriptors$2 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope$_allDescriptors$2:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.SubstitutingScope) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope -> kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope workerScope -> workerScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$Companion Companion -> Companion
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope getWorkerScope() -> getWorkerScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getWorkerScope() -> getWorkerScope
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.resolve.scopes.ChainedMemberScope,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope create(java.lang.String,java.util.Collection) -> create
kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$Companion -> kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$Companion:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope create(java.lang.String,java.util.Collection) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedDescriptors$2 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedDescriptors$2:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedDescriptors$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedFunctions$1 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedFunctions$1:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedFunctions$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedVariables$1 -> kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedVariables$1:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.TypeIntersectionScope$getContributedVariables$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor invoke(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.AbstractReceiverValue -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.AbstractReceiverValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType receiverType -> receiverType
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue original -> original
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue) -> <init>
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ExtensionReceiver -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ExtensionReceiver:
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor descriptor -> descriptor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue) -> <init>
    java.lang.String toString() -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitClassReceiver -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitClassReceiver:
    kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitClassReceiver original -> original
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor declarationDescriptor -> declarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor classDescriptor -> classDescriptor
    kotlin.reflect.jvm.internal.impl.types.SimpleType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor() -> getClassDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitClassReceiver) -> <init>
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitReceiver -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ImplicitReceiver:
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.SuperCallReceiverValue -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.SuperCallReceiverValue:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getThisType() -> getThisType
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ThisClassReceiver -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ThisClassReceiver:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor() -> getClassDescriptor
kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.TransientReceiver -> kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.TransientReceiver:
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue) -> <init>
    java.lang.String toString() -> toString
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.serialization.SerializerExtensionProtocol -> kotlin.reflect.jvm.internal.impl.serialization.SerializerExtensionProtocol:
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite extensionRegistry -> extensionRegistry
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension packageFqName -> packageFqName
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension constructorAnnotation -> constructorAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension classAnnotation -> classAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension functionAnnotation -> functionAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertyAnnotation -> propertyAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertyGetterAnnotation -> propertyGetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension propertySetterAnnotation -> propertySetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension enumEntryAnnotation -> enumEntryAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension compileTimeValue -> compileTimeValue
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension parameterAnnotation -> parameterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeAnnotation -> typeAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension typeParameterAnnotation -> typeParameterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite getExtensionRegistry() -> getExtensionRegistry
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getConstructorAnnotation() -> getConstructorAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getClassAnnotation() -> getClassAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getFunctionAnnotation() -> getFunctionAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getPropertyAnnotation() -> getPropertyAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getPropertyGetterAnnotation() -> getPropertyGetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getPropertySetterAnnotation() -> getPropertySetterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getEnumEntryAnnotation() -> getEnumEntryAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getCompileTimeValue() -> getCompileTimeValue
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getParameterAnnotation() -> getParameterAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getTypeAnnotation() -> getTypeAnnotation
    kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension getTypeParameterAnnotation() -> getTypeParameterAnnotation
    void <init>(kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension,kotlin.reflect.jvm.internal.impl.protobuf.GeneratedMessageLite$GeneratedExtension) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents components -> components
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable fragments -> fragments
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.KotlinMetadataFinder finder -> finder
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor moduleDescriptor -> moduleDescriptor
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents getComponents() -> getComponents
    void setComponents(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents) -> setComponents
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragment findPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> findPackage
    java.util.List getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackageFragments
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.KotlinMetadataFinder getFinder() -> getFinder
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModuleDescriptor() -> getModuleDescriptor
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.serialization.deserialization.KotlinMetadataFinder,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider$fragments$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider$fragments$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragment invoke(kotlin.reflect.jvm.internal.impl.name.FqName) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind FUNCTION -> FUNCTION
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind PROPERTY -> PROPERTY
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind PROPERTY_GETTER -> PROPERTY_GETTER
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind PROPERTY_SETTER -> PROPERTY_SETTER
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader:
    java.util.List loadClassAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class) -> loadClassAnnotations
    java.util.List loadCallableAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadCallableAnnotations
    java.util.List loadPropertyBackingFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyBackingFieldAnnotations
    java.util.List loadPropertyDelegateFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyDelegateFieldAnnotations
    java.util.List loadEnumEntryAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> loadEnumEntryAnnotations
    java.util.List loadValueParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,int,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> loadValueParameterAnnotations
    java.util.List loadExtensionReceiverParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadExtensionReceiverParameterAnnotations
    java.util.List loadTypeAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotations
    java.util.List loadTypeParameterAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeParameterAnnotations
    java.lang.Object loadPropertyConstant(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> loadPropertyConstant
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoaderImpl -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoaderImpl:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer deserializer -> deserializer
    kotlin.reflect.jvm.internal.impl.serialization.SerializerExtensionProtocol protocol -> protocol
    java.util.List loadClassAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class) -> loadClassAnnotations
    java.util.List loadCallableAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadCallableAnnotations
    java.util.List loadPropertyBackingFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyBackingFieldAnnotations
    java.util.List loadPropertyDelegateFieldAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadPropertyDelegateFieldAnnotations
    java.util.List loadEnumEntryAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry) -> loadEnumEntryAnnotations
    java.util.List loadValueParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,int,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter) -> loadValueParameterAnnotations
    java.util.List loadExtensionReceiverParameterAnnotations(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> loadExtensionReceiverParameterAnnotations
    java.util.List loadTypeAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeAnnotations
    java.util.List loadTypeParameterAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> loadTypeParameterAnnotations
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue loadPropertyConstant(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> loadPropertyConstant
    java.lang.Object loadPropertyConstant(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> loadPropertyConstant
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.serialization.SerializerExtensionProtocol) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoaderImpl$WhenMappings -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoaderImpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor module -> module
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses notFoundClasses -> notFoundClasses
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor deserializeAnnotation(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> deserializeAnnotation
    kotlin.Pair resolveArgument(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument,java.util.Map,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> resolveArgument
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveValueAndCheckExpectedType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> resolveValueAndCheckExpectedType
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue resolveValue(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver) -> resolveValue
    boolean doesValueConformToExpectedType(kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Annotation$Argument$Value) -> doesValueConformToExpectedType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> resolveClass
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer$WhenMappings -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class classProto -> classProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion metadataVersion -> metadataVersion
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement sourceElement -> sourceElement
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver component1() -> component1
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class component2() -> component2
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion component3() -> component3
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement component4() -> component4
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData findClassData(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassData
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer:
    kotlin.jvm.functions.Function1 classes -> classes
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents components -> components
    java.util.Set BLACK_LIST -> BLACK_LIST
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor deserializeClass(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData) -> deserializeClass
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor deserializeClass$default(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer,kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData,int,java.lang.Object) -> deserializeClass$default
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createClass(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$ClassKey) -> createClass
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents) -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$createClass(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$ClassKey) -> access$createClass
    java.util.Set access$getBLACK_LIST$cp() -> access$getBLACK_LIST$cp
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$ClassKey -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$ClassKey:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData classData -> classData
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData getClassData() -> getClassData
    void <init>(kotlin.reflect.jvm.internal.impl.name.ClassId,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$Companion -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$Companion:
    java.util.Set getBLACK_LIST() -> getBLACK_LIST
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$classes$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$classes$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer$ClassKey) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion Companion -> Companion
    kotlin.Pair deserializeContractFromFunction(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> deserializeContractFromFunction
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer DEFAULT -> DEFAULT
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion $$INSTANCE -> $$INSTANCE
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer getDEFAULT() -> getDEFAULT
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion$DEFAULT$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer$Companion$DEFAULT$1:
    kotlin.Pair deserializeContractFromFunction(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> deserializeContractFromFunction
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer classDeserializer -> classDeserializer
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor moduleDescriptor -> moduleDescriptor
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration configuration -> configuration
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder classDataFinder -> classDataFinder
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader annotationAndConstantLoader -> annotationAndConstantLoader
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider packageFragmentProvider -> packageFragmentProvider
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings localClassifierTypeSettings -> localClassifierTypeSettings
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter errorReporter -> errorReporter
    kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker lookupTracker -> lookupTracker
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer flexibleTypeDeserializer -> flexibleTypeDeserializer
    java.lang.Iterable fictitiousClassDescriptorFactories -> fictitiousClassDescriptorFactories
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses notFoundClasses -> notFoundClasses
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer contractDeserializer -> contractDeserializer
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider additionalClassPartsProvider -> additionalClassPartsProvider
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter platformDependentDeclarationFilter -> platformDependentDeclarationFilter
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite extensionRegistryLite -> extensionRegistryLite
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker kotlinTypeChecker -> kotlinTypeChecker
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDeserializer getClassDeserializer() -> getClassDeserializer
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor deserializeClass(kotlin.reflect.jvm.internal.impl.name.ClassId) -> deserializeClass
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext createContext(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource) -> createContext
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModuleDescriptor() -> getModuleDescriptor
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration getConfiguration() -> getConfiguration
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder getClassDataFinder() -> getClassDataFinder
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader getAnnotationAndConstantLoader() -> getAnnotationAndConstantLoader
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider getPackageFragmentProvider() -> getPackageFragmentProvider
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings getLocalClassifierTypeSettings() -> getLocalClassifierTypeSettings
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter getErrorReporter() -> getErrorReporter
    kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker getLookupTracker() -> getLookupTracker
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer getFlexibleTypeDeserializer() -> getFlexibleTypeDeserializer
    java.lang.Iterable getFictitiousClassDescriptorFactories() -> getFictitiousClassDescriptorFactories
    kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses getNotFoundClasses() -> getNotFoundClasses
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer getContractDeserializer() -> getContractDeserializer
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider getAdditionalClassPartsProvider() -> getAdditionalClassPartsProvider
    kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter getPlatformDependentDeclarationFilter() -> getPlatformDependentDeclarationFilter
    kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite getExtensionRegistryLite() -> getExtensionRegistryLite
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker getKotlinTypeChecker() -> getKotlinTypeChecker
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider,kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationAndConstantLoader,kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider,kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter,kotlin.reflect.jvm.internal.impl.incremental.components.LookupTracker,kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.NotFoundClasses,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ContractDeserializer,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.protobuf.ExtensionRegistryLite,kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration:
    boolean getSkipMetadataVersionCheck() -> getSkipMetadataVersionCheck
    boolean getReportErrorsOnPreReleaseDependencies() -> getReportErrorsOnPreReleaseDependencies
    boolean getTypeAliasesAllowed() -> getTypeAliasesAllowed
    boolean getReleaseCoroutines() -> getReleaseCoroutines
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration$Default -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration$Default:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration$Default INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean getSkipMetadataVersionCheck() -> getSkipMetadataVersionCheck
    boolean getReportErrorsOnPreReleaseDependencies() -> getReportErrorsOnPreReleaseDependencies
    boolean getTypeAliasesAllowed() -> getTypeAliasesAllowed
    boolean getReleaseCoroutines() -> getReleaseCoroutines
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration$DefaultImpls -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration$DefaultImpls:
    boolean getSkipMetadataVersionCheck(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration) -> getSkipMetadataVersionCheck
    boolean getReportErrorsOnPreReleaseDependencies(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration) -> getReportErrorsOnPreReleaseDependencies
    boolean getTypeAliasesAllowed(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration) -> getTypeAliasesAllowed
    boolean getReleaseCoroutines(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationConfiguration) -> getReleaseCoroutines
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer typeDeserializer -> typeDeserializer
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer memberDeserializer -> memberDeserializer
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents components -> components
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable versionRequirementTable -> versionRequirementTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion metadataVersion -> metadataVersion
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer getTypeDeserializer() -> getTypeDeserializer
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer getMemberDeserializer() -> getMemberDeserializer
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext childContext(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.util.List,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion) -> childContext
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext childContext$default(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.util.List,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,int,java.lang.Object) -> childContext$default
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents getComponents() -> getComponents
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource() -> getContainerSource
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedClassDataFinder -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedClassDataFinder:
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider packageFragmentProvider -> packageFragmentProvider
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData findClassData(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassData
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragment -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragment:
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    void initialize(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents) -> initialize
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder getClassDataFinder() -> getClassDataFinder
    boolean hasTopLevelClass(kotlin.reflect.jvm.internal.impl.name.Name) -> hasTopLevelClass
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolverImpl nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoBasedClassDataFinder classDataFinder -> classDataFinder
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment _proto -> _proto
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope _memberScope -> _memberScope
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion metadataVersion -> metadataVersion
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoBasedClassDataFinder getClassDataFinder() -> getClassDataFinder
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassDataFinder getClassDataFinder() -> getClassDataFinder
    void initialize(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents) -> initialize
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource access$getContainerSource$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl) -> access$getContainerSource$p
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl$classDataFinder$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl$classDataFinder$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement invoke(kotlin.reflect.jvm.internal.impl.name.ClassId) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl$initialize$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl$initialize$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializedPackageFragmentImpl) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter DO_NOTHING -> DO_NOTHING
    void reportIncompleteHierarchy(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List) -> reportIncompleteHierarchy
    void reportCannotInferVisibility(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> reportCannotInferVisibility
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ErrorReporter$1:
    void <init>() -> <init>
    void reportIncompleteHierarchy(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List) -> reportIncompleteHierarchy
    void reportCannotInferVisibility(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> reportCannotInferVisibility
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer:
    kotlin.reflect.jvm.internal.impl.types.KotlinType create(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,java.lang.String,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> create
kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer$ThrowException -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer$ThrowException:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.FlexibleTypeDeserializer$ThrowException INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.KotlinType create(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type,java.lang.String,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> create
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.IncompatibleVersionErrorData:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion actualVersion -> actualVersion
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion expectedVersion -> expectedVersion
    java.lang.String filePath -> filePath
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,java.lang.String,kotlin.reflect.jvm.internal.impl.name.ClassId) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.serialization.deserialization.KotlinMetadataFinder -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.KotlinMetadataFinder:
    java.io.InputStream findBuiltInsData(kotlin.reflect.jvm.internal.impl.name.FqName) -> findBuiltInsData
kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getReplacementTypeForLocalClassifiers() -> getReplacementTypeForLocalClassifiers
kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings$Default -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings$Default:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.LocalClassifierTypeSettings$Default INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.SimpleType getReplacementTypeForLocalClassifiers() -> getReplacementTypeForLocalClassifiers
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotationDeserializer annotationDeserializer -> annotationDeserializer
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext c -> c
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor loadProperty(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> loadProperty
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode checkExperimentalCoroutine(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> checkExperimentalCoroutine
    void forceUpperBoundsComputation(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> forceUpperBoundsComputation
    void initializeWithCoroutinesExperimentalityStatus(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedSimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.util.Map,boolean) -> initializeWithCoroutinesExperimentalityStatus
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode computeExperimentalityModeForFunctions(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.Collection,java.util.Collection,kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> computeExperimentalityModeForFunctions
    boolean containsSuspendFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> containsSuspendFunctionType
    boolean versionAndReleaseCoroutinesMismatch(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor) -> versionAndReleaseCoroutinesMismatch
    int loadOldFlags(int) -> loadOldFlags
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor loadFunction(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function) -> loadFunction
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor loadTypeAlias(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias) -> loadTypeAlias
    kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getDispatchReceiverParameter() -> getDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor loadConstructor(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,boolean) -> loadConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,int,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getPropertyFieldAnnotations(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,boolean) -> getPropertyFieldAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getReceiverParameterAnnotations(kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> getReceiverParameterAnnotations
    java.util.List valueParameters(java.util.List,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> valueParameters
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer asProtoContainer(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> asProtoContainer
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer access$asProtoContainer(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> access$asProtoContainer
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext access$getC$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer) -> access$getC$p
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$containsSuspendFunctionType$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$containsSuspendFunctionType$1:
    kotlin.reflect.KProperty1 INSTANCE -> INSTANCE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.Object get(java.lang.Object) -> get
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getAnnotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getAnnotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite $proto -> $proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind $kind -> $kind
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getPropertyFieldAnnotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getPropertyFieldAnnotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer this$0 -> this$0
    boolean $isDelegate -> $isDelegate
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property $proto -> $proto
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,boolean,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getReceiverParameterAnnotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$getReceiverParameterAnnotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite $proto -> $proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind $kind -> $kind
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$loadProperty$3 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$loadProperty$3:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property $proto -> $proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPropertyDescriptor $property -> $property
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.resolve.constants.ConstantValue invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPropertyDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$valueParameters$$inlined$mapIndexed$lambda$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer$valueParameters$$inlined$mapIndexed$lambda$1:
    int $i -> $i
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter $proto -> $proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer $containerOfCallable$inlined -> $containerOfCallable$inlined
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite $callable$inlined -> $callable$inlined
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind $kind$inlined -> $kind$inlined
    kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor $callableDescriptor$inlined -> $callableDescriptor$inlined
    void <init>(int,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$ValueParameter,kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer,kotlin.reflect.jvm.internal.impl.protobuf.MessageLite,kotlin.reflect.jvm.internal.impl.serialization.deserialization.AnnotatedCallableKind,kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor) -> <init>
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
kotlin.reflect.jvm.internal.impl.serialization.deserialization.NameResolverUtilKt -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.NameResolverUtilKt:
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,int) -> getClassId
    kotlin.reflect.jvm.internal.impl.name.Name getName(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,int) -> getName
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoBasedClassDataFinder -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoBasedClassDataFinder:
    java.util.Map classIdToProto -> classIdToProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion metadataVersion -> metadataVersion
    kotlin.jvm.functions.Function1 classSource -> classSource
    java.util.Collection getAllClassIds() -> getAllClassIds
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ClassData findClassData(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassData
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer:
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement source -> source
    kotlin.reflect.jvm.internal.impl.name.FqName debugFqName() -> debugFqName
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind kind -> kind
    boolean isInner -> isInner
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class classProto -> classProto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class outerClass -> outerClass
    kotlin.reflect.jvm.internal.impl.name.ClassId getClassId() -> getClassId
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind getKind() -> getKind
    boolean isInner() -> isInner
    kotlin.reflect.jvm.internal.impl.name.FqName debugFqName() -> debugFqName
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getClassProto() -> getClassProto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class getOuterClass() -> getOuterClass
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Package -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Package:
    kotlin.reflect.jvm.internal.impl.name.FqName fqName -> fqName
    kotlin.reflect.jvm.internal.impl.name.FqName debugFqName() -> debugFqName
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoEnumFlags -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoEnumFlags:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoEnumFlags INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind memberKind(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$MemberKind) -> memberKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Modality) -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Visibility) -> visibility
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind classKind(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class$Kind) -> classKind
    kotlin.reflect.jvm.internal.impl.types.Variance variance(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter$Variance) -> variance
    kotlin.reflect.jvm.internal.impl.types.Variance variance(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument$Projection) -> variance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoEnumFlags$WhenMappings -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoEnumFlags$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    int[] $EnumSwitchMapping$2 -> $EnumSwitchMapping$2
    int[] $EnumSwitchMapping$3 -> $EnumSwitchMapping$3
    int[] $EnumSwitchMapping$4 -> $EnumSwitchMapping$4
    int[] $EnumSwitchMapping$5 -> $EnumSwitchMapping$5
    int[] $EnumSwitchMapping$6 -> $EnumSwitchMapping$6
    int[] $EnumSwitchMapping$7 -> $EnumSwitchMapping$7
    int[] $EnumSwitchMapping$8 -> $EnumSwitchMapping$8
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.SuspendFunctionTypeUtilKt -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.SuspendFunctionTypeUtilKt:
    kotlin.reflect.jvm.internal.impl.name.FqName KOTLIN_SUSPEND_BUILT_IN_FUNCTION_FQ_NAME -> KOTLIN_SUSPEND_BUILT_IN_FUNCTION_FQ_NAME
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer:
    kotlin.jvm.functions.Function1 classDescriptors -> classDescriptors
    kotlin.jvm.functions.Function1 typeAliasDescriptors -> typeAliasDescriptors
    java.util.Map typeParameterDescriptors -> typeParameterDescriptors
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext c -> c
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer parent -> parent
    java.lang.String debugName -> debugName
    java.lang.String containerPresentableName -> containerPresentableName
    boolean experimentalSuspendFunctionTypeEncountered -> experimentalSuspendFunctionTypeEncountered
    java.util.List getOwnTypeParameters() -> getOwnTypeParameters
    kotlin.reflect.jvm.internal.impl.types.KotlinType type(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> type
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleType(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> simpleType
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeConstructor(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> typeConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType createSuspendFunctionType(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean) -> createSuspendFunctionType
    kotlin.reflect.jvm.internal.impl.types.SimpleType createSuspendFunctionTypeForBasicCase(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean) -> createSuspendFunctionTypeForBasicCase
    kotlin.reflect.jvm.internal.impl.types.SimpleType transformRuntimeFunctionTypeToSuspendFunction(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> transformRuntimeFunctionTypeToSuspendFunction
    kotlin.reflect.jvm.internal.impl.types.SimpleType createSimpleSuspendFunctionType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> createSimpleSuspendFunctionType
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor typeParameterTypeConstructor(int) -> typeParameterTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor computeClassDescriptor(int) -> computeClassDescriptor
    kotlin.reflect.jvm.internal.impl.types.SimpleType computeLocalClassifierReplacementType(int) -> computeLocalClassifierReplacementType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor computeTypeAliasDescriptor(int) -> computeTypeAliasDescriptor
    kotlin.reflect.jvm.internal.impl.types.TypeProjection typeArgument(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type$Argument) -> typeArgument
    java.lang.String toString() -> toString
    boolean getExperimentalSuspendFunctionTypeEncountered() -> getExperimentalSuspendFunctionTypeEncountered
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,java.util.List,java.lang.String,java.lang.String,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,java.util.List,java.lang.String,java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext access$getC$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> access$getC$p
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$computeClassDescriptor(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,int) -> access$computeClassDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor access$computeTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,int) -> access$computeTypeAliasDescriptor
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$classDescriptors$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$classDescriptors$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(int) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$simpleType$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$simpleType$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.List invoke(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$simpleType$annotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$simpleType$annotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type $proto -> $proto
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeAliasDescriptors$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeAliasDescriptors$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor invoke(int) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type $proto -> $proto
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke(int) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$classNestingLevel$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$classNestingLevel$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$classNestingLevel$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.name.ClassId invoke(kotlin.reflect.jvm.internal.impl.name.ClassId) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$typeParametersCount$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$typeParametersCount$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type invoke(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$typeParametersCount$2 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$typeParametersCount$2:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$typeConstructor$1$typeParametersCount$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    int invoke(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Type) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInSerializerProtocol -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInSerializerProtocol:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInSerializerProtocol INSTANCE -> INSTANCE
    java.lang.String getBuiltInsFilePath(kotlin.reflect.jvm.internal.impl.name.FqName) -> getBuiltInsFilePath
    java.lang.String getBuiltInsFileName(kotlin.reflect.jvm.internal.impl.name.FqName) -> getBuiltInsFileName
    java.lang.String shortName(kotlin.reflect.jvm.internal.impl.name.FqName) -> shortName
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsResourceLoader resourceLoader -> resourceLoader
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider createPackageFragmentProvider(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,boolean) -> createPackageFragmentProvider
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider createBuiltInPackageFragmentProvider(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.util.Set,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,boolean,kotlin.jvm.functions.Function1) -> createBuiltInPackageFragmentProvider
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider createBuiltInPackageFragmentProvider$default(kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.util.Set,java.lang.Iterable,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.PlatformDependentDeclarationFilter,kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object) -> createBuiltInPackageFragmentProvider$default
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl$createPackageFragmentProvider$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl$createPackageFragmentProvider$1:
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.io.InputStream invoke(java.lang.String) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsResourceLoader) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl:
    boolean isFallback -> isFallback
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl$Companion Companion -> Companion
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion,boolean) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$PackageFragment,kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion,boolean,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl$Companion -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl$Companion:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl create(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor,java.io.InputStream,boolean) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsResourceLoader -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsResourceLoader:
    java.io.InputStream loadResource(java.lang.String) -> loadResource
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DescriptorWithContainerSource -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DescriptorWithContainerSource:
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedAnnotations -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedAnnotations:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue annotations$delegate -> annotations$delegate
    void <clinit>() -> <clinit>
    java.util.List getAnnotations() -> getAnnotations
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function0) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor findAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> findAnnotation
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor:
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor$DefaultImpls:
    java.util.List getVersionRequirements(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedCallableMemberDescriptor) -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassConstructorDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassConstructorDescriptor:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode coroutinesExperimentalCompatibilityMode -> coroutinesExperimentalCompatibilityMode
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor proto -> proto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable versionRequirementTable -> versionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode getCoroutinesExperimentalCompatibilityMode() -> getCoroutinesExperimentalCompatibilityMode
    void setCoroutinesExperimentalCompatibilityMode$deserialization(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode) -> setCoroutinesExperimentalCompatibilityMode$deserialization
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassConstructorDescriptor createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.impl.ClassConstructorDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    boolean isExternal() -> isExternal
    boolean isInline() -> isInline
    boolean isTailrec() -> isTailrec
    boolean isSuspend() -> isSuspend
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource() -> getContainerSource
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Constructor,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.util.List getVersionRequirements() -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor:
    kotlin.reflect.jvm.internal.impl.name.ClassId classId -> classId
    kotlin.reflect.jvm.internal.impl.descriptors.Modality modality -> modality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility visibility -> visibility
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind kind -> kind
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext c -> c
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScopeImpl staticScope -> staticScope
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor typeConstructor -> typeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ScopesHolderForClass memberScopeHolder -> memberScopeHolder
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors enumEntries -> enumEntries
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor containingDeclaration -> containingDeclaration
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue primaryConstructor -> primaryConstructor
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue constructors -> constructors
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue companionObjectDescriptor -> companionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue sealedSubclasses -> sealedSubclasses
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class thisAsProtoContainer -> thisAsProtoContainer
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class classProto -> classProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion metadataVersion -> metadataVersion
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement sourceElement -> sourceElement
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext getC() -> getC
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.ProtoContainer$Class getThisAsProtoContainer$deserialization() -> getThisAsProtoContainer$deserialization
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor() -> getTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind() -> getKind
    kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality() -> getModality
    kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility() -> getVisibility
    boolean isInner() -> isInner
    boolean isData() -> isData
    boolean isInline() -> isInline
    boolean isExpect() -> isExpect
    boolean isActual() -> isActual
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getUnsubstitutedMemberScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScopeImpl getStaticScope() -> getStaticScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope() -> getStaticScope
    boolean isCompanionObject() -> isCompanionObject
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor computePrimaryConstructor() -> computePrimaryConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor() -> getUnsubstitutedPrimaryConstructor
    java.util.Collection computeConstructors() -> computeConstructors
    java.util.List computeSecondaryConstructors() -> computeSecondaryConstructors
    java.util.Collection getConstructors() -> getConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor computeCompanionObjectDescriptor() -> computeCompanionObjectDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getCompanionObjectDescriptor() -> getCompanionObjectDescriptor
    boolean hasNestedClass$deserialization(kotlin.reflect.jvm.internal.impl.name.Name) -> hasNestedClass$deserialization
    java.util.Collection computeSubclassesForSealedClass() -> computeSubclassesForSealedClass
    java.util.Collection getSealedSubclasses() -> getSealedSubclasses
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource() -> getSource
    java.util.List getDeclaredTypeParameters() -> getDeclaredTypeParameters
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class getClassProto() -> getClassProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion getMetadataVersion() -> getMetadataVersion
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Class,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor access$getTypeConstructor$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$getTypeConstructor$p
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors access$getEnumEntries$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$getEnumEntries$p
    kotlin.reflect.jvm.internal.impl.name.ClassId access$getClassId$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$getClassId$p
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor access$computePrimaryConstructor(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$computePrimaryConstructor
    java.util.Collection access$computeConstructors(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$computeConstructors
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor access$computeCompanionObjectDescriptor(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$computeCompanionObjectDescriptor
    java.util.Collection access$computeSubclassesForSealedClass(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> access$computeSubclassesForSealedClass
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue allDescriptors -> allDescriptors
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue refinedSupertypes -> refinedSupertypes
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefiner -> kotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor getClassDescriptor() -> getClassDescriptor
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    void computeNonDeclaredFunctions(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredFunctions
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    void generateFakeOverrides(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection,java.util.Collection) -> generateFakeOverrides
    java.util.Set getNonDeclaredFunctionNames() -> getNonDeclaredFunctionNames
    java.util.Set getNonDeclaredVariableNames() -> getNonDeclaredVariableNames
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    kotlin.reflect.jvm.internal.impl.name.ClassId createClassId(kotlin.reflect.jvm.internal.impl.name.Name) -> createClassId
    void addEnumEntryDescriptors(java.util.Collection,kotlin.jvm.functions.Function1) -> addEnumEntryDescriptors
    void recordLookup(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner access$getKotlinTypeRefiner$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope) -> access$getKotlinTypeRefiner$p
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor access$getClassDescriptor$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope) -> access$getClassDescriptor$p
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$2$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$2$1:
    java.util.List $it -> $it
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$allDescriptors$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$allDescriptors$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$computeNonDeclaredFunctions$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$computeNonDeclaredFunctions$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$generateFakeOverrides$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$generateFakeOverrides$1:
    java.util.Collection $result -> $result
    void addFakeOverride(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> addFakeOverride
    void conflict(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> conflict
    void <init>(java.util.Collection) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$refinedSupertypes$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope$refinedSupertypes$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue parameters -> parameters
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.util.Collection computeSupertypes() -> computeSupertypes
    java.util.List getParameters() -> getParameters
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor$parameters$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor$parameters$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors:
    java.util.Map enumEntryProtos -> enumEntryProtos
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable enumEntryByName -> enumEntryByName
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue enumMemberNames -> enumMemberNames
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findEnumEntry(kotlin.reflect.jvm.internal.impl.name.Name) -> findEnumEntry
    java.util.Set computeEnumMemberNames() -> computeEnumMemberNames
    java.util.Collection all() -> all
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
    java.util.Map access$getEnumEntryProtos$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors) -> access$getEnumEntryProtos$p
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue access$getEnumMemberNames$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors) -> access$getEnumMemberNames$p
    java.util.Set access$computeEnumMemberNames(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors) -> access$computeEnumMemberNames
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.impl.EnumEntrySyntheticClassDescriptor invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1$$special$$inlined$let$lambda$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1$$special$$inlined$let$lambda$1:
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry $proto -> $proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1 this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.name.Name $name$inlined -> $name$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$EnumEntry,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumEntryByName$1,kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumMemberNames$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors$enumMemberNames$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$EnumEntryClassDescriptors) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$annotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$annotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$companionObjectDescriptor$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$companionObjectDescriptor$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$constructors$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$constructors$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$memberScopeHolder$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$memberScopeHolder$1:
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$DeserializedClassMemberScope invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$primaryConstructor$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$primaryConstructor$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$sealedSubclasses$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$sealedSubclasses$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Collection invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource:
    java.lang.String getPresentableString() -> getPresentableString
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor:
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    java.util.List getVersionRequirements() -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode COMPATIBLE -> COMPATIBLE
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode NEEDS_WRAPPER -> NEEDS_WRAPPER
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode INCOMPATIBLE -> INCOMPATIBLE
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode[] values() -> values
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$DefaultImpls -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$DefaultImpls:
    java.util.List getVersionRequirements(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor) -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    java.util.Map functionProtosBytes -> functionProtosBytes
    java.util.Map propertyProtosBytes -> propertyProtosBytes
    java.util.Map typeAliasBytes -> typeAliasBytes
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull functions -> functions
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull properties -> properties
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable typeAliasByName -> typeAliasByName
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue functionNamesLazy$delegate -> functionNamesLazy$delegate
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue variableNamesLazy$delegate -> variableNamesLazy$delegate
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue classNames$delegate -> classNames$delegate
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext c -> c
    void <clinit>() -> <clinit>
    java.util.Map packToByteArray(java.util.Map) -> packToByteArray
    java.util.Set getFunctionNamesLazy() -> getFunctionNamesLazy
    java.util.Set getVariableNamesLazy() -> getVariableNamesLazy
    java.util.Set getTypeAliasNames() -> getTypeAliasNames
    java.util.Set getClassNames$deserialization() -> getClassNames$deserialization
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.util.Collection computeFunctions(kotlin.reflect.jvm.internal.impl.name.Name) -> computeFunctions
    void computeNonDeclaredFunctions(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredFunctions
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection computeProperties(kotlin.reflect.jvm.internal.impl.name.Name) -> computeProperties
    void computeNonDeclaredProperties(kotlin.reflect.jvm.internal.impl.name.Name,java.util.Collection) -> computeNonDeclaredProperties
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor createTypeAlias(kotlin.reflect.jvm.internal.impl.name.Name) -> createTypeAlias
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection computeDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> computeDescriptors
    void addFunctionsAndProperties(java.util.Collection,kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> addFunctionsAndProperties
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor deserializeClass(kotlin.reflect.jvm.internal.impl.name.Name) -> deserializeClass
    boolean hasClass(kotlin.reflect.jvm.internal.impl.name.Name) -> hasClass
    kotlin.reflect.jvm.internal.impl.name.ClassId createClassId(kotlin.reflect.jvm.internal.impl.name.Name) -> createClassId
    java.util.Set getNonDeclaredFunctionNames() -> getNonDeclaredFunctionNames
    java.util.Set getNonDeclaredVariableNames() -> getNonDeclaredVariableNames
    void addEnumEntryDescriptors(java.util.Collection,kotlin.jvm.functions.Function1) -> addEnumEntryDescriptors
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext getC() -> getC
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,java.util.Collection,java.util.Collection,java.util.Collection,kotlin.jvm.functions.Function0) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext access$getC$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> access$getC$p
    java.util.Collection access$computeFunctions(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$computeFunctions
    java.util.Collection access$computeProperties(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$computeProperties
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor access$createTypeAlias(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope,kotlin.reflect.jvm.internal.impl.name.Name) -> access$createTypeAlias
    java.util.Map access$getFunctionProtosBytes$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> access$getFunctionProtosBytes$p
    java.util.Map access$getPropertyProtosBytes$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> access$getPropertyProtosBytes$p
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$classNames$2 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$classNames$2:
    kotlin.jvm.functions.Function0 $classNames -> $classNames
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.jvm.functions.Function0) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$computeDescriptors$$inlined$let$lambda$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$computeDescriptors$$inlined$let$lambda$1:
    java.io.ByteArrayInputStream $inputStream -> $inputStream
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.protobuf.Parser $parser$inlined -> $parser$inlined
    void <init>(java.io.ByteArrayInputStream,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope,kotlin.reflect.jvm.internal.impl.protobuf.Parser) -> <init>
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite invoke() -> invoke
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$computeDescriptors$$inlined$let$lambda$3 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$computeDescriptors$$inlined$let$lambda$3:
    java.io.ByteArrayInputStream $inputStream -> $inputStream
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.protobuf.Parser $parser$inlined -> $parser$inlined
    void <init>(java.io.ByteArrayInputStream,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope,kotlin.reflect.jvm.internal.impl.protobuf.Parser) -> <init>
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite invoke() -> invoke
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$functionNamesLazy$2 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$functionNamesLazy$2:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$functions$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$functions$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$properties$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$properties$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$typeAliasByName$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$typeAliasByName$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor invoke(kotlin.reflect.jvm.internal.impl.name.Name) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$variableNamesLazy$2 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope$variableNamesLazy$2:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.Set invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPackageMemberScope -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPackageMemberScope:
    kotlin.reflect.jvm.internal.impl.name.FqName packageFqName -> packageFqName
    kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor packageDescriptor -> packageDescriptor
    java.util.List getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    boolean hasClass(kotlin.reflect.jvm.internal.impl.name.Name) -> hasClass
    kotlin.reflect.jvm.internal.impl.name.ClassId createClassId(kotlin.reflect.jvm.internal.impl.name.Name) -> createClassId
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    void recordLookup(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> recordLookup
    java.util.Set getNonDeclaredFunctionNames() -> getNonDeclaredFunctionNames
    java.util.Set getNonDeclaredVariableNames() -> getNonDeclaredVariableNames
    void addEnumEntryDescriptors(java.util.Collection,kotlin.jvm.functions.Function1) -> addEnumEntryDescriptors
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Package,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.BinaryVersion,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationComponents,kotlin.jvm.functions.Function0) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPropertyDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedPropertyDescriptor:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode coroutinesExperimentalCompatibilityMode -> coroutinesExperimentalCompatibilityMode
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property proto -> proto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable versionRequirementTable -> versionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    void initialize(kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyGetterDescriptorImpl,kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FieldDescriptor,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    boolean isExternal() -> isExternal
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource() -> getContainerSource
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,boolean,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean,boolean,boolean,boolean,boolean,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Property,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource) -> <init>
    java.util.List getVersionRequirements() -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedSimpleFunctionDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedSimpleFunctionDescriptor:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode coroutinesExperimentalCompatibilityMode -> coroutinesExperimentalCompatibilityMode
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function proto -> proto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable versionRequirementTable -> versionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode getCoroutinesExperimentalCompatibilityMode() -> getCoroutinesExperimentalCompatibilityMode
    kotlin.reflect.jvm.internal.impl.descriptors.impl.SimpleFunctionDescriptorImpl initialize(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor,java.util.List,java.util.List,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,java.util.Map,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource() -> getContainerSource
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$Function,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.util.List getVersionRequirements() -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeAliasDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeAliasDescriptor:
    java.util.Collection constructors -> constructors
    kotlin.reflect.jvm.internal.impl.types.SimpleType underlyingType -> underlyingType
    kotlin.reflect.jvm.internal.impl.types.SimpleType expandedType -> expandedType
    java.util.List typeConstructorParameters -> typeConstructorParameters
    kotlin.reflect.jvm.internal.impl.types.SimpleType defaultTypeImpl -> defaultTypeImpl
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode coroutinesExperimentalCompatibilityMode -> coroutinesExperimentalCompatibilityMode
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias proto -> proto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver nameResolver -> nameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable typeTable -> typeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable versionRequirementTable -> versionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource containerSource -> containerSource
    kotlin.reflect.jvm.internal.impl.types.SimpleType getUnderlyingType() -> getUnderlyingType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getExpandedType() -> getExpandedType
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode getCoroutinesExperimentalCompatibilityMode() -> getCoroutinesExperimentalCompatibilityMode
    void initialize(java.util.List,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedMemberDescriptor$CoroutinesCompatibilityMode) -> initialize
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor() -> getClassDescriptor
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType() -> getDefaultType
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.util.List getTypeConstructorTypeParameters() -> getTypeConstructorTypeParameters
    kotlin.reflect.jvm.internal.impl.storage.StorageManager getStorageManager() -> getStorageManager
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.protobuf.MessageLite getProto() -> getProto
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver getNameResolver() -> getNameResolver
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable getTypeTable() -> getTypeTable
    kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable getVersionRequirementTable() -> getVersionRequirementTable
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource getContainerSource() -> getContainerSource
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeAlias,kotlin.reflect.jvm.internal.impl.metadata.deserialization.NameResolver,kotlin.reflect.jvm.internal.impl.metadata.deserialization.TypeTable,kotlin.reflect.jvm.internal.impl.metadata.deserialization.VersionRequirementTable,kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedContainerSource) -> <init>
    java.util.List getVersionRequirements() -> getVersionRequirements
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedAnnotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext c -> c
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter proto -> proto
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedAnnotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.util.List resolveUpperBounds() -> resolveUpperBounds
    java.lang.Void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter getProto() -> getProto
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext,kotlin.reflect.jvm.internal.impl.metadata.ProtoBuf$TypeParameter,int) -> <init>
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.DeserializationContext access$getC$p(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor) -> access$getC$p
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor$annotations$1 -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor$annotations$1:
    kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedTypeParameterDescriptor) -> <init>
kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.NonEmptyDeserializedAnnotations -> kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.NonEmptyDeserializedAnnotations:
    boolean isEmpty() -> isEmpty
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function0) -> <init>
kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues -> kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues:
    java.lang.Object computeIfAbsent(java.lang.Object,kotlin.jvm.functions.Function0) -> computeIfAbsent
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager:
    java.lang.String PACKAGE_NAME -> PACKAGE_NAME
    kotlin.reflect.jvm.internal.impl.storage.StorageManager NO_LOCKS -> NO_LOCKS
    java.util.concurrent.locks.Lock lock -> lock
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy exceptionHandlingStrategy -> exceptionHandlingStrategy
    java.lang.String debugText -> debugText
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy,java.util.concurrent.locks.Lock) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull createMemoizedFunction(kotlin.jvm.functions.Function1) -> createMemoizedFunction
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull createMemoizedFunction(kotlin.jvm.functions.Function1,java.util.concurrent.ConcurrentMap) -> createMemoizedFunction
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable createMemoizedFunctionWithNullableValues(kotlin.jvm.functions.Function1) -> createMemoizedFunctionWithNullableValues
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable createMemoizedFunctionWithNullableValues(kotlin.jvm.functions.Function1,java.util.concurrent.ConcurrentMap) -> createMemoizedFunctionWithNullableValues
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createLazyValue(kotlin.jvm.functions.Function0) -> createLazyValue
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createRecursionTolerantLazyValue(kotlin.jvm.functions.Function0,java.lang.Object) -> createRecursionTolerantLazyValue
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createLazyValueWithPostCompute(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> createLazyValueWithPostCompute
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue createNullableLazyValue(kotlin.jvm.functions.Function0) -> createNullableLazyValue
    java.lang.Object compute(kotlin.jvm.functions.Function0) -> compute
    java.util.concurrent.ConcurrentMap createConcurrentHashMap() -> createConcurrentHashMap
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult recursionDetectedDefault() -> recursionDetectedDefault
    java.lang.Throwable sanitizeStackTrace(java.lang.Throwable) -> sanitizeStackTrace
    kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues createCacheWithNotNullValues() -> createCacheWithNotNullValues
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy,java.util.concurrent.locks.Lock,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1) -> <init>
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy access$100(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager) -> access$100
    java.lang.Throwable access$200(java.lang.Throwable) -> access$200
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1 -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1:
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy,java.util.concurrent.locks.Lock) -> <init>
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult recursionDetectedDefault() -> recursionDetectedDefault
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$2 -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$2:
    java.lang.Object val$onRecursiveCall -> val$onRecursiveCall
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.jvm.functions.Function0,java.lang.Object) -> <init>
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult recursionDetected(boolean) -> recursionDetected
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$3 -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$3:
    kotlin.jvm.functions.Function1 val$onRecursiveCall -> val$onRecursiveCall
    kotlin.jvm.functions.Function1 val$postCompute -> val$postCompute
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> <init>
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult recursionDetected(boolean) -> recursionDetected
    void postCompute(java.lang.Object) -> postCompute
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap) -> <init>
    java.lang.Object computeIfAbsent(java.lang.Object,kotlin.jvm.functions.Function0) -> computeIfAbsent
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1) -> <init>
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction:
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap) -> <init>
    java.lang.Object computeIfAbsent(java.lang.Object,kotlin.jvm.functions.Function0) -> computeIfAbsent
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap,kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction$1 -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction$1:
    void <init>() -> <init>
    java.lang.Object invoke(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy:
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy THROW -> THROW
    java.lang.RuntimeException handleException(java.lang.Throwable) -> handleException
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy$1 -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy$1:
    void <init>() -> <init>
    java.lang.RuntimeException handleException(java.lang.Throwable) -> handleException
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation:
    java.lang.Object key -> key
    kotlin.jvm.functions.Function0 computation -> computation
    void <init>(java.lang.Object,kotlin.jvm.functions.Function0) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    kotlin.jvm.functions.Function0 access$400(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation) -> access$400
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue:
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager storageManager -> storageManager
    kotlin.jvm.functions.Function0 computable -> computable
    java.lang.Object value -> value
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.jvm.functions.Function0) -> <init>
    boolean isComputed() -> isComputed
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult recursionDetected(boolean) -> recursionDetected
    void postCompute(java.lang.Object) -> postCompute
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,kotlin.jvm.functions.Function0) -> <init>
    java.lang.Object invoke() -> invoke
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunction -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunction:
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager storageManager -> storageManager
    java.util.concurrent.ConcurrentMap cache -> cache
    kotlin.jvm.functions.Function1 compute -> compute
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap,kotlin.jvm.functions.Function1) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.AssertionError recursionDetected(java.lang.Object) -> recursionDetected
    java.lang.AssertionError raceCondition(java.lang.Object,java.lang.Object) -> raceCondition
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager getStorageManager() -> getStorageManager
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager,java.util.concurrent.ConcurrentMap,kotlin.jvm.functions.Function1) -> <init>
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue:
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue NOT_COMPUTED -> NOT_COMPUTED
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue COMPUTING -> COMPUTING
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue RECURSION_WAS_DETECTED -> RECURSION_WAS_DETECTED
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue[] values() -> values
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$NotValue valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult -> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult:
    java.lang.Object value -> value
    boolean fallThrough -> fallThrough
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult value(java.lang.Object) -> value
    kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult fallThrough() -> fallThrough
    void <init>(java.lang.Object,boolean) -> <init>
    java.lang.Object getValue() -> getValue
    boolean isFallThrough() -> isFallThrough
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull -> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull:
kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable -> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable:
kotlin.reflect.jvm.internal.impl.storage.NoLock -> kotlin.reflect.jvm.internal.impl.storage.NoLock:
    java.util.concurrent.locks.Lock INSTANCE -> INSTANCE
    void <init>() -> <init>
    void lock() -> lock
    void unlock() -> unlock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    java.util.concurrent.locks.Condition newCondition() -> newCondition
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue -> kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue:
    boolean isComputed() -> isComputed
kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue -> kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue:
kotlin.reflect.jvm.internal.impl.storage.StorageKt -> kotlin.reflect.jvm.internal.impl.storage.StorageKt:
    java.lang.Object getValue(kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue,java.lang.Object,kotlin.reflect.KProperty) -> getValue
    java.lang.Object getValue(kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue,java.lang.Object,kotlin.reflect.KProperty) -> getValue
kotlin.reflect.jvm.internal.impl.storage.StorageManager -> kotlin.reflect.jvm.internal.impl.storage.StorageManager:
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull createMemoizedFunction(kotlin.jvm.functions.Function1) -> createMemoizedFunction
    kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable createMemoizedFunctionWithNullableValues(kotlin.jvm.functions.Function1) -> createMemoizedFunctionWithNullableValues
    kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues createCacheWithNotNullValues() -> createCacheWithNotNullValues
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createLazyValue(kotlin.jvm.functions.Function0) -> createLazyValue
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createRecursionTolerantLazyValue(kotlin.jvm.functions.Function0,java.lang.Object) -> createRecursionTolerantLazyValue
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue createLazyValueWithPostCompute(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> createLazyValueWithPostCompute
    kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue createNullableLazyValue(kotlin.jvm.functions.Function0) -> createNullableLazyValue
    java.lang.Object compute(kotlin.jvm.functions.Function0) -> compute
kotlin.reflect.jvm.internal.impl.types.AbbreviatedType -> kotlin.reflect.jvm.internal.impl.types.AbbreviatedType:
    kotlin.reflect.jvm.internal.impl.types.SimpleType delegate -> delegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType abbreviation -> abbreviation
    kotlin.reflect.jvm.internal.impl.types.SimpleType getExpandedType() -> getExpandedType
    kotlin.reflect.jvm.internal.impl.types.AbbreviatedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.AbbreviatedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.AbbreviatedType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.AbbreviatedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.SimpleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType getAbbreviation() -> getAbbreviation
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractClassTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.AbstractClassTypeConstructor:
    int hashCode -> hashCode
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    int hashCode() -> hashCode
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    boolean equals(java.lang.Object) -> equals
    boolean areFqNamesEqual(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> areFqNamesEqual
    boolean hasMeaningfulFqName(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) -> hasMeaningfulFqName
    java.util.Collection getAdditionalNeighboursInSupertypeGraph(boolean) -> getAdditionalNeighboursInSupertypeGraph
    kotlin.reflect.jvm.internal.impl.types.KotlinType defaultSupertypeIfEmpty() -> defaultSupertypeIfEmpty
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.AbstractNullabilityChecker -> kotlin.reflect.jvm.internal.impl.types.AbstractNullabilityChecker:
    kotlin.reflect.jvm.internal.impl.types.AbstractNullabilityChecker INSTANCE -> INSTANCE
    boolean isPossibleSubtype(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isPossibleSubtype
    boolean runIsPossibleSubtype(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> runIsPossibleSubtype
    boolean hasNotNullSupertype(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy) -> hasNotNullSupertype
    boolean hasPathByNotMarkedNullableNodes(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> hasPathByNotMarkedNullableNodes
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractStrictEqualityTypeChecker -> kotlin.reflect.jvm.internal.impl.types.AbstractStrictEqualityTypeChecker:
    kotlin.reflect.jvm.internal.impl.types.AbstractStrictEqualityTypeChecker INSTANCE -> INSTANCE
    boolean strictEqualTypes(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> strictEqualTypes
    boolean strictEqualTypesInternal(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> strictEqualTypesInternal
    boolean strictEqualSimpleTypes(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> strictEqualSimpleTypes
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker:
    boolean RUN_SLOW_ASSERTIONS -> RUN_SLOW_ASSERTIONS
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker INSTANCE -> INSTANCE
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isSubtypeOf
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> equalTypes
    boolean completeIsSubTypeOf(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> completeIsSubTypeOf
    java.lang.Boolean checkSubtypeForIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> checkSubtypeForIntegerLiteralType
    boolean hasNothingSupertype(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> hasNothingSupertype
    boolean isSubtypeOfForSingleClassifierType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSubtypeOfForSingleClassifierType
    boolean isSubtypeForSameConstructor(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSubtypeForSameConstructor
    boolean isCommonDenotableType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isCommonDenotableType
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance effectiveVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeVariance,kotlin.reflect.jvm.internal.impl.types.model.TypeVariance) -> effectiveVariance
    java.lang.Boolean checkSubtypeForSpecialCases(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> checkSubtypeForSpecialCases
    java.util.List collectAllSupertypesWithGivenTypeConstructor(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> collectAllSupertypesWithGivenTypeConstructor
    java.util.List collectAndFilter(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> collectAndFilter
    java.util.List selectOnlyPureKotlinSupertypes(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,java.util.List) -> selectOnlyPureKotlinSupertypes
    java.util.List findCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> findCorrespondingSupertypes
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker$WhenMappings -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    int[] $EnumSwitchMapping$2 -> $EnumSwitchMapping$2
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker$checkSubtypeForIntegerLiteralType$1 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeChecker$checkSubtypeForIntegerLiteralType$1:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext $this_checkSubtypeForIntegerLiteralType -> $this_checkSubtypeForIntegerLiteralType
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext:
    int argumentsDepth -> argumentsDepth
    boolean supertypesLocked -> supertypesLocked
    java.util.ArrayDeque supertypesDeque -> supertypesDeque
    java.util.Set supertypesSet -> supertypesSet
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy substitutionSupertypePolicy(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> substitutionSupertypePolicy
    boolean areEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> areEqualTypeConstructors
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker prepareType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> prepareType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker refineType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> refineType
    boolean isErrorTypeEqualsToAnything() -> isErrorTypeEqualsToAnything
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy getLowerCapturedTypePolicy(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker) -> getLowerCapturedTypePolicy
    java.lang.Boolean addSubtypeConstraint(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> addSubtypeConstraint
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy getSameConstructorPolicy() -> getSameConstructorPolicy
    java.util.ArrayDeque getSupertypesDeque() -> getSupertypesDeque
    java.util.Set getSupertypesSet() -> getSupertypesSet
    void initialize() -> initialize
    void clear() -> clear
    boolean isAllowedTypeVariable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isAllowedTypeVariable
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgumentOrNull(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,int) -> getArgumentOrNull
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDynamic
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDefinitelyNotNullType
    boolean hasFlexibleNullability(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasFlexibleNullability
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNothing
    boolean isClassType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isClassType
    java.util.List fastCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> fastCorrespondingSupertypes
    boolean isIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isIntegerLiteralType
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
    int access$getArgumentsDepth$p(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext) -> access$getArgumentsDepth$p
    void access$setArgumentsDepth$p(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,int) -> access$setArgumentsDepth$p
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy CHECK_ONLY_LOWER -> CHECK_ONLY_LOWER
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy CHECK_SUBTYPE_AND_LOWER -> CHECK_SUBTYPE_AND_LOWER
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy SKIP_LOWER -> SKIP_LOWER
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$LowerCapturedTypePolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy TAKE_FIRST_FOR_SUBTYPING -> TAKE_FIRST_FOR_SUBTYPING
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy FORCE_NOT_SUBTYPE -> FORCE_NOT_SUBTYPE
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy CHECK_ANY_OF_THEM -> CHECK_ANY_OF_THEM
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy INTERSECT_ARGUMENTS_AND_CHECK_AGAIN -> INTERSECT_ARGUMENTS_AND_CHECK_AGAIN
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SeveralSupertypesWithSameConstructorPolicy valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy:
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$DoCustomTransform -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$DoCustomTransform:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$LowerIfFlexible -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$LowerIfFlexible:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$LowerIfFlexible INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$None -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$None:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$None INSTANCE -> INSTANCE
    java.lang.Void transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$UpperIfFlexible -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$UpperIfFlexible:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$UpperIfFlexible INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue supertypes -> supertypes
    java.util.List getSupertypes() -> getSupertypes
    java.util.Collection getSupertypes() -> getSupertypes
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    java.util.Collection computeNeighbours(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,boolean) -> computeNeighbours
    java.util.Collection computeSupertypes() -> computeSupertypes
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    void reportSupertypeLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportSupertypeLoopError
    void reportScopesLoopError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> reportScopesLoopError
    java.util.Collection getAdditionalNeighboursInSupertypeGraph(boolean) -> getAdditionalNeighboursInSupertypeGraph
    kotlin.reflect.jvm.internal.impl.types.KotlinType defaultSupertypeIfEmpty() -> defaultSupertypeIfEmpty
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    java.util.Collection access$computeNeighbours(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,boolean) -> access$computeNeighbours
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy refinedSupertypes$delegate -> refinedSupertypes$delegate
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefiner -> kotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor this$0 -> this$0
    void <clinit>() -> <clinit>
    java.util.List getRefinedSupertypes() -> getRefinedSupertypes
    java.util.List getParameters() -> getParameters
    java.util.List getSupertypes() -> getSupertypes
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner access$getKotlinTypeRefiner$p(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor) -> access$getKotlinTypeRefiner$p
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor$refinedSupertypes$2 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor$refinedSupertypes$2:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$ModuleViewTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$Supertypes -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$Supertypes:
    java.util.List supertypesWithoutCycles -> supertypesWithoutCycles
    java.util.Collection allSupertypes -> allSupertypes
    java.util.List getSupertypesWithoutCycles() -> getSupertypesWithoutCycles
    void setSupertypesWithoutCycles(java.util.List) -> setSupertypesWithoutCycles
    java.util.Collection getAllSupertypes() -> getAllSupertypes
    void <init>(java.util.Collection) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$1 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$1:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$Supertypes invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$2 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$2:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$Supertypes invoke(boolean) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$Supertypes) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$2 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$2:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$3 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$3:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$resultWithoutCycles$1 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$resultWithoutCycles$1:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.util.Collection invoke(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3) -> <init>
kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$resultWithoutCycles$2 -> kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3$resultWithoutCycles$2:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3 this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.AbstractTypeConstructor$supertypes$3) -> <init>
kotlin.reflect.jvm.internal.impl.types.AnnotatedSimpleType -> kotlin.reflect.jvm.internal.impl.types.AnnotatedSimpleType:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.types.AnnotatedSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
kotlin.reflect.jvm.internal.impl.types.ClassTypeConstructorImpl -> kotlin.reflect.jvm.internal.impl.types.ClassTypeConstructorImpl:
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor classDescriptor -> classDescriptor
    java.util.List parameters -> parameters
    java.util.Collection supertypes -> supertypes
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List,java.util.Collection,kotlin.reflect.jvm.internal.impl.storage.StorageManager) -> <init>
    java.util.List getParameters() -> getParameters
    java.lang.String toString() -> toString
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    java.util.Collection computeSupertypes() -> computeSupertypes
    kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker getSupertypeLoopChecker() -> getSupertypeLoopChecker
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.CustomTypeVariable -> kotlin.reflect.jvm.internal.impl.types.CustomTypeVariable:
    boolean isTypeVariable() -> isTypeVariable
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitutionResult(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> substitutionResult
kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType -> kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType:
    kotlin.reflect.jvm.internal.impl.types.SimpleType original -> original
    kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    boolean isMarkedNullable() -> isMarkedNullable
    boolean isTypeVariable() -> isTypeVariable
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitutionResult(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> substitutionResult
    kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType getOriginal() -> getOriginal
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType$Companion -> kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType$Companion:
    kotlin.reflect.jvm.internal.impl.types.DefinitelyNotNullType makeDefinitelyNotNull$descriptors(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> makeDefinitelyNotNull$descriptors
    boolean makesSenseToBeDefinitelyNotNull(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> makesSenseToBeDefinitelyNotNull
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.DelegatedTypeSubstitution -> kotlin.reflect.jvm.internal.impl.types.DelegatedTypeSubstitution:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution substitution -> substitution
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.KotlinType prepareTopLevelType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance) -> prepareTopLevelType
    boolean isEmpty() -> isEmpty
    boolean approximateCapturedTypes() -> approximateCapturedTypes
    boolean approximateContravariantCapturedTypes() -> approximateContravariantCapturedTypes
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations filterAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> filterAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> <init>
kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType -> kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType:
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleTypeImpl -> kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleTypeImpl:
    kotlin.reflect.jvm.internal.impl.types.SimpleType delegate -> delegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleTypeImpl replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.types.DescriptorSubstitutor -> kotlin.reflect.jvm.internal.impl.types.DescriptorSubstitutor:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor substituteTypeParameters(java.util.List,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.util.List) -> substituteTypeParameters
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor substituteTypeParameters(java.util.List,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,java.util.List,boolean[]) -> substituteTypeParameters
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.DisjointKeysUnionTypeSubstitution -> kotlin.reflect.jvm.internal.impl.types.DisjointKeysUnionTypeSubstitution:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution first -> first
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution second -> second
    kotlin.reflect.jvm.internal.impl.types.DisjointKeysUnionTypeSubstitution$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.KotlinType prepareTopLevelType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance) -> prepareTopLevelType
    boolean isEmpty() -> isEmpty
    boolean approximateCapturedTypes() -> approximateCapturedTypes
    boolean approximateContravariantCapturedTypes() -> approximateContravariantCapturedTypes
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations filterAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> filterAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution create(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> create
kotlin.reflect.jvm.internal.impl.types.DisjointKeysUnionTypeSubstitution$Companion -> kotlin.reflect.jvm.internal.impl.types.DisjointKeysUnionTypeSubstitution$Companion:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution create(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.DynamicType -> kotlin.reflect.jvm.internal.impl.types.DynamicType:
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.DynamicType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.DynamicType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    java.lang.String render(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> render
    kotlin.reflect.jvm.internal.impl.types.DynamicType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> <init>
kotlin.reflect.jvm.internal.impl.types.DynamicTypesKt -> kotlin.reflect.jvm.internal.impl.types.DynamicTypesKt:
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDynamic
kotlin.reflect.jvm.internal.impl.types.ErrorType -> kotlin.reflect.jvm.internal.impl.types.ErrorType:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor constructor -> constructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope memberScope -> memberScope
    java.util.List arguments -> arguments
    boolean isMarkedNullable -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.ErrorType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,java.util.List,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.types.ErrorUtils -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor ERROR_MODULE -> ERROR_MODULE
    kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor ERROR_CLASS -> ERROR_CLASS
    kotlin.reflect.jvm.internal.impl.types.SimpleType ERROR_TYPE_FOR_LOOP_IN_SUPERTYPES -> ERROR_TYPE_FOR_LOOP_IN_SUPERTYPES
    kotlin.reflect.jvm.internal.impl.types.KotlinType ERROR_PROPERTY_TYPE -> ERROR_PROPERTY_TYPE
    kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor ERROR_PROPERTY -> ERROR_PROPERTY
    java.util.Set ERROR_PROPERTY_GROUP -> ERROR_PROPERTY_GROUP
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor createErrorClass(java.lang.String) -> createErrorClass
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope createErrorScope(java.lang.String) -> createErrorScope
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope createErrorScope(java.lang.String,boolean) -> createErrorScope
    kotlin.reflect.jvm.internal.impl.descriptors.impl.PropertyDescriptorImpl createErrorProperty() -> createErrorProperty
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor createErrorFunction(kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope) -> createErrorFunction
    kotlin.reflect.jvm.internal.impl.types.SimpleType createErrorType(java.lang.String) -> createErrorType
    kotlin.reflect.jvm.internal.impl.types.SimpleType createErrorTypeWithCustomDebugName(java.lang.String) -> createErrorTypeWithCustomDebugName
    kotlin.reflect.jvm.internal.impl.types.SimpleType createErrorTypeWithCustomConstructor(java.lang.String,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> createErrorTypeWithCustomConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType createErrorTypeWithArguments(java.lang.String,java.util.List) -> createErrorTypeWithArguments
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor createErrorTypeConstructor(java.lang.String) -> createErrorTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor createErrorTypeConstructorWithCustomDebugName(java.lang.String) -> createErrorTypeConstructorWithCustomDebugName
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor createErrorTypeConstructorWithCustomDebugName(java.lang.String,kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor) -> createErrorTypeConstructorWithCustomDebugName
    boolean isError(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isError
    boolean isErrorClass(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isErrorClass
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getErrorModule() -> getErrorModule
    boolean isUninferredParameter(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isUninferredParameter
    java.util.Set access$000() -> access$000
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor access$100(kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope) -> access$100
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor access$200(java.lang.String,kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor) -> access$200
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$1 -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$1:
    void <init>() -> <init>
    java.lang.Object getCapability(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability) -> getCapability
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName,kotlin.jvm.functions.Function1) -> getSubPackagesOf
    kotlin.reflect.jvm.internal.impl.name.Name getName() -> getName
    kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.FqName) -> getPackage
    java.util.List getExpectedByModules() -> getExpectedByModules
    java.lang.Object accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor,java.lang.Object) -> accept
    boolean shouldSeeInternalsOf(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> shouldSeeInternalsOf
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal() -> getOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration() -> getContainingDeclaration
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$2 -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$2:
    kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor val$errorClass -> val$errorClass
    java.lang.String val$debugName -> val$debugName
    void <init>(kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor,java.lang.String) -> <init>
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorClassDescriptor:
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> getMemberScope
    kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> substitute
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope:
    java.lang.String debugMessage -> debugMessage
    void <init>(java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Set getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Set getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.lang.String toString() -> toString
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.types.ErrorUtils$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ThrowingScope -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ThrowingScope:
    java.lang.String debugMessage -> debugMessage
    void <init>(java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getContributedClassifier(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedClassifier
    java.util.Collection getContributedVariables(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedVariables
    java.util.Collection getContributedFunctions(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) -> getContributedFunctions
    java.util.Collection getContributedDescriptors(kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter,kotlin.jvm.functions.Function1) -> getContributedDescriptors
    java.util.Set getFunctionNames() -> getFunctionNames
    java.util.Set getVariableNames() -> getVariableNames
    java.lang.String toString() -> toString
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.types.ErrorUtils$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.ErrorUtils$UninferredParameterTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.ErrorUtils$UninferredParameterTypeConstructor:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor typeParameterDescriptor -> typeParameterDescriptor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor errorTypeConstructor -> errorTypeConstructor
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getTypeParameterDescriptor() -> getTypeParameterDescriptor
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.FlexibleType -> kotlin.reflect.jvm.internal.impl.types.FlexibleType:
    kotlin.reflect.jvm.internal.impl.types.SimpleType lowerBound -> lowerBound
    kotlin.reflect.jvm.internal.impl.types.SimpleType upperBound -> upperBound
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSubTypeRepresentative() -> getSubTypeRepresentative
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSuperTypeRepresentative() -> getSuperTypeRepresentative
    boolean sameTypeConstructor(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> sameTypeConstructor
    java.lang.String render(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> render
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.SimpleType getLowerBound() -> getLowerBound
    kotlin.reflect.jvm.internal.impl.types.SimpleType getUpperBound() -> getUpperBound
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.types.FlexibleTypeImpl -> kotlin.reflect.jvm.internal.impl.types.FlexibleTypeImpl:
    boolean assertionsDone -> assertionsDone
    boolean RUN_SLOW_ASSERTIONS -> RUN_SLOW_ASSERTIONS
    kotlin.reflect.jvm.internal.impl.types.FlexibleTypeImpl$Companion Companion -> Companion
    void runAssertions() -> runAssertions
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    boolean isTypeVariable() -> isTypeVariable
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitutionResult(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> substitutionResult
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    java.lang.String render(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> render
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.FlexibleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.FlexibleTypeImpl$Companion -> kotlin.reflect.jvm.internal.impl.types.FlexibleTypeImpl$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.FlexibleTypeWithEnhancement -> kotlin.reflect.jvm.internal.impl.types.FlexibleTypeWithEnhancement:
    kotlin.reflect.jvm.internal.impl.types.FlexibleType origin -> origin
    kotlin.reflect.jvm.internal.impl.types.KotlinType enhancement -> enhancement
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String render(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRenderer,kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> render
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.FlexibleTypeWithEnhancement refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.FlexibleType getOrigin() -> getOrigin
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType getOrigin() -> getOrigin
    kotlin.reflect.jvm.internal.impl.types.KotlinType getEnhancement() -> getEnhancement
    void <init>(kotlin.reflect.jvm.internal.impl.types.FlexibleType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
kotlin.reflect.jvm.internal.impl.types.FlexibleTypesKt -> kotlin.reflect.jvm.internal.impl.types.FlexibleTypesKt:
    boolean isFlexible(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isFlexible
    kotlin.reflect.jvm.internal.impl.types.FlexibleType asFlexibleType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> asFlexibleType
    kotlin.reflect.jvm.internal.impl.types.SimpleType lowerIfFlexible(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> lowerIfFlexible
    kotlin.reflect.jvm.internal.impl.types.SimpleType upperIfFlexible(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> upperIfFlexible
kotlin.reflect.jvm.internal.impl.types.IndexedParametersSubstitution -> kotlin.reflect.jvm.internal.impl.types.IndexedParametersSubstitution:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor[] parameters -> parameters
    kotlin.reflect.jvm.internal.impl.types.TypeProjection[] arguments -> arguments
    boolean approximateCapturedTypes -> approximateCapturedTypes
    boolean isEmpty() -> isEmpty
    boolean approximateContravariantCapturedTypes() -> approximateContravariantCapturedTypes
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor[] getParameters() -> getParameters
    kotlin.reflect.jvm.internal.impl.types.TypeProjection[] getArguments() -> getArguments
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor[],kotlin.reflect.jvm.internal.impl.types.TypeProjection[],boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor[],kotlin.reflect.jvm.internal.impl.types.TypeProjection[],boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(java.util.List,java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor:
    java.util.LinkedHashSet intersectedTypes -> intersectedTypes
    int hashCode -> hashCode
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope createScopeForKotlinType() -> createScopeForKotlinType
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    java.lang.String toString() -> toString
    java.lang.String makeDebugNameForIntersectionType(java.lang.Iterable) -> makeDebugNameForIntersectionType
    boolean equals(java.lang.Object) -> equals
    kotlin.reflect.jvm.internal.impl.types.SimpleType createType() -> createType
    int hashCode() -> hashCode
    kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(java.util.Collection) -> <init>
kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor$createType$1 -> kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor$createType$1:
    kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor this$0 -> this$0
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor$makeDebugNameForIntersectionType$$inlined$sortedBy$1 -> kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor$makeDebugNameForIntersectionType$$inlined$sortedBy$1:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
kotlin.reflect.jvm.internal.impl.types.KotlinType -> kotlin.reflect.jvm.internal.impl.types.KotlinType:
    int cachedHashCode -> cachedHashCode
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType unwrap() -> unwrap
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    int computeHashCode() -> computeHashCode
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory:
    kotlin.jvm.functions.Function1 EMPTY_REFINED_TYPE_FACTORY -> EMPTY_REFINED_TYPE_FACTORY
    kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope computeMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> computeMemberScope
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleType(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> simpleType
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleType$default(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,int,java.lang.Object) -> simpleType$default
    kotlin.reflect.jvm.internal.impl.types.SimpleType computeExpandedType(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.util.List) -> computeExpandedType
    kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$ExpandedTypeOrRefinedConstructor refineConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,java.util.List) -> refineConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleTypeWithNonTrivialMemberScope(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> simpleTypeWithNonTrivialMemberScope
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleTypeWithNonTrivialMemberScope(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.jvm.functions.Function1) -> simpleTypeWithNonTrivialMemberScope
    kotlin.reflect.jvm.internal.impl.types.SimpleType simpleNotNullType(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,java.util.List) -> simpleNotNullType
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType flexibleType(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> flexibleType
    kotlin.reflect.jvm.internal.impl.types.SimpleType integerLiteralType(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.resolve.constants.IntegerLiteralTypeConstructor,boolean) -> integerLiteralType
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$ExpandedTypeOrRefinedConstructor access$refineConstructor(kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,java.util.List) -> access$refineConstructor
kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$EMPTY_REFINED_TYPE_FACTORY$1 -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$EMPTY_REFINED_TYPE_FACTORY$1:
    kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$EMPTY_REFINED_TYPE_FACTORY$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Void invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$ExpandedTypeOrRefinedConstructor -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$ExpandedTypeOrRefinedConstructor:
    kotlin.reflect.jvm.internal.impl.types.SimpleType expandedType -> expandedType
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refinedConstructor -> refinedConstructor
    kotlin.reflect.jvm.internal.impl.types.SimpleType getExpandedType() -> getExpandedType
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getRefinedConstructor() -> getRefinedConstructor
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$simpleType$1 -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$simpleType$1:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor $constructor -> $constructor
    java.util.List $arguments -> $arguments
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations $annotations -> $annotations
    boolean $nullable -> $nullable
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$simpleTypeWithNonTrivialMemberScope$1 -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeFactory$simpleTypeWithNonTrivialMemberScope$1:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor $constructor -> $constructor
    java.util.List $arguments -> $arguments
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations $annotations -> $annotations
    boolean $nullable -> $nullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope $memberScope -> $memberScope
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.types.KotlinTypeKt -> kotlin.reflect.jvm.internal.impl.types.KotlinTypeKt:
    boolean isError(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isError
kotlin.reflect.jvm.internal.impl.types.LazyWrappedType -> kotlin.reflect.jvm.internal.impl.types.LazyWrappedType:
    kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue lazyValue -> lazyValue
    kotlin.reflect.jvm.internal.impl.storage.StorageManager storageManager -> storageManager
    kotlin.jvm.functions.Function0 computation -> computation
    kotlin.reflect.jvm.internal.impl.types.KotlinType getDelegate() -> getDelegate
    boolean isComputed() -> isComputed
    kotlin.reflect.jvm.internal.impl.types.LazyWrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.storage.StorageManager,kotlin.jvm.functions.Function0) -> <init>
    kotlin.jvm.functions.Function0 access$getComputation$p(kotlin.reflect.jvm.internal.impl.types.LazyWrappedType) -> access$getComputation$p
kotlin.reflect.jvm.internal.impl.types.LazyWrappedType$refine$1 -> kotlin.reflect.jvm.internal.impl.types.LazyWrappedType$refine$1:
    kotlin.reflect.jvm.internal.impl.types.LazyWrappedType this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner $kotlinTypeRefiner -> $kotlinTypeRefiner
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.LazyWrappedType,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
kotlin.reflect.jvm.internal.impl.types.NotNullSimpleType -> kotlin.reflect.jvm.internal.impl.types.NotNullSimpleType:
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.NotNullSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.types.NotNullTypeVariable -> kotlin.reflect.jvm.internal.impl.types.NotNullTypeVariable:
kotlin.reflect.jvm.internal.impl.types.NullableSimpleType -> kotlin.reflect.jvm.internal.impl.types.NullableSimpleType:
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.NullableSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> <init>
kotlin.reflect.jvm.internal.impl.types.RawType -> kotlin.reflect.jvm.internal.impl.types.RawType:
kotlin.reflect.jvm.internal.impl.types.SimpleType -> kotlin.reflect.jvm.internal.impl.types.SimpleType:
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String toString() -> toString
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.SimpleTypeImpl -> kotlin.reflect.jvm.internal.impl.types.SimpleTypeImpl:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor constructor -> constructor
    java.util.List arguments -> arguments
    boolean isMarkedNullable -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope memberScope -> memberScope
    kotlin.jvm.functions.Function1 refinedTypeFactory -> refinedTypeFactory
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List,boolean,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.jvm.functions.Function1) -> <init>
kotlin.reflect.jvm.internal.impl.types.SimpleTypeWithEnhancement -> kotlin.reflect.jvm.internal.impl.types.SimpleTypeWithEnhancement:
    kotlin.reflect.jvm.internal.impl.types.SimpleType delegate -> delegate
    kotlin.reflect.jvm.internal.impl.types.KotlinType enhancement -> enhancement
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType getOrigin() -> getOrigin
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleTypeWithEnhancement replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleTypeWithEnhancement refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.SimpleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.KotlinType getEnhancement() -> getEnhancement
    void <init>(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
kotlin.reflect.jvm.internal.impl.types.SpecialTypesKt -> kotlin.reflect.jvm.internal.impl.types.SpecialTypesKt:
    kotlin.reflect.jvm.internal.impl.types.AbbreviatedType getAbbreviatedType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getAbbreviatedType
    kotlin.reflect.jvm.internal.impl.types.SimpleType getAbbreviation(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getAbbreviation
    kotlin.reflect.jvm.internal.impl.types.SimpleType withAbbreviation(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.SimpleType) -> withAbbreviation
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDefinitelyNotNullType
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeSimpleTypeDefinitelyNotNullOrNotNull(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> makeSimpleTypeDefinitelyNotNullOrNotNull
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeDefinitelyNotNullOrNotNull(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> makeDefinitelyNotNullOrNotNull
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeIntersectionTypeDefinitelyNotNullOrNotNull(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> makeIntersectionTypeDefinitelyNotNullOrNotNull
    kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor makeDefinitelyNotNullOrNotNull(kotlin.reflect.jvm.internal.impl.types.IntersectionTypeConstructor) -> makeDefinitelyNotNullOrNotNull
kotlin.reflect.jvm.internal.impl.types.StarProjectionForAbsentTypeParameter -> kotlin.reflect.jvm.internal.impl.types.StarProjectionForAbsentTypeParameter:
    kotlin.reflect.jvm.internal.impl.types.KotlinType nullableAnyType -> nullableAnyType
    boolean isStarProjection() -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.Variance getProjectionKind() -> getProjectionKind
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.TypeProjection refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> <init>
kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl -> kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy _type$delegate -> _type$delegate
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor typeParameter -> typeParameter
    void <clinit>() -> <clinit>
    boolean isStarProjection() -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.Variance getProjectionKind() -> getProjectionKind
    kotlin.reflect.jvm.internal.impl.types.KotlinType get_type() -> get_type
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.TypeProjection refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor access$getTypeParameter$p(kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl) -> access$getTypeParameter$p
kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl$_type$2 -> kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl$_type$2:
    kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl this$0 -> this$0
    java.lang.Object invoke() -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.StarProjectionImpl) -> <init>
kotlin.reflect.jvm.internal.impl.types.StarProjectionImplKt -> kotlin.reflect.jvm.internal.impl.types.StarProjectionImplKt:
    kotlin.reflect.jvm.internal.impl.types.KotlinType starProjectionType(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> starProjectionType
kotlin.reflect.jvm.internal.impl.types.StarProjectionImplKt$starProjectionType$1 -> kotlin.reflect.jvm.internal.impl.types.StarProjectionImplKt$starProjectionType$1:
    java.util.List $typeParameters -> $typeParameters
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> get
    void <init>(java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.types.StubType -> kotlin.reflect.jvm.internal.impl.types.StubType:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor originalTypeVariable -> originalTypeVariable
    boolean isMarkedNullable -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor constructor -> constructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope memberScope -> memberScope
    java.util.List getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.StubType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,boolean,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope) -> <init>
kotlin.reflect.jvm.internal.impl.types.SubtypingRepresentatives -> kotlin.reflect.jvm.internal.impl.types.SubtypingRepresentatives:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSubTypeRepresentative() -> getSubTypeRepresentative
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSuperTypeRepresentative() -> getSuperTypeRepresentative
    boolean sameTypeConstructor(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> sameTypeConstructor
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander:
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy reportStrategy -> reportStrategy
    boolean shouldCheckBounds -> shouldCheckBounds
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander NON_REPORTING -> NON_REPORTING
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.SimpleType expand(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> expand
    kotlin.reflect.jvm.internal.impl.types.SimpleType expandRecursively(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,int,boolean) -> expandRecursively
    kotlin.reflect.jvm.internal.impl.types.SimpleType createAbbreviation(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean) -> createAbbreviation
    kotlin.reflect.jvm.internal.impl.types.TypeProjection expandTypeProjection(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,int) -> expandTypeProjection
    kotlin.reflect.jvm.internal.impl.types.DynamicType combineAnnotations(kotlin.reflect.jvm.internal.impl.types.DynamicType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> combineAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType combineAnnotations(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> combineAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations createCombinedAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> createCombinedAnnotations
    void checkRepeatedAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> checkRepeatedAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType combineNullability(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> combineNullability
    kotlin.reflect.jvm.internal.impl.types.SimpleType combineNullabilityAndAnnotations(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> combineNullabilityAndAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeProjection expandNonArgumentTypeProjection(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,int) -> expandNonArgumentTypeProjection
    kotlin.reflect.jvm.internal.impl.types.SimpleType substituteArguments(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,int) -> substituteArguments
    void checkTypeArgumentsSubstitution(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> checkTypeArgumentsSubstitution
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy,boolean) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander$Companion -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander$Companion:
    void checkBoundsInTypeAlias(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> checkBoundsInTypeAlias
    void assertRecursionDepth(int,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> assertRecursionDepth
    void <init>() -> <init>
    void access$assertRecursionDepth(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpander$Companion,int,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> access$assertRecursionDepth
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion:
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion parent -> parent
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor descriptor -> descriptor
    java.util.List arguments -> arguments
    java.util.Map mapping -> mapping
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.TypeProjection getReplacement(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> getReplacement
    boolean isRecursion(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> isRecursion
    kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getDescriptor() -> getDescriptor
    java.util.List getArguments() -> getArguments
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.util.List,java.util.Map) -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.util.List,java.util.Map,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion$Companion -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion$Companion:
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion create(kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansion,kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,java.util.List) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy:
    void conflictingProjection(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> conflictingProjection
    void recursiveTypeAlias(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> recursiveTypeAlias
    void boundsViolationInSubstitution(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> boundsViolationInSubstitution
    void repeatedAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> repeatedAnnotation
kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy$DO_NOTHING -> kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy$DO_NOTHING:
    kotlin.reflect.jvm.internal.impl.types.TypeAliasExpansionReportStrategy$DO_NOTHING INSTANCE -> INSTANCE
    void conflictingProjection(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> conflictingProjection
    void recursiveTypeAlias(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor) -> recursiveTypeAlias
    void boundsViolationInSubstitution(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> boundsViolationInSubstitution
    void repeatedAnnotation(kotlin.reflect.jvm.internal.impl.descriptors.annotations.AnnotationDescriptor) -> repeatedAnnotation
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.TypeCapabilitiesKt -> kotlin.reflect.jvm.internal.impl.types.TypeCapabilitiesKt:
    boolean isCustomTypeVariable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isCustomTypeVariable
    kotlin.reflect.jvm.internal.impl.types.CustomTypeVariable getCustomTypeVariable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getCustomTypeVariable
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSubtypeRepresentative(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getSubtypeRepresentative
    kotlin.reflect.jvm.internal.impl.types.KotlinType getSupertypeRepresentative(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getSupertypeRepresentative
    boolean sameTypeConstructors(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> sameTypeConstructors
kotlin.reflect.jvm.internal.impl.types.TypeConstructor -> kotlin.reflect.jvm.internal.impl.types.TypeConstructor:
    java.util.List getParameters() -> getParameters
    java.util.Collection getSupertypes() -> getSupertypes
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution -> kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> get
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution createByConstructorsMap(java.util.Map) -> createByConstructorsMap
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution create(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List) -> create
kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion -> kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion:
    kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution createByConstructorsMap(java.util.Map,boolean) -> createByConstructorsMap
    kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution createByConstructorsMap$default(kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion,java.util.Map,boolean,int,java.lang.Object) -> createByConstructorsMap$default
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution create(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> create
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution create(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,java.util.List) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion$createByConstructorsMap$1 -> kotlin.reflect.jvm.internal.impl.types.TypeConstructorSubstitution$Companion$createByConstructorsMap$1:
    java.util.Map $map -> $map
    boolean $approximateCapturedTypes -> $approximateCapturedTypes
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> get
    boolean isEmpty() -> isEmpty
    boolean approximateCapturedTypes() -> approximateCapturedTypes
    void <init>(java.util.Map,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeProjection -> kotlin.reflect.jvm.internal.impl.types.TypeProjection:
    kotlin.reflect.jvm.internal.impl.types.Variance getProjectionKind() -> getProjectionKind
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    boolean isStarProjection() -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.TypeProjection refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
kotlin.reflect.jvm.internal.impl.types.TypeProjectionBase -> kotlin.reflect.jvm.internal.impl.types.TypeProjectionBase:
    void <init>() -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl -> kotlin.reflect.jvm.internal.impl.types.TypeProjectionImpl:
    kotlin.reflect.jvm.internal.impl.types.Variance projection -> projection
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    void <init>(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
    kotlin.reflect.jvm.internal.impl.types.Variance getProjectionKind() -> getProjectionKind
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    boolean isStarProjection() -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.TypeProjection refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.TypeSubstitution -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitution:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.KotlinType prepareTopLevelType(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance) -> prepareTopLevelType
    boolean isEmpty() -> isEmpty
    boolean approximateCapturedTypes() -> approximateCapturedTypes
    boolean approximateContravariantCapturedTypes() -> approximateContravariantCapturedTypes
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations filterAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> filterAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor buildSubstitutor() -> buildSubstitutor
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.TypeSubstitution$Companion -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitution$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeSubstitution$Companion$EMPTY$1 -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitution$Companion$EMPTY$1:
    java.lang.Void get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> get
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutionKt -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutionKt:
    kotlin.reflect.jvm.internal.impl.types.KotlinType replace(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replace
    kotlin.reflect.jvm.internal.impl.types.KotlinType replace$default(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,int,java.lang.Object) -> replace$default
    kotlin.reflect.jvm.internal.impl.types.SimpleType replace(kotlin.reflect.jvm.internal.impl.types.SimpleType,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replace
    kotlin.reflect.jvm.internal.impl.types.SimpleType replace$default(kotlin.reflect.jvm.internal.impl.types.SimpleType,java.util.List,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,int,java.lang.Object) -> replace$default
    kotlin.reflect.jvm.internal.impl.types.SimpleType asSimpleType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> asSimpleType
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution substitution -> substitution
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor create(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> create
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor createChainedSubstitutor(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> createChainedSubstitutor
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor create(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> create
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> <init>
    boolean isEmpty() -> isEmpty
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitution getSubstitution() -> getSubstitution
    kotlin.reflect.jvm.internal.impl.types.KotlinType safeSubstitute(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance) -> safeSubstitute
    kotlin.reflect.jvm.internal.impl.types.KotlinType substitute(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance) -> substitute
    kotlin.reflect.jvm.internal.impl.types.TypeProjection substitute(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> substitute
    kotlin.reflect.jvm.internal.impl.types.TypeProjection substituteWithoutApproximation(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> substituteWithoutApproximation
    kotlin.reflect.jvm.internal.impl.types.TypeProjection unsafeSubstitute(kotlin.reflect.jvm.internal.impl.types.TypeProjection,int) -> unsafeSubstitute
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations filterOutUnsafeVariance(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> filterOutUnsafeVariance
    kotlin.reflect.jvm.internal.impl.types.TypeProjection substituteCompoundType(kotlin.reflect.jvm.internal.impl.types.TypeProjection,int) -> substituteCompoundType
    java.util.List substituteTypeArguments(java.util.List,java.util.List,int) -> substituteTypeArguments
    kotlin.reflect.jvm.internal.impl.types.Variance combine(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> combine
    kotlin.reflect.jvm.internal.impl.types.Variance combine(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.Variance) -> combine
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType conflictType(kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.types.Variance) -> conflictType
    void assertRecursionDepth(int,kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> assertRecursionDepth
    java.lang.String safeToString(java.lang.Object) -> safeToString
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$1 -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$1:
    void <init>() -> <init>
    java.lang.Boolean invoke(kotlin.reflect.jvm.internal.impl.name.FqName) -> invoke
    java.lang.Object invoke(java.lang.Object) -> invoke
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$2 -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$2:
    int[] $SwitchMap$org$jetbrains$kotlin$types$TypeSubstitutor$VarianceConflictType -> $SwitchMap$org$jetbrains$kotlin$types$TypeSubstitutor$VarianceConflictType
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$SubstitutionException -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$SubstitutionException:
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType -> kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType:
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType NO_CONFLICT -> NO_CONFLICT
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType IN_IN_OUT_POSITION -> IN_IN_OUT_POSITION
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType OUT_IN_IN_POSITION -> OUT_IN_IN_POSITION
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor$VarianceConflictType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext -> kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext:
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getTypeParameterClassifier(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getTypeParameterClassifier
    boolean isInlineClass(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isInlineClass
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getRepresentativeUpperBound(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getRepresentativeUpperBound
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getSubstitutedUnderlyingType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> getSubstitutedUnderlyingType
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker makeNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> makeNullable
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveArrayType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveArrayType
    boolean isUnderKotlinPackage(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isUnderKotlinPackage
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getClassFqNameUnsafe(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getClassFqNameUnsafe
kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext$DefaultImpls -> kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext$DefaultImpls:
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker makeNullable(kotlin.reflect.jvm.internal.impl.types.TypeSystemCommonBackendContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> makeNullable
kotlin.reflect.jvm.internal.impl.types.TypeUtils -> kotlin.reflect.jvm.internal.impl.types.TypeUtils:
    kotlin.reflect.jvm.internal.impl.types.SimpleType DONT_CARE -> DONT_CARE
    kotlin.reflect.jvm.internal.impl.types.SimpleType CANT_INFER_FUNCTION_PARAM_TYPE -> CANT_INFER_FUNCTION_PARAM_TYPE
    kotlin.reflect.jvm.internal.impl.types.SimpleType NO_EXPECTED_TYPE -> NO_EXPECTED_TYPE
    kotlin.reflect.jvm.internal.impl.types.SimpleType UNIT_EXPECTED_TYPE -> UNIT_EXPECTED_TYPE
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    boolean noExpectedType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> noExpectedType
    boolean isDontCarePlaceholder(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isDontCarePlaceholder
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> makeNullable
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNotNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> makeNotNullable
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullableAsSpecified(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableIfNeeded(kotlin.reflect.jvm.internal.impl.types.SimpleType,boolean) -> makeNullableIfNeeded
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullableIfNeeded(kotlin.reflect.jvm.internal.impl.types.KotlinType,boolean) -> makeNullableIfNeeded
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeUnsubstitutedType(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.jvm.functions.Function1) -> makeUnsubstitutedType
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeUnsubstitutedType(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,kotlin.jvm.functions.Function1) -> makeUnsubstitutedType
    java.util.List getDefaultTypeProjections(java.util.List) -> getDefaultTypeProjections
    java.util.List getImmediateSupertypes(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getImmediateSupertypes
    kotlin.reflect.jvm.internal.impl.types.KotlinType createSubstitutedSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> createSubstitutedSupertype
    boolean isNullableType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isNullableType
    boolean acceptsNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> acceptsNullable
    boolean hasNullableSuperType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> hasNullableSuperType
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getClassDescriptor
    boolean contains(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.jvm.functions.Function1) -> contains
    boolean contains(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.jvm.functions.Function1,java.util.HashSet) -> contains
    kotlin.reflect.jvm.internal.impl.types.TypeProjection makeStarProjection(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> makeStarProjection
    boolean isTypeParameter(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isTypeParameter
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getTypeParameterDescriptorOrNull(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getTypeParameterDescriptorOrNull
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.TypeUtils$SpecialType -> kotlin.reflect.jvm.internal.impl.types.TypeUtils$SpecialType:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.types.SimpleType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.DelegatingSimpleType replaceDelegate(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> replaceDelegate
    kotlin.reflect.jvm.internal.impl.types.TypeUtils$SpecialType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.SimpleType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.TypeWithEnhancement -> kotlin.reflect.jvm.internal.impl.types.TypeWithEnhancement:
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType getOrigin() -> getOrigin
    kotlin.reflect.jvm.internal.impl.types.KotlinType getEnhancement() -> getEnhancement
kotlin.reflect.jvm.internal.impl.types.TypeWithEnhancementKt -> kotlin.reflect.jvm.internal.impl.types.TypeWithEnhancementKt:
    kotlin.reflect.jvm.internal.impl.types.KotlinType getEnhancement(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getEnhancement
    kotlin.reflect.jvm.internal.impl.types.KotlinType unwrapEnhancement(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> unwrapEnhancement
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType inheritEnhancement(kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> inheritEnhancement
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType wrapEnhancement(kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> wrapEnhancement
kotlin.reflect.jvm.internal.impl.types.UnresolvedType -> kotlin.reflect.jvm.internal.impl.types.UnresolvedType:
    java.lang.String presentableName -> presentableName
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnresolvedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.ErrorType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    java.lang.String getPresentableName() -> getPresentableName
    void <init>(java.lang.String,kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope,java.util.List,boolean) -> <init>
kotlin.reflect.jvm.internal.impl.types.UnwrappedType -> kotlin.reflect.jvm.internal.impl.types.UnwrappedType:
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType unwrap() -> unwrap
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.Variance -> kotlin.reflect.jvm.internal.impl.types.Variance:
    kotlin.reflect.jvm.internal.impl.types.Variance INVARIANT -> INVARIANT
    kotlin.reflect.jvm.internal.impl.types.Variance IN_VARIANCE -> IN_VARIANCE
    kotlin.reflect.jvm.internal.impl.types.Variance OUT_VARIANCE -> OUT_VARIANCE
    kotlin.reflect.jvm.internal.impl.types.Variance[] $VALUES -> $VALUES
    java.lang.String label -> label
    boolean allowsInPosition -> allowsInPosition
    boolean allowsOutPosition -> allowsOutPosition
    int superpositionFactor -> superpositionFactor
    void <clinit>() -> <clinit>
    java.lang.String toString() -> toString
    java.lang.String getLabel() -> getLabel
    boolean getAllowsOutPosition() -> getAllowsOutPosition
    void <init>(java.lang.String,int,java.lang.String,boolean,boolean,int) -> <init>
    kotlin.reflect.jvm.internal.impl.types.Variance[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.Variance valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.WrappedType -> kotlin.reflect.jvm.internal.impl.types.WrappedType:
    boolean isComputed() -> isComputed
    kotlin.reflect.jvm.internal.impl.types.KotlinType getDelegate() -> getDelegate
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    java.util.List getArguments() -> getArguments
    boolean isMarkedNullable() -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType unwrap() -> unwrap
    java.lang.String toString() -> toString
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext:
    boolean errorTypeEqualsToAnything -> errorTypeEqualsToAnything
    boolean allowedTypeVariable -> allowedTypeVariable
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefiner -> kotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker prepareType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> prepareType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker refineType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> refineType
    boolean isErrorTypeEqualsToAnything() -> isErrorTypeEqualsToAnything
    boolean areEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> areEqualTypeConstructors
    boolean areEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> areEqualTypeConstructors
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$DoCustomTransform substitutionSupertypePolicy(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> substitutionSupertypePolicy
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy substitutionSupertypePolicy(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> substitutionSupertypePolicy
    boolean isAllowedTypeVariable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isAllowedTypeVariable
    void <init>(boolean,boolean,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    void <init>(boolean,boolean,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <clinit>() -> <clinit>
    boolean isDenotable(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isDenotable
    boolean isIntegerLiteralTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntegerLiteralTypeConstructor
    java.util.Collection possibleIntegerTypes(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> possibleIntegerTypes
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker withNullability(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,boolean) -> withNullability
    boolean isError(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isError
    boolean isStubType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isStubType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker lowerType(kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker) -> lowerType
    boolean isIntersection(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntersection
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker asSimpleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asSimpleType
    kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker asFlexibleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asFlexibleType
    kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker asDynamicType(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> asDynamicType
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> upperBound
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> lowerBound
    kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker asCapturedType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asCapturedType
    kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker asDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asDefinitelyNotNullType
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isMarkedNullable
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> typeConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    int argumentsCount(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> argumentsCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,int) -> getArgument
    boolean isStarProjection(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getType(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getType
    int parametersCount(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> parametersCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getParameter(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,int) -> getParameter
    java.util.Collection supertypes(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> supertypes
    boolean isEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isEqualTypeConstructors
    boolean isClassTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isClassTypeConstructor
    boolean isCommonFinalClassConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isCommonFinalClassConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker asArgumentList(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asArgumentList
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker captureFromArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus) -> captureFromArguments
    boolean isAnyConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isAnyConstructor
    boolean isNothingConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isNothingConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker asTypeArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asTypeArgument
    boolean isSingleClassifierType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSingleClassifierType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker intersectTypes(java.util.List) -> intersectTypes
    boolean isNullableType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNullableType
    boolean isPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isPrimitiveType
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getTypeParameterClassifier(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getTypeParameterClassifier
    boolean isInlineClass(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isInlineClass
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getRepresentativeUpperBound(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getRepresentativeUpperBound
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getSubstitutedUnderlyingType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> getSubstitutedUnderlyingType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveArrayType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveArrayType
    boolean isUnderKotlinPackage(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isUnderKotlinPackage
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getClassFqNameUnsafe(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getClassFqNameUnsafe
    java.util.List fastCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> fastCorrespondingSupertypes
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgumentOrNull(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,int) -> getArgumentOrNull
    boolean hasFlexibleNullability(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasFlexibleNullability
    boolean isClassType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isClassType
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDefinitelyNotNullType
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDynamic
    boolean isIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isIntegerLiteralType
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNothing
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker makeNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> makeNullable
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext$Companion -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext$Companion:
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext$SupertypesPolicy$DoCustomTransform classicSubstitutionSupertypePolicy(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> classicSubstitutionSupertypePolicy
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext$Companion$classicSubstitutionSupertypePolicy$2 -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext$Companion$classicSubstitutionSupertypePolicy$2:
    kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext $this_classicSubstitutionSupertypePolicy -> $this_classicSubstitutionSupertypePolicy
    kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor $substitutor -> $substitutor
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker transformType(kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> transformType
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContextKt -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContextKt:
    java.lang.String errorMessage(java.lang.Object) -> errorMessage
    java.lang.String access$errorMessage(java.lang.Object) -> access$errorMessage
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext:
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker asSimpleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asSimpleType
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> typeConstructor
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext$DefaultImpls -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext$DefaultImpls:
    boolean isDenotable(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isDenotable
    boolean isIntegerLiteralTypeConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntegerLiteralTypeConstructor
    java.util.Collection possibleIntegerTypes(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> possibleIntegerTypes
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker withNullability(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,boolean) -> withNullability
    boolean isError(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isError
    boolean isStubType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isStubType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker lowerType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker) -> lowerType
    boolean isIntersection(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntersection
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker asSimpleType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asSimpleType
    kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker asFlexibleType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asFlexibleType
    kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker asDynamicType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> asDynamicType
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBound(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> upperBound
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBound(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> lowerBound
    kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker asCapturedType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asCapturedType
    kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker asDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asDefinitelyNotNullType
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> typeConstructor
    int argumentsCount(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> argumentsCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgument(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,int) -> getArgument
    boolean isStarProjection(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getType
    int parametersCount(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> parametersCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getParameter(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,int) -> getParameter
    java.util.Collection supertypes(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> supertypes
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getVariance
    boolean isEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isEqualTypeConstructors
    boolean isClassTypeConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isClassTypeConstructor
    boolean isCommonFinalClassConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isCommonFinalClassConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker asArgumentList(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asArgumentList
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker captureFromArguments(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus) -> captureFromArguments
    boolean isAnyConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isAnyConstructor
    boolean isNothingConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isNothingConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker asTypeArgument(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asTypeArgument
    boolean isSingleClassifierType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSingleClassifierType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker intersectTypes(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,java.util.List) -> intersectTypes
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext newBaseTypeCheckerContext(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,boolean) -> newBaseTypeCheckerContext
    boolean isNullableType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNullableType
    boolean isPrimitiveType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isPrimitiveType
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getTypeParameterClassifier(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getTypeParameterClassifier
    boolean isInlineClass(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isInlineClass
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getRepresentativeUpperBound(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getRepresentativeUpperBound
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getSubstitutedUnderlyingType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> getSubstitutedUnderlyingType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveArrayType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveArrayType
    boolean isUnderKotlinPackage(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isUnderKotlinPackage
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getClassFqNameUnsafe(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getClassFqNameUnsafe
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    java.util.List fastCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> fastCorrespondingSupertypes
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgumentOrNull(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,int) -> getArgumentOrNull
    boolean hasFlexibleNullability(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasFlexibleNullability
    boolean isClassType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isClassType
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDefinitelyNotNullType
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDynamic
    boolean isIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isIntegerLiteralType
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNothing
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    int size(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker makeNullable(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> makeNullable
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContextKt -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContextKt:
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance convertVariance(kotlin.reflect.jvm.internal.impl.types.Variance) -> convertVariance
kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContextKt$WhenMappings -> kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeSystemContextKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.IntersectionTypeKt -> kotlin.reflect.jvm.internal.impl.types.checker.IntersectionTypeKt:
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType intersectTypes(java.util.List) -> intersectTypes
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker:
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker DEFAULT -> DEFAULT
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOf
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> equalTypes
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality:
    boolean equals(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> equals
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeCheckerImpl -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeCheckerImpl:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure procedure -> procedure
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker withAxioms(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality) -> withAxioms
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure) -> <init>
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOf
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> equalTypes
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeCheckerImpl$1 -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeCheckerImpl$1:
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality val$equalityAxioms -> val$equalityAxioms
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker$TypeConstructorEquality) -> <init>
    boolean assertEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> assertEqualTypeConstructors
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner:
    kotlin.reflect.jvm.internal.impl.types.KotlinType refineType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> refineType
    java.util.Collection refineSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> refineSupertypes
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor refineDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> refineDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassAcrossModuleDependencies(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassAcrossModuleDependencies
    boolean isRefinementNeededForModule(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> isRefinementNeededForModule
    boolean isRefinementNeededForTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> isRefinementNeededForTypeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getOrPutScopeForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.jvm.functions.Function0) -> getOrPutScopeForClass
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner$Default -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner$Default:
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner$Default INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.KotlinType refineType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> refineType
    java.util.Collection refineSupertypes(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) -> refineSupertypes
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor refineDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> refineDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor refineDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> refineDescriptor
    kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findClassAcrossModuleDependencies(kotlin.reflect.jvm.internal.impl.name.ClassId) -> findClassAcrossModuleDependencies
    boolean isRefinementNeededForModule(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) -> isRefinementNeededForModule
    boolean isRefinementNeededForTypeConstructor(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> isRefinementNeededForTypeConstructor
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getOrPutScopeForClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.jvm.functions.Function0) -> getOrPutScopeForClass
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefinerKt -> kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefinerKt:
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability REFINER_CAPABILITY -> REFINER_CAPABILITY
    java.util.List refineTypes(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner,java.lang.Iterable) -> refineTypes
    kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor$Capability getREFINER_CAPABILITY() -> getREFINER_CAPABILITY
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedType -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedType:
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus captureStatus -> captureStatus
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor constructor -> constructor
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType lowerType -> lowerType
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations annotations -> annotations
    boolean isMarkedNullable -> isMarkedNullable
    java.util.List getArguments() -> getArguments
    kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope() -> getMemberScope
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.SimpleType replaceAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.SimpleType makeNullableAsSpecified(boolean) -> makeNullableAsSpecified
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.KotlinType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor getConstructor() -> getConstructor
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor getConstructor() -> getConstructor
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType getLowerType() -> getLowerType
    kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations getAnnotations() -> getAnnotations
    boolean isMarkedNullable() -> isMarkedNullable
    void <init>(kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor,kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor,kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus,kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy _supertypes$delegate -> _supertypes$delegate
    kotlin.reflect.jvm.internal.impl.types.TypeProjection projection -> projection
    kotlin.jvm.functions.Function0 supertypesComputation -> supertypesComputation
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor original -> original
    void <clinit>() -> <clinit>
    java.util.List get_supertypes() -> get_supertypes
    void initializeSupertypes(java.util.List) -> initializeSupertypes
    java.util.List getSupertypes() -> getSupertypes
    java.util.Collection getSupertypes() -> getSupertypes
    java.util.List getParameters() -> getParameters
    boolean isDenotable() -> isDenotable
    kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDeclarationDescriptor() -> getDeclarationDescriptor
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns() -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    kotlin.reflect.jvm.internal.impl.types.TypeConstructor refine(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> refine
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    kotlin.reflect.jvm.internal.impl.types.TypeProjection getProjection() -> getProjection
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.jvm.functions.Function0,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.jvm.functions.Function0,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,java.util.List,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.types.TypeProjection,java.util.List,kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.jvm.functions.Function0 access$getSupertypesComputation$p(kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor) -> access$getSupertypesComputation$p
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$1 -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$1:
    java.util.List $supertypes -> $supertypes
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$_supertypes$2 -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$_supertypes$2:
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$initializeSupertypes$2 -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$initializeSupertypes$2:
    java.util.List $supertypes -> $supertypes
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
    void <init>(java.util.List) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$refine$$inlined$let$lambda$1 -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor$refine$$inlined$let$lambda$1:
    kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor this$0 -> this$0
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner $kotlinTypeRefiner$inlined -> $kotlinTypeRefiner$inlined
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeConstructor,kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
    java.lang.Object invoke() -> invoke
    java.util.List invoke() -> invoke
kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeKt -> kotlin.reflect.jvm.internal.impl.types.checker.NewCapturedTypeKt:
    kotlin.reflect.jvm.internal.impl.types.SimpleType captureFromArguments(kotlin.reflect.jvm.internal.impl.types.SimpleType,kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus) -> captureFromArguments
kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker -> kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker:
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker$Companion Companion -> Companion
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner getKotlinTypeRefiner() -> getKotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil getOverridingUtil() -> getOverridingUtil
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker$Companion -> kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker$Companion:
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeCheckerImpl Default -> Default
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeChecker$Companion $$INSTANCE -> $$INSTANCE
    kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeCheckerImpl getDefault() -> getDefault
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeCheckerImpl -> kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeCheckerImpl:
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil overridingUtil -> overridingUtil
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner kotlinTypeRefiner -> kotlinTypeRefiner
    kotlin.reflect.jvm.internal.impl.resolve.OverridingUtil getOverridingUtil() -> getOverridingUtil
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOf
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> equalTypes
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> equalTypes
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.checker.ClassicTypeCheckerContext,kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> isSubtypeOf
    kotlin.reflect.jvm.internal.impl.types.SimpleType transformToNewType(kotlin.reflect.jvm.internal.impl.types.SimpleType) -> transformToNewType
    kotlin.reflect.jvm.internal.impl.types.UnwrappedType transformToNewType(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> transformToNewType
    kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner getKotlinTypeRefiner() -> getKotlinTypeRefiner
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeRefiner) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.NewTypeVariableConstructor -> kotlin.reflect.jvm.internal.impl.types.checker.NewTypeVariableConstructor:
kotlin.reflect.jvm.internal.impl.types.checker.NullabilityChecker -> kotlin.reflect.jvm.internal.impl.types.checker.NullabilityChecker:
    kotlin.reflect.jvm.internal.impl.types.checker.NullabilityChecker INSTANCE -> INSTANCE
    boolean isSubtypeOfAny(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> isSubtypeOfAny
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.Ref -> kotlin.reflect.jvm.internal.impl.types.checker.Ref:
    java.lang.Object value -> value
    java.lang.Object getValue() -> getValue
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.SimpleClassicTypeSystemContext -> kotlin.reflect.jvm.internal.impl.types.checker.SimpleClassicTypeSystemContext:
    kotlin.reflect.jvm.internal.impl.types.checker.SimpleClassicTypeSystemContext INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean isDenotable(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isDenotable
    boolean isIntegerLiteralTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntegerLiteralTypeConstructor
    java.util.Collection possibleIntegerTypes(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> possibleIntegerTypes
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker withNullability(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,boolean) -> withNullability
    boolean isError(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isError
    boolean isStubType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isStubType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker lowerType(kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker) -> lowerType
    boolean isIntersection(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntersection
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker asSimpleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asSimpleType
    kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker asFlexibleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asFlexibleType
    kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker asDynamicType(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> asDynamicType
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> upperBound
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> lowerBound
    kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker asCapturedType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asCapturedType
    kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker asDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asDefinitelyNotNullType
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isMarkedNullable
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> typeConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    int argumentsCount(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> argumentsCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,int) -> getArgument
    boolean isStarProjection(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getType(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getType
    int parametersCount(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> parametersCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getParameter(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,int) -> getParameter
    java.util.Collection supertypes(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> supertypes
    boolean isEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isEqualTypeConstructors
    boolean isClassTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isClassTypeConstructor
    boolean isCommonFinalClassConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isCommonFinalClassConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker asArgumentList(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asArgumentList
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker captureFromArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus) -> captureFromArguments
    boolean isAnyConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isAnyConstructor
    boolean isNothingConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isNothingConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker asTypeArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asTypeArgument
    boolean isSingleClassifierType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSingleClassifierType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker intersectTypes(java.util.List) -> intersectTypes
    kotlin.reflect.jvm.internal.impl.types.AbstractTypeCheckerContext newBaseTypeCheckerContext(boolean) -> newBaseTypeCheckerContext
    boolean isNullableType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNullableType
    boolean isPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isPrimitiveType
    boolean hasAnnotation(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,kotlin.reflect.jvm.internal.impl.name.FqName) -> hasAnnotation
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getTypeParameterClassifier(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getTypeParameterClassifier
    boolean isInlineClass(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isInlineClass
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getRepresentativeUpperBound(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getRepresentativeUpperBound
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getSubstitutedUnderlyingType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> getSubstitutedUnderlyingType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveType
    kotlin.reflect.jvm.internal.impl.builtins.PrimitiveType getPrimitiveArrayType(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getPrimitiveArrayType
    boolean isUnderKotlinPackage(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isUnderKotlinPackage
    kotlin.reflect.jvm.internal.impl.name.FqNameUnsafe getClassFqNameUnsafe(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> getClassFqNameUnsafe
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker makeNullable(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> makeNullable
kotlin.reflect.jvm.internal.impl.types.checker.StrictEqualityTypeChecker -> kotlin.reflect.jvm.internal.impl.types.checker.StrictEqualityTypeChecker:
    kotlin.reflect.jvm.internal.impl.types.checker.StrictEqualityTypeChecker INSTANCE -> INSTANCE
    boolean strictEqualTypes(kotlin.reflect.jvm.internal.impl.types.UnwrappedType,kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> strictEqualTypes
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.SubtypePathNode -> kotlin.reflect.jvm.internal.impl.types.checker.SubtypePathNode:
    kotlin.reflect.jvm.internal.impl.types.KotlinType type -> type
    kotlin.reflect.jvm.internal.impl.types.checker.SubtypePathNode previous -> previous
    kotlin.reflect.jvm.internal.impl.types.KotlinType getType() -> getType
    kotlin.reflect.jvm.internal.impl.types.checker.SubtypePathNode getPrevious() -> getPrevious
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.SubtypePathNode) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckerProcedureCallbacksImpl -> kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckerProcedureCallbacksImpl:
    void <init>() -> <init>
    boolean assertEqualTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure) -> assertEqualTypes
    boolean assertEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> assertEqualTypeConstructors
    boolean assertSubtype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure) -> assertSubtype
    boolean capture(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> capture
    boolean noCorrespondingSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> noCorrespondingSupertype
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure -> kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks constraints -> constraints
    boolean $assertionsDisabled -> $assertionsDisabled
    kotlin.reflect.jvm.internal.impl.types.KotlinType findCorrespondingSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> findCorrespondingSupertype
    kotlin.reflect.jvm.internal.impl.types.KotlinType findCorrespondingSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks) -> findCorrespondingSupertype
    kotlin.reflect.jvm.internal.impl.types.KotlinType getOutType(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> getOutType
    kotlin.reflect.jvm.internal.impl.types.KotlinType getInType(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> getInType
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks) -> <init>
    boolean equalTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> equalTypes
    boolean heterogeneousEquivalence(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> heterogeneousEquivalence
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind getEffectiveProjectionKind(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> getEffectiveProjectionKind
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOf
    boolean isSubtypeOfForRepresentatives(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOfForRepresentatives
    boolean checkSubtypeForTheSameConstructor(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> checkSubtypeForTheSameConstructor
    boolean capture(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> capture
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$1 -> kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$1:
    int[] $SwitchMap$org$jetbrains$kotlin$types$Variance -> $SwitchMap$org$jetbrains$kotlin$types$Variance
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind -> kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind IN -> IN
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind OUT -> OUT
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind INV -> INV
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind STAR -> STAR
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind[] $VALUES -> $VALUES
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure$EnrichedProjectionKind fromVariance(kotlin.reflect.jvm.internal.impl.types.Variance) -> fromVariance
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks -> kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks:
    boolean assertEqualTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure) -> assertEqualTypes
    boolean assertEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.TypeConstructor,kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> assertEqualTypeConstructors
    boolean assertSubtype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedure) -> assertSubtype
    boolean capture(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> capture
    boolean noCorrespondingSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> noCorrespondingSupertype
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector INSTANCE -> INSTANCE
    kotlin.reflect.jvm.internal.impl.types.SimpleType intersectTypes$descriptors(java.util.List) -> intersectTypes$descriptors
    kotlin.reflect.jvm.internal.impl.types.SimpleType intersectTypesWithoutIntersectionType(java.util.Set) -> intersectTypesWithoutIntersectionType
    java.util.Collection filterTypes(java.util.Collection,kotlin.jvm.functions.Function2) -> filterTypes
    boolean isStrictSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isStrictSupertype
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    boolean access$isStrictSupertype(kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> access$isStrictSupertype
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability START -> START
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability ACCEPT_NULL -> ACCEPT_NULL
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability UNKNOWN -> UNKNOWN
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability NOT_NULL -> NOT_NULL
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability getResultNullability(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> getResultNullability
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$ACCEPT_NULL -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$ACCEPT_NULL:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$NOT_NULL -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$NOT_NULL:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$NOT_NULL combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$START -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$START:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$UNKNOWN -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability$UNKNOWN:
    kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$ResultNullability combine(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> combine
    void <init>(java.lang.String,int) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$errorMessage$1 -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$errorMessage$1:
    java.util.Set $inputTypes -> $inputTypes
    java.lang.Object invoke() -> invoke
    java.lang.String invoke() -> invoke
    void <init>(java.util.Set) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$filteredEqualTypes$1 -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$filteredEqualTypes$1:
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$filteredSuperAndEqualTypes$1 -> kotlin.reflect.jvm.internal.impl.types.checker.TypeIntersector$intersectTypesWithoutIntersectionType$filteredSuperAndEqualTypes$1:
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    kotlin.reflect.KDeclarationContainer getOwner() -> getOwner
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void <init>(kotlin.reflect.jvm.internal.impl.types.checker.NewKotlinTypeCheckerImpl) -> <init>
kotlin.reflect.jvm.internal.impl.types.checker.UtilsKt -> kotlin.reflect.jvm.internal.impl.types.checker.UtilsKt:
    kotlin.reflect.jvm.internal.impl.types.KotlinType findCorrespondingSupertype(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.checker.TypeCheckingProcedureCallbacks) -> findCorrespondingSupertype
    kotlin.reflect.jvm.internal.impl.types.KotlinType approximate(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> approximate
    java.lang.String debugInfo(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> debugInfo
kotlin.reflect.jvm.internal.impl.types.checker.UtilsKt$debugInfo$1$1 -> kotlin.reflect.jvm.internal.impl.types.checker.UtilsKt$debugInfo$1$1:
    java.lang.StringBuilder $this_buildString -> $this_buildString
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.StringBuilder invoke(java.lang.String) -> invoke
    void <init>(java.lang.StringBuilder) -> <init>
kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl -> kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl:
    kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope ownerScope -> ownerScope
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor,kotlin.reflect.jvm.internal.impl.types.ErrorUtils$ErrorScope) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.impl.FunctionDescriptorImpl createSubstitutedCopy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations,kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) -> createSubstitutedCopy
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder newCopyBuilder() -> newCopyBuilder
    boolean isSuspend() -> isSuspend
    java.lang.Object getUserData(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor$UserDataKey) -> getUserData
    void setOverriddenDescriptors(java.util.Collection) -> setOverriddenDescriptors
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.Modality,kotlin.reflect.jvm.internal.impl.descriptors.Visibility,kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind,boolean) -> copy
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl$1 -> kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl$1:
    kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.types.error.ErrorSimpleFunctionDescriptorImpl) -> <init>
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> setOwner
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) -> setModality
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) -> setVisibility
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor$Kind) -> setKind
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setCopyOverrides(boolean) -> setCopyOverrides
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setName(kotlin.reflect.jvm.internal.impl.name.Name) -> setName
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setValueParameters(java.util.List) -> setValueParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) -> setSubstitution
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setTypeParameters(java.util.List) -> setTypeParameters
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> setReturnType
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setExtensionReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setExtensionReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDispatchReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor) -> setDispatchReceiverParameter
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) -> setOriginal
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setSignatureChange() -> setSignatureChange
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setPreserveSourceElement() -> setPreserveSourceElement
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setDropOriginalInContainingParts() -> setDropOriginalInContainingParts
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenToOvercomeSignatureClash() -> setHiddenToOvercomeSignatureClash
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setHiddenForResolutionEverywhereBesideSupercalls() -> setHiddenForResolutionEverywhereBesideSupercalls
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor$CopyBuilder setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> setAdditionalAnnotations
    kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor build() -> build
    kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor build() -> build
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.types.model.ArgumentList -> kotlin.reflect.jvm.internal.impl.types.model.ArgumentList:
    void <init>(int) -> <init>
    boolean contains(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> contains
    boolean contains(java.lang.Object) -> contains
    int indexOf(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> indexOf
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> lastIndexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean remove(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> remove
    boolean remove(java.lang.Object) -> remove
    int getSize() -> getSize
    int size() -> size
kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus -> kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus:
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus FOR_SUBTYPING -> FOR_SUBTYPING
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus FOR_INCORPORATION -> FOR_INCORPORATION
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus FROM_EXPRESSION -> FROM_EXPRESSION
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.RawTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.RawTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.StubTypeMarker -> kotlin.reflect.jvm.internal.impl.types.model.StubTypeMarker:
kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker -> kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker:
kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker -> kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker:
kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker -> kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker:
kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker -> kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker:
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemCommonSuperTypesContext -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemCommonSuperTypesContext:
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext:
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker asSimpleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asSimpleType
    kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker asFlexibleType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asFlexibleType
    boolean isError(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isError
    kotlin.reflect.jvm.internal.impl.types.model.DynamicTypeMarker asDynamicType(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> asDynamicType
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> upperBound
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBound(kotlin.reflect.jvm.internal.impl.types.model.FlexibleTypeMarker) -> lowerBound
    kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker asCapturedType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asCapturedType
    kotlin.reflect.jvm.internal.impl.types.model.DefinitelyNotNullTypeMarker asDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asDefinitelyNotNullType
    boolean isMarkedNullable(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isMarkedNullable
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker withNullability(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,boolean) -> withNullability
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> typeConstructor
    int argumentsCount(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> argumentsCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker,int) -> getArgument
    boolean isStubType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isStubType
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker asTypeArgument(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> asTypeArgument
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker lowerType(kotlin.reflect.jvm.internal.impl.types.model.CapturedTypeMarker) -> lowerType
    boolean isStarProjection(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> isStarProjection
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getVariance
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker getType(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker) -> getType
    int parametersCount(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> parametersCount
    kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker getParameter(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,int) -> getParameter
    java.util.Collection supertypes(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> supertypes
    boolean isIntersection(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntersection
    boolean isClassTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isClassTypeConstructor
    boolean isIntegerLiteralTypeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isIntegerLiteralTypeConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance getVariance(kotlin.reflect.jvm.internal.impl.types.model.TypeParameterMarker) -> getVariance
    boolean isEqualTypeConstructors(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isEqualTypeConstructors
    boolean isDenotable(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isDenotable
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    boolean isNullableType(kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNullableType
    java.util.Collection possibleIntegerTypes(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> possibleIntegerTypes
    boolean isCommonFinalClassConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isCommonFinalClassConstructor
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker captureFromArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.CaptureStatus) -> captureFromArguments
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker asArgumentList(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> asArgumentList
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    boolean isAnyConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isAnyConstructor
    boolean isNothingConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> isNothingConstructor
    boolean isSingleClassifierType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isSingleClassifierType
    kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker intersectTypes(java.util.List) -> intersectTypes
    boolean isPrimitiveType(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isPrimitiveType
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext$DefaultImpls -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext$DefaultImpls:
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgumentOrNull(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,int) -> getArgumentOrNull
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDynamic
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDefinitelyNotNullType
    boolean hasFlexibleNullability(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasFlexibleNullability
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNothing
    boolean isClassType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isClassType
    java.util.List fastCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> fastCorrespondingSupertypes
    boolean isIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isIntegerLiteralType
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext:
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext$DefaultImpls -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext$DefaultImpls:
    kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker typeConstructor(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> typeConstructor
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker getArgumentOrNull(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,int) -> getArgumentOrNull
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker lowerBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> lowerBoundIfFlexible
    kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker upperBoundIfFlexible(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> upperBoundIfFlexible
    boolean isDynamic(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDynamic
    boolean isDefinitelyNotNullType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isDefinitelyNotNullType
    boolean hasFlexibleNullability(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> hasFlexibleNullability
    boolean isNothing(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.KotlinTypeMarker) -> isNothing
    boolean isClassType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isClassType
    java.util.List fastCorrespondingSupertypes(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.TypeConstructorMarker) -> fastCorrespondingSupertypes
    boolean isIntegerLiteralType(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> isIntegerLiteralType
    kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentMarker get(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker,int) -> get
    int size(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemInferenceExtensionContext,kotlin.reflect.jvm.internal.impl.types.model.TypeArgumentListMarker) -> size
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemOptimizationContext -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemOptimizationContext:
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
kotlin.reflect.jvm.internal.impl.types.model.TypeSystemOptimizationContext$DefaultImpls -> kotlin.reflect.jvm.internal.impl.types.model.TypeSystemOptimizationContext$DefaultImpls:
    boolean identicalArguments(kotlin.reflect.jvm.internal.impl.types.model.TypeSystemOptimizationContext,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker,kotlin.reflect.jvm.internal.impl.types.model.SimpleTypeMarker) -> identicalArguments
kotlin.reflect.jvm.internal.impl.types.model.TypeVariance -> kotlin.reflect.jvm.internal.impl.types.model.TypeVariance:
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance IN -> IN
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance OUT -> OUT
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance INV -> INV
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance[] $VALUES -> $VALUES
    java.lang.String presentation -> presentation
    void <clinit>() -> <clinit>
    java.lang.String toString() -> toString
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance[] values() -> values
    kotlin.reflect.jvm.internal.impl.types.model.TypeVariance valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt -> kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt:
    kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> getBuiltIns
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> makeNullable
    kotlin.reflect.jvm.internal.impl.types.KotlinType makeNotNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> makeNotNullable
    boolean isTypeParameter(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isTypeParameter
    boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> isSubtypeOf
    kotlin.reflect.jvm.internal.impl.types.KotlinType replaceAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) -> replaceAnnotations
    kotlin.reflect.jvm.internal.impl.types.TypeProjection createProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.Variance,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> createProjection
    kotlin.reflect.jvm.internal.impl.types.TypeProjection asTypeProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> asTypeProjection
    boolean contains(kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.jvm.functions.Function1) -> contains
    kotlin.reflect.jvm.internal.impl.types.KotlinType replaceArgumentsWithStarProjections(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> replaceArgumentsWithStarProjections
    boolean containsTypeAliasParameters(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> containsTypeAliasParameters
    boolean isTypeAliasParameter(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) -> isTypeAliasParameter
    boolean requiresTypeAliasExpansion(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> requiresTypeAliasExpansion
    boolean canHaveUndefinedNullability(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> canHaveUndefinedNullability
    kotlin.reflect.jvm.internal.impl.types.KotlinType getRepresentativeUpperBound(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> getRepresentativeUpperBound
kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$containsTypeAliasParameters$1 -> kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$containsTypeAliasParameters$1:
    kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$containsTypeAliasParameters$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$requiresTypeAliasExpansion$1 -> kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$requiresTypeAliasExpansion$1:
    kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt$requiresTypeAliasExpansion$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.ApproximationBounds -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.ApproximationBounds:
    java.lang.Object lower -> lower
    java.lang.Object upper -> upper
    java.lang.Object getLower() -> getLower
    java.lang.Object getUpper() -> getUpper
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object component1() -> component1
    java.lang.Object component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt:
    kotlin.reflect.jvm.internal.impl.types.TypeProjection toTypeProjection(kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument) -> toTypeProjection
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument toTypeArgument(kotlin.reflect.jvm.internal.impl.types.TypeProjection,kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) -> toTypeArgument
    kotlin.reflect.jvm.internal.impl.types.TypeProjection approximateCapturedTypesIfNecessary(kotlin.reflect.jvm.internal.impl.types.TypeProjection,boolean) -> approximateCapturedTypesIfNecessary
    kotlin.reflect.jvm.internal.impl.types.TypeProjection substituteCapturedTypesWithProjections(kotlin.reflect.jvm.internal.impl.types.TypeProjection) -> substituteCapturedTypesWithProjections
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.ApproximationBounds approximateCapturedTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> approximateCapturedTypes
    kotlin.reflect.jvm.internal.impl.types.KotlinType replaceTypeArguments(kotlin.reflect.jvm.internal.impl.types.KotlinType,java.util.List) -> replaceTypeArguments
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.ApproximationBounds approximateProjection(kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument) -> approximateProjection
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$WhenMappings -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    int[] $EnumSwitchMapping$1 -> $EnumSwitchMapping$1
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$approximateCapturedTypes$1 -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$approximateCapturedTypes$1:
    kotlin.reflect.jvm.internal.impl.types.KotlinType $type -> $type
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.KotlinType invoke(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$approximateCapturedTypesIfNecessary$1 -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$approximateCapturedTypesIfNecessary$1:
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$approximateCapturedTypesIfNecessary$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.types.UnwrappedType) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$substituteCapturedTypesWithProjections$typeSubstitutor$1 -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$substituteCapturedTypesWithProjections$typeSubstitutor$1:
    kotlin.reflect.jvm.internal.impl.types.TypeProjection get(kotlin.reflect.jvm.internal.impl.types.TypeConstructor) -> get
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$toTypeProjection$1$descriptorRenderer$1 -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$toTypeProjection$1$descriptorRenderer$1:
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$toTypeProjection$1$descriptorRenderer$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$toTypeProjection$2 -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.CapturedTypeApproximationKt$toTypeProjection$2:
    kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument $this_toTypeProjection -> $this_toTypeProjection
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.Variance invoke(kotlin.reflect.jvm.internal.impl.types.Variance) -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument) -> <init>
kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument -> kotlin.reflect.jvm.internal.impl.types.typesApproximation.TypeArgument:
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor typeParameter -> typeParameter
    kotlin.reflect.jvm.internal.impl.types.KotlinType inProjection -> inProjection
    kotlin.reflect.jvm.internal.impl.types.KotlinType outProjection -> outProjection
    boolean isConsistent() -> isConsistent
    kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getTypeParameter() -> getTypeParameter
    kotlin.reflect.jvm.internal.impl.types.KotlinType getInProjection() -> getInProjection
    kotlin.reflect.jvm.internal.impl.types.KotlinType getOutProjection() -> getOutProjection
    void <init>(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor,kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.reflect.jvm.internal.impl.types.KotlinType) -> <init>
kotlin.reflect.jvm.internal.impl.util.AbstractModifierChecks -> kotlin.reflect.jvm.internal.impl.util.AbstractModifierChecks:
    java.util.List getChecks$descriptors() -> getChecks$descriptors
    kotlin.reflect.jvm.internal.impl.util.CheckResult check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.util.Check -> kotlin.reflect.jvm.internal.impl.util.Check:
    java.lang.String getDescription() -> getDescription
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
kotlin.reflect.jvm.internal.impl.util.Check$DefaultImpls -> kotlin.reflect.jvm.internal.impl.util.Check$DefaultImpls:
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.util.Check,kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
kotlin.reflect.jvm.internal.impl.util.CheckResult -> kotlin.reflect.jvm.internal.impl.util.CheckResult:
    boolean isSuccess -> isSuccess
    boolean isSuccess() -> isSuccess
    void <init>(boolean) -> <init>
    void <init>(boolean,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.util.CheckResult$IllegalFunctionName -> kotlin.reflect.jvm.internal.impl.util.CheckResult$IllegalFunctionName:
    kotlin.reflect.jvm.internal.impl.util.CheckResult$IllegalFunctionName INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.CheckResult$IllegalSignature -> kotlin.reflect.jvm.internal.impl.util.CheckResult$IllegalSignature:
    java.lang.String error -> error
    void <init>(java.lang.String) -> <init>
kotlin.reflect.jvm.internal.impl.util.CheckResult$SuccessCheck -> kotlin.reflect.jvm.internal.impl.util.CheckResult$SuccessCheck:
    kotlin.reflect.jvm.internal.impl.util.CheckResult$SuccessCheck INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.Checks -> kotlin.reflect.jvm.internal.impl.util.Checks:
    kotlin.reflect.jvm.internal.impl.name.Name name -> name
    kotlin.text.Regex regex -> regex
    java.util.Collection nameList -> nameList
    kotlin.jvm.functions.Function1 additionalCheck -> additionalCheck
    kotlin.reflect.jvm.internal.impl.util.Check[] checks -> checks
    boolean isApplicable(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> isApplicable
    kotlin.reflect.jvm.internal.impl.util.CheckResult checkAll(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> checkAll
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.text.Regex,java.util.Collection,kotlin.jvm.functions.Function1,kotlin.reflect.jvm.internal.impl.util.Check[]) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.name.Name,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(kotlin.text.Regex,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1) -> <init>
    void <init>(kotlin.text.Regex,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>(java.util.Collection,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1) -> <init>
    void <init>(java.util.Collection,kotlin.reflect.jvm.internal.impl.util.Check[],kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.util.Checks$2 -> kotlin.reflect.jvm.internal.impl.util.Checks$2:
    kotlin.reflect.jvm.internal.impl.util.Checks$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Void invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.Checks$3 -> kotlin.reflect.jvm.internal.impl.util.Checks$3:
    kotlin.reflect.jvm.internal.impl.util.Checks$3 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Void invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.Checks$4 -> kotlin.reflect.jvm.internal.impl.util.Checks$4:
    kotlin.reflect.jvm.internal.impl.util.Checks$4 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Void invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.IsKPropertyCheck -> kotlin.reflect.jvm.internal.impl.util.IsKPropertyCheck:
    java.lang.String description -> description
    kotlin.reflect.jvm.internal.impl.util.IsKPropertyCheck INSTANCE -> INSTANCE
    java.lang.String getDescription() -> getDescription
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
kotlin.reflect.jvm.internal.impl.util.MemberKindCheck -> kotlin.reflect.jvm.internal.impl.util.MemberKindCheck:
    java.lang.String description -> description
    java.lang.String getDescription() -> getDescription
    void <init>(java.lang.String) -> <init>
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$Member -> kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$Member:
    kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$Member INSTANCE -> INSTANCE
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$MemberOrExtension -> kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$MemberOrExtension:
    kotlin.reflect.jvm.internal.impl.util.MemberKindCheck$MemberOrExtension INSTANCE -> INSTANCE
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper -> kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper:
    boolean isInFriendModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isInFriendModule
kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper$EMPTY -> kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper$EMPTY:
    kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper$EMPTY INSTANCE -> INSTANCE
    boolean isInFriendModule(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor,kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> isInFriendModule
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.NoDefaultAndVarargsCheck -> kotlin.reflect.jvm.internal.impl.util.NoDefaultAndVarargsCheck:
    java.lang.String description -> description
    kotlin.reflect.jvm.internal.impl.util.NoDefaultAndVarargsCheck INSTANCE -> INSTANCE
    java.lang.String getDescription() -> getDescription
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
kotlin.reflect.jvm.internal.impl.util.OperatorChecks -> kotlin.reflect.jvm.internal.impl.util.OperatorChecks:
    java.util.List checks -> checks
    kotlin.reflect.jvm.internal.impl.util.OperatorChecks INSTANCE -> INSTANCE
    java.util.List getChecks$descriptors() -> getChecks$descriptors
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$1 -> kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$1:
    kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2 -> kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2:
    kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2$1 -> kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2$1:
    kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$2$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$3 -> kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$3:
    kotlin.reflect.jvm.internal.impl.util.OperatorChecks$checks$3 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.OperatorNameConventions -> kotlin.reflect.jvm.internal.impl.util.OperatorNameConventions:
    kotlin.reflect.jvm.internal.impl.name.Name GET_VALUE -> GET_VALUE
    kotlin.reflect.jvm.internal.impl.name.Name SET_VALUE -> SET_VALUE
    kotlin.reflect.jvm.internal.impl.name.Name PROVIDE_DELEGATE -> PROVIDE_DELEGATE
    kotlin.reflect.jvm.internal.impl.name.Name EQUALS -> EQUALS
    kotlin.reflect.jvm.internal.impl.name.Name COMPARE_TO -> COMPARE_TO
    kotlin.reflect.jvm.internal.impl.name.Name CONTAINS -> CONTAINS
    kotlin.reflect.jvm.internal.impl.name.Name INVOKE -> INVOKE
    kotlin.reflect.jvm.internal.impl.name.Name ITERATOR -> ITERATOR
    kotlin.reflect.jvm.internal.impl.name.Name GET -> GET
    kotlin.reflect.jvm.internal.impl.name.Name SET -> SET
    kotlin.reflect.jvm.internal.impl.name.Name NEXT -> NEXT
    kotlin.reflect.jvm.internal.impl.name.Name HAS_NEXT -> HAS_NEXT
    kotlin.text.Regex COMPONENT_REGEX -> COMPONENT_REGEX
    kotlin.reflect.jvm.internal.impl.name.Name AND -> AND
    kotlin.reflect.jvm.internal.impl.name.Name OR -> OR
    kotlin.reflect.jvm.internal.impl.name.Name INC -> INC
    kotlin.reflect.jvm.internal.impl.name.Name DEC -> DEC
    kotlin.reflect.jvm.internal.impl.name.Name PLUS -> PLUS
    kotlin.reflect.jvm.internal.impl.name.Name MINUS -> MINUS
    kotlin.reflect.jvm.internal.impl.name.Name NOT -> NOT
    kotlin.reflect.jvm.internal.impl.name.Name UNARY_MINUS -> UNARY_MINUS
    kotlin.reflect.jvm.internal.impl.name.Name UNARY_PLUS -> UNARY_PLUS
    kotlin.reflect.jvm.internal.impl.name.Name TIMES -> TIMES
    kotlin.reflect.jvm.internal.impl.name.Name DIV -> DIV
    kotlin.reflect.jvm.internal.impl.name.Name MOD -> MOD
    kotlin.reflect.jvm.internal.impl.name.Name REM -> REM
    kotlin.reflect.jvm.internal.impl.name.Name RANGE_TO -> RANGE_TO
    kotlin.reflect.jvm.internal.impl.name.Name TIMES_ASSIGN -> TIMES_ASSIGN
    kotlin.reflect.jvm.internal.impl.name.Name DIV_ASSIGN -> DIV_ASSIGN
    kotlin.reflect.jvm.internal.impl.name.Name MOD_ASSIGN -> MOD_ASSIGN
    kotlin.reflect.jvm.internal.impl.name.Name REM_ASSIGN -> REM_ASSIGN
    kotlin.reflect.jvm.internal.impl.name.Name PLUS_ASSIGN -> PLUS_ASSIGN
    kotlin.reflect.jvm.internal.impl.name.Name MINUS_ASSIGN -> MINUS_ASSIGN
    java.util.Set UNARY_OPERATION_NAMES -> UNARY_OPERATION_NAMES
    java.util.Set SIMPLE_UNARY_OPERATION_NAMES -> SIMPLE_UNARY_OPERATION_NAMES
    java.util.Set BINARY_OPERATION_NAMES -> BINARY_OPERATION_NAMES
    java.util.Set ASSIGNMENT_OPERATIONS -> ASSIGNMENT_OPERATIONS
    kotlin.reflect.jvm.internal.impl.util.OperatorNameConventions INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck:
    java.lang.String description -> description
    java.lang.String name -> name
    kotlin.jvm.functions.Function1 type -> type
    java.lang.String getDescription() -> getDescription
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>(java.lang.String,kotlin.jvm.functions.Function1) -> <init>
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>(java.lang.String,kotlin.jvm.functions.Function1,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean$1 -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean$1:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsBoolean$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt$1 -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt$1:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsInt$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit$1 -> kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit$1:
    kotlin.reflect.jvm.internal.impl.util.ReturnsCheck$ReturnsUnit$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    kotlin.reflect.jvm.internal.impl.types.SimpleType invoke(kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck -> kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck:
    java.lang.String description -> description
    java.lang.String getDescription() -> getDescription
    void <init>(java.lang.String) -> <init>
    java.lang.String invoke(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> invoke
    void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$AtLeast -> kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$AtLeast:
    int n -> n
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>(int) -> <init>
kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$Equals -> kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$Equals:
    int n -> n
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>(int) -> <init>
kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$NoValueParameters -> kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$NoValueParameters:
    kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$NoValueParameters INSTANCE -> INSTANCE
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$SingleValueParameter -> kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$SingleValueParameter:
    kotlin.reflect.jvm.internal.impl.util.ValueParameterCountCheck$SingleValueParameter INSTANCE -> INSTANCE
    boolean check(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor) -> check
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.util.capitalizeDecapitalize.CapitalizeDecapitalizeKt -> kotlin.reflect.jvm.internal.impl.util.capitalizeDecapitalize.CapitalizeDecapitalizeKt:
    java.lang.String decapitalizeSmartForCompiler(java.lang.String,boolean) -> decapitalizeSmartForCompiler
    boolean isUpperCaseCharAt(java.lang.String,int,boolean) -> isUpperCaseCharAt
    java.lang.String toLowerCase(java.lang.String,boolean) -> toLowerCase
    java.lang.String capitalizeAsciiOnly(java.lang.String) -> capitalizeAsciiOnly
    java.lang.String decapitalizeAsciiOnly(java.lang.String) -> decapitalizeAsciiOnly
    java.lang.String toLowerCaseAsciiOnly(java.lang.String) -> toLowerCaseAsciiOnly
kotlin.reflect.jvm.internal.impl.util.collectionUtils.ScopeUtilsKt -> kotlin.reflect.jvm.internal.impl.util.collectionUtils.ScopeUtilsKt:
    java.util.Collection concat(java.util.Collection,java.util.Collection) -> concat
kotlin.reflect.jvm.internal.impl.utils.CollectionsKt -> kotlin.reflect.jvm.internal.impl.utils.CollectionsKt:
    java.util.Map mapToIndex(java.lang.Iterable) -> mapToIndex
    void addIfNotNull(java.util.Collection,java.lang.Object) -> addIfNotNull
    java.util.HashMap newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    java.util.HashSet newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    java.util.LinkedHashSet newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    int capacity(int) -> capacity
    java.util.List compact(java.util.ArrayList) -> compact
kotlin.reflect.jvm.internal.impl.utils.DFS -> kotlin.reflect.jvm.internal.impl.utils.DFS:
    java.lang.Object dfs(java.util.Collection,kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors,kotlin.reflect.jvm.internal.impl.utils.DFS$Visited,kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandler) -> dfs
    java.lang.Object dfs(java.util.Collection,kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors,kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandler) -> dfs
    java.lang.Boolean ifAny(java.util.Collection,kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors,kotlin.jvm.functions.Function1) -> ifAny
    void doDfs(java.lang.Object,kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors,kotlin.reflect.jvm.internal.impl.utils.DFS$Visited,kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandler) -> doDfs
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.DFS$1 -> kotlin.reflect.jvm.internal.impl.utils.DFS$1:
    kotlin.jvm.functions.Function1 val$predicate -> val$predicate
    boolean[] val$result -> val$result
    void <init>(kotlin.jvm.functions.Function1,boolean[]) -> <init>
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    java.lang.Boolean result() -> result
    java.lang.Object result() -> result
kotlin.reflect.jvm.internal.impl.utils.DFS$AbstractNodeHandler -> kotlin.reflect.jvm.internal.impl.utils.DFS$AbstractNodeHandler:
    void <init>() -> <init>
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    void afterChildren(java.lang.Object) -> afterChildren
kotlin.reflect.jvm.internal.impl.utils.DFS$CollectingNodeHandler -> kotlin.reflect.jvm.internal.impl.utils.DFS$CollectingNodeHandler:
    java.lang.Iterable result -> result
    void <init>(java.lang.Iterable) -> <init>
    java.lang.Iterable result() -> result
    java.lang.Object result() -> result
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors -> kotlin.reflect.jvm.internal.impl.utils.DFS$Neighbors:
    java.lang.Iterable getNeighbors(java.lang.Object) -> getNeighbors
kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandler -> kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandler:
    boolean beforeChildren(java.lang.Object) -> beforeChildren
    void afterChildren(java.lang.Object) -> afterChildren
    java.lang.Object result() -> result
kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandlerWithListResult -> kotlin.reflect.jvm.internal.impl.utils.DFS$NodeHandlerWithListResult:
    void <init>() -> <init>
kotlin.reflect.jvm.internal.impl.utils.DFS$Visited -> kotlin.reflect.jvm.internal.impl.utils.DFS$Visited:
    boolean checkAndMarkVisited(java.lang.Object) -> checkAndMarkVisited
kotlin.reflect.jvm.internal.impl.utils.DFS$VisitedWithSet -> kotlin.reflect.jvm.internal.impl.utils.DFS$VisitedWithSet:
    java.util.Set visited -> visited
    void <init>() -> <init>
    void <init>(java.util.Set) -> <init>
    boolean checkAndMarkVisited(java.lang.Object) -> checkAndMarkVisited
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.ExceptionUtilsKt -> kotlin.reflect.jvm.internal.impl.utils.ExceptionUtilsKt:
    java.lang.RuntimeException rethrow(java.lang.Throwable) -> rethrow
    boolean isProcessCanceledException(java.lang.Throwable) -> isProcessCanceledException
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt:
    kotlin.jvm.functions.Function1 IDENTITY -> IDENTITY
    kotlin.jvm.functions.Function1 ALWAYS_TRUE -> ALWAYS_TRUE
    kotlin.jvm.functions.Function1 ALWAYS_NULL -> ALWAYS_NULL
    kotlin.jvm.functions.Function1 DO_NOTHING -> DO_NOTHING
    kotlin.jvm.functions.Function2 DO_NOTHING_2 -> DO_NOTHING_2
    kotlin.jvm.functions.Function3 DO_NOTHING_3 -> DO_NOTHING_3
    kotlin.jvm.functions.Function1 alwaysTrue() -> alwaysTrue
    kotlin.jvm.functions.Function3 getDO_NOTHING_3() -> getDO_NOTHING_3
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_NULL$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_NULL$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_NULL$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    java.lang.Void invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_TRUE$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_TRUE$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$ALWAYS_TRUE$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    boolean invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_2$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_2$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_2$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_3$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_3$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$DO_NOTHING_3$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    void invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$IDENTITY$1 -> kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$IDENTITY$1:
    kotlin.reflect.jvm.internal.impl.utils.FunctionsKt$IDENTITY$1 INSTANCE -> INSTANCE
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.Jsr305State -> kotlin.reflect.jvm.internal.impl.utils.Jsr305State:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    kotlin.Lazy description$delegate -> description$delegate
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel global -> global
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel migration -> migration
    java.util.Map user -> user
    boolean enableCompatqualCheckerFrameworkAnnotations -> enableCompatqualCheckerFrameworkAnnotations
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State DEFAULT -> DEFAULT
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State DISABLED -> DISABLED
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State STRICT -> STRICT
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    boolean getDisabled() -> getDisabled
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel getGlobal() -> getGlobal
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel getMigration() -> getMigration
    java.util.Map getUser() -> getUser
    boolean getEnableCompatqualCheckerFrameworkAnnotations() -> getEnableCompatqualCheckerFrameworkAnnotations
    void <init>(kotlin.reflect.jvm.internal.impl.utils.ReportLevel,kotlin.reflect.jvm.internal.impl.utils.ReportLevel,java.util.Map,boolean) -> <init>
    void <init>(kotlin.reflect.jvm.internal.impl.utils.ReportLevel,kotlin.reflect.jvm.internal.impl.utils.ReportLevel,java.util.Map,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.utils.Jsr305State$Companion -> kotlin.reflect.jvm.internal.impl.utils.Jsr305State$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.utils.Jsr305State$description$2 -> kotlin.reflect.jvm.internal.impl.utils.Jsr305State$description$2:
    kotlin.reflect.jvm.internal.impl.utils.Jsr305State this$0 -> this$0
    java.lang.Object invoke() -> invoke
    java.lang.String[] invoke() -> invoke
    void <init>(kotlin.reflect.jvm.internal.impl.utils.Jsr305State) -> <init>
kotlin.reflect.jvm.internal.impl.utils.NumberWithRadix -> kotlin.reflect.jvm.internal.impl.utils.NumberWithRadix:
    java.lang.String number -> number
    int radix -> radix
    void <init>(java.lang.String,int) -> <init>
    java.lang.String component1() -> component1
    int component2() -> component2
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.reflect.jvm.internal.impl.utils.NumbersKt -> kotlin.reflect.jvm.internal.impl.utils.NumbersKt:
    kotlin.reflect.jvm.internal.impl.utils.NumberWithRadix extractRadix(java.lang.String) -> extractRadix
kotlin.reflect.jvm.internal.impl.utils.ReportLevel -> kotlin.reflect.jvm.internal.impl.utils.ReportLevel:
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel IGNORE -> IGNORE
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel WARN -> WARN
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel STRICT -> STRICT
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel[] $VALUES -> $VALUES
    java.lang.String description -> description
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    boolean isWarning() -> isWarning
    boolean isIgnore() -> isIgnore
    java.lang.String getDescription() -> getDescription
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel[] values() -> values
    kotlin.reflect.jvm.internal.impl.utils.ReportLevel valueOf(java.lang.String) -> valueOf
kotlin.reflect.jvm.internal.impl.utils.ReportLevel$Companion -> kotlin.reflect.jvm.internal.impl.utils.ReportLevel$Companion:
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.utils.SmartList -> kotlin.reflect.jvm.internal.impl.utils.SmartList:
    int mySize -> mySize
    java.lang.Object myElem -> myElem
    void <init>() -> <init>
    java.lang.Object get(int) -> get
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    int size() -> size
    void clear() -> clear
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int access$100(kotlin.reflect.jvm.internal.impl.utils.SmartList) -> access$100
    java.lang.Object access$200(kotlin.reflect.jvm.internal.impl.utils.SmartList) -> access$200
    int access$300(kotlin.reflect.jvm.internal.impl.utils.SmartList) -> access$300
    int access$400(kotlin.reflect.jvm.internal.impl.utils.SmartList) -> access$400
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.SmartList$1 -> kotlin.reflect.jvm.internal.impl.utils.SmartList$1:
kotlin.reflect.jvm.internal.impl.utils.SmartList$EmptyIterator -> kotlin.reflect.jvm.internal.impl.utils.SmartList$EmptyIterator:
    kotlin.reflect.jvm.internal.impl.utils.SmartList$EmptyIterator INSTANCE -> INSTANCE
    void <init>() -> <init>
    kotlin.reflect.jvm.internal.impl.utils.SmartList$EmptyIterator getInstance() -> getInstance
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.impl.utils.SmartList$SingletonIterator -> kotlin.reflect.jvm.internal.impl.utils.SmartList$SingletonIterator:
    int myInitialModCount -> myInitialModCount
    kotlin.reflect.jvm.internal.impl.utils.SmartList this$0 -> this$0
    void <init>(kotlin.reflect.jvm.internal.impl.utils.SmartList) -> <init>
    java.lang.Object getElement() -> getElement
    void checkCoModification() -> checkCoModification
    void remove() -> remove
kotlin.reflect.jvm.internal.impl.utils.SmartList$SingletonIteratorBase -> kotlin.reflect.jvm.internal.impl.utils.SmartList$SingletonIteratorBase:
    boolean myVisited -> myVisited
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void checkCoModification() -> checkCoModification
    java.lang.Object getElement() -> getElement
    void <init>(kotlin.reflect.jvm.internal.impl.utils.SmartList$1) -> <init>
kotlin.reflect.jvm.internal.impl.utils.SmartSet -> kotlin.reflect.jvm.internal.impl.utils.SmartSet:
    java.lang.Object data -> data
    int size -> size
    kotlin.reflect.jvm.internal.impl.utils.SmartSet$Companion Companion -> Companion
    int getSize() -> getSize
    int size() -> size
    void setSize(int) -> setSize
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    kotlin.reflect.jvm.internal.impl.utils.SmartSet create() -> create
kotlin.reflect.jvm.internal.impl.utils.SmartSet$ArrayIterator -> kotlin.reflect.jvm.internal.impl.utils.SmartSet$ArrayIterator:
    java.util.Iterator arrayIterator -> arrayIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.Void remove() -> remove
    void remove() -> remove
    void <init>(java.lang.Object[]) -> <init>
kotlin.reflect.jvm.internal.impl.utils.SmartSet$Companion -> kotlin.reflect.jvm.internal.impl.utils.SmartSet$Companion:
    kotlin.reflect.jvm.internal.impl.utils.SmartSet create() -> create
    kotlin.reflect.jvm.internal.impl.utils.SmartSet create(java.util.Collection) -> create
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
kotlin.reflect.jvm.internal.impl.utils.SmartSet$SingletonIterator -> kotlin.reflect.jvm.internal.impl.utils.SmartSet$SingletonIterator:
    boolean hasNext -> hasNext
    java.lang.Object element -> element
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    java.lang.Void remove() -> remove
    void remove() -> remove
    void <init>(java.lang.Object) -> <init>
kotlin.reflect.jvm.internal.impl.utils.WrappedValues -> kotlin.reflect.jvm.internal.impl.utils.WrappedValues:
    java.lang.Object NULL_VALUE -> NULL_VALUE
    boolean throwWrappedProcessCanceledException -> throwWrappedProcessCanceledException
    java.lang.Object unescapeNull(java.lang.Object) -> unescapeNull
    java.lang.Object escapeNull(java.lang.Object) -> escapeNull
    java.lang.Object escapeThrowable(java.lang.Throwable) -> escapeThrowable
    java.lang.Object unescapeExceptionOrNull(java.lang.Object) -> unescapeExceptionOrNull
    java.lang.Object unescapeThrowable(java.lang.Object) -> unescapeThrowable
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.WrappedValues$1 -> kotlin.reflect.jvm.internal.impl.utils.WrappedValues$1:
    void <init>() -> <init>
    java.lang.String toString() -> toString
kotlin.reflect.jvm.internal.impl.utils.WrappedValues$ThrowableWrapper -> kotlin.reflect.jvm.internal.impl.utils.WrappedValues$ThrowableWrapper:
    java.lang.Throwable throwable -> throwable
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Throwable getThrowable() -> getThrowable
    java.lang.String toString() -> toString
    void <init>(java.lang.Throwable,kotlin.reflect.jvm.internal.impl.utils.WrappedValues$1) -> <init>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.impl.utils.WrappedValues$WrappedProcessCanceledException -> kotlin.reflect.jvm.internal.impl.utils.WrappedValues$WrappedProcessCanceledException:
    void <init>(java.lang.Throwable) -> <init>
kotlin.reflect.jvm.internal.pcollections.ConsPStack -> kotlin.reflect.jvm.internal.pcollections.ConsPStack:
    kotlin.reflect.jvm.internal.pcollections.ConsPStack EMPTY -> EMPTY
    java.lang.Object first -> first
    kotlin.reflect.jvm.internal.pcollections.ConsPStack rest -> rest
    int size -> size
    kotlin.reflect.jvm.internal.pcollections.ConsPStack empty() -> empty
    void <init>() -> <init>
    void <init>(java.lang.Object,kotlin.reflect.jvm.internal.pcollections.ConsPStack) -> <init>
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.util.Iterator iterator(int) -> iterator
    kotlin.reflect.jvm.internal.pcollections.ConsPStack plus(java.lang.Object) -> plus
    kotlin.reflect.jvm.internal.pcollections.ConsPStack minus(java.lang.Object) -> minus
    kotlin.reflect.jvm.internal.pcollections.ConsPStack minus(int) -> minus
    kotlin.reflect.jvm.internal.pcollections.ConsPStack subList(int) -> subList
    int access$000(kotlin.reflect.jvm.internal.pcollections.ConsPStack) -> access$000
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.pcollections.ConsPStack$Itr -> kotlin.reflect.jvm.internal.pcollections.ConsPStack$Itr:
    kotlin.reflect.jvm.internal.pcollections.ConsPStack next -> next
    void <init>(kotlin.reflect.jvm.internal.pcollections.ConsPStack) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
kotlin.reflect.jvm.internal.pcollections.HashPMap -> kotlin.reflect.jvm.internal.pcollections.HashPMap:
    kotlin.reflect.jvm.internal.pcollections.HashPMap EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap intMap -> intMap
    int size -> size
    kotlin.reflect.jvm.internal.pcollections.HashPMap empty() -> empty
    void <init>(kotlin.reflect.jvm.internal.pcollections.IntTreePMap,int) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    kotlin.reflect.jvm.internal.pcollections.HashPMap plus(java.lang.Object,java.lang.Object) -> plus
    kotlin.reflect.jvm.internal.pcollections.HashPMap minus(java.lang.Object) -> minus
    kotlin.reflect.jvm.internal.pcollections.ConsPStack getEntries(int) -> getEntries
    int keyIndexIn(kotlin.reflect.jvm.internal.pcollections.ConsPStack,java.lang.Object) -> keyIndexIn
    void <clinit>() -> <clinit>
    void $$$reportNull$$$0(int) -> $$$reportNull$$$0
kotlin.reflect.jvm.internal.pcollections.IntTree -> kotlin.reflect.jvm.internal.pcollections.IntTree:
    kotlin.reflect.jvm.internal.pcollections.IntTree EMPTYNODE -> EMPTYNODE
    long key -> key
    java.lang.Object value -> value
    kotlin.reflect.jvm.internal.pcollections.IntTree left -> left
    kotlin.reflect.jvm.internal.pcollections.IntTree right -> right
    int size -> size
    void <init>() -> <init>
    void <init>(long,java.lang.Object,kotlin.reflect.jvm.internal.pcollections.IntTree,kotlin.reflect.jvm.internal.pcollections.IntTree) -> <init>
    kotlin.reflect.jvm.internal.pcollections.IntTree withKey(long) -> withKey
    java.lang.Object get(long) -> get
    kotlin.reflect.jvm.internal.pcollections.IntTree plus(long,java.lang.Object) -> plus
    kotlin.reflect.jvm.internal.pcollections.IntTree minus(long) -> minus
    long minKey() -> minKey
    kotlin.reflect.jvm.internal.pcollections.IntTree rebalanced(kotlin.reflect.jvm.internal.pcollections.IntTree,kotlin.reflect.jvm.internal.pcollections.IntTree) -> rebalanced
    kotlin.reflect.jvm.internal.pcollections.IntTree rebalanced(long,java.lang.Object,kotlin.reflect.jvm.internal.pcollections.IntTree,kotlin.reflect.jvm.internal.pcollections.IntTree) -> rebalanced
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.pcollections.IntTreePMap -> kotlin.reflect.jvm.internal.pcollections.IntTreePMap:
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap EMPTY -> EMPTY
    kotlin.reflect.jvm.internal.pcollections.IntTree root -> root
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap empty() -> empty
    void <init>(kotlin.reflect.jvm.internal.pcollections.IntTree) -> <init>
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap withRoot(kotlin.reflect.jvm.internal.pcollections.IntTree) -> withRoot
    java.lang.Object get(int) -> get
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap plus(int,java.lang.Object) -> plus
    kotlin.reflect.jvm.internal.pcollections.IntTreePMap minus(int) -> minus
    void <clinit>() -> <clinit>
kotlin.reflect.jvm.internal.pcollections.MapEntry -> kotlin.reflect.jvm.internal.pcollections.MapEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
kotlin.sequences.ConstrainedOnceSequence -> kotlin.i.a:
    java.util.concurrent.atomic.AtomicReference sequenceRef -> a
    java.util.Iterator iterator() -> a
    void <init>(kotlin.sequences.Sequence) -> <init>
kotlin.sequences.DropSequence -> kotlin.i.b:
    kotlin.sequences.Sequence sequence -> a
    int count -> a
    kotlin.sequences.Sequence drop$7a5a6d6d() -> a
    java.util.Iterator iterator() -> a
    void <init>(kotlin.sequences.Sequence,int) -> <init>
    kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence) -> a
    int access$getCount$p(kotlin.sequences.DropSequence) -> a
kotlin.sequences.DropSequence$iterator$1 -> kotlin.i.c:
    java.util.Iterator iterator -> a
    int left -> a
    void drop() -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.sequences.DropSequence) -> <init>
    void remove() -> remove
kotlin.sequences.DropTakeSequence -> kotlin.i.d:
    kotlin.sequences.Sequence drop$7a5a6d6d() -> a
kotlin.sequences.EmptySequence -> kotlin.i.e:
    kotlin.sequences.EmptySequence INSTANCE -> a
    java.util.Iterator iterator() -> a
    kotlin.sequences.Sequence drop$7a5a6d6d() -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.sequences.FilteringSequence -> kotlin.i.f:
    kotlin.sequences.Sequence sequence -> a
    boolean sendWhen -> a
    kotlin.jvm.functions.Function1 predicate -> a
    java.util.Iterator iterator() -> a
    void <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1) -> <init>
    boolean access$getSendWhen$p(kotlin.sequences.FilteringSequence) -> a
    kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.FilteringSequence) -> a
    kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FilteringSequence) -> a
kotlin.sequences.FilteringSequence$iterator$1 -> kotlin.i.g:
    java.util.Iterator iterator -> a
    int nextState -> a
    java.lang.Object nextItem -> a
    kotlin.sequences.FilteringSequence this$0 -> a
    void calcNext() -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.sequences.FilteringSequence) -> <init>
    void remove() -> remove
kotlin.sequences.FlatteningSequence -> kotlin.i.h:
    kotlin.sequences.Sequence sequence -> a
    kotlin.jvm.functions.Function1 transformer -> a
    kotlin.jvm.functions.Function1 iterator -> b
    java.util.Iterator iterator() -> a
    void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1) -> <init>
    kotlin.jvm.functions.Function1 access$getIterator$p(kotlin.sequences.FlatteningSequence) -> a
    kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.FlatteningSequence) -> b
    kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FlatteningSequence) -> a
kotlin.sequences.FlatteningSequence$iterator$1 -> kotlin.i.i:
    java.util.Iterator iterator -> a
    java.util.Iterator itemIterator -> b
    kotlin.sequences.FlatteningSequence this$0 -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    boolean ensureItemIterator() -> a
    void <init>(kotlin.sequences.FlatteningSequence) -> <init>
    void remove() -> remove
kotlin.sequences.GeneratorSequence -> kotlin.i.j:
    kotlin.jvm.functions.Function0 getInitialValue -> a
    kotlin.jvm.functions.Function1 getNextValue -> a
    java.util.Iterator iterator() -> a
    void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1) -> <init>
    kotlin.jvm.functions.Function0 access$getGetInitialValue$p(kotlin.sequences.GeneratorSequence) -> a
    kotlin.jvm.functions.Function1 access$getGetNextValue$p(kotlin.sequences.GeneratorSequence) -> a
kotlin.sequences.GeneratorSequence$iterator$1 -> kotlin.i.k:
    java.lang.Object nextItem -> a
    int nextState -> a
    kotlin.sequences.GeneratorSequence this$0 -> a
    void calcNext() -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.sequences.GeneratorSequence) -> <init>
    void remove() -> remove
kotlin.sequences.Sequence -> kotlin.i.l:
    java.util.Iterator iterator() -> a
kotlin.sequences.SequencesKt__SequencesKt -> kotlin.i.m:
    kotlin.sequences.Sequence sequenceOf(java.lang.Object[]) -> a
    kotlin.sequences.Sequence flatten(kotlin.sequences.Sequence) -> a
    kotlin.sequences.Sequence flatten$SequencesKt__SequencesKt(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> a
    kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence) -> b
    kotlin.sequences.Sequence generateSequence(kotlin.jvm.functions.Function0) -> a
    kotlin.sequences.Sequence generateSequence(java.lang.Object,kotlin.jvm.functions.Function1) -> a
kotlin.sequences.SequencesKt__SequencesKt$flatten$1 -> kotlin.i.n:
    kotlin.sequences.SequencesKt__SequencesKt$flatten$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.sequences.SequencesKt__SequencesKt$flatten$3 -> kotlin.i.o:
    kotlin.sequences.SequencesKt__SequencesKt$flatten$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.sequences.SequencesKt__SequencesKt$generateSequence$1 -> kotlin.i.p:
    kotlin.jvm.functions.Function0 $nextFunction -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.jvm.functions.Function0) -> <init>
kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2 -> kotlin.i.q:
    java.lang.Object $seed -> a
    java.lang.Object invoke() -> invoke
    void <init>(java.lang.Object) -> <init>
kotlin.sequences.SequencesKt___SequencesKt -> kotlin.i.r:
    java.lang.Object last(kotlin.sequences.Sequence) -> a
    kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> a
    kotlin.sequences.Sequence filterNot(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> b
    kotlin.sequences.Sequence filterNotNull(kotlin.sequences.Sequence) -> c
    java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection) -> a
    java.util.List toList(kotlin.sequences.Sequence) -> a
    java.util.List toMutableList(kotlin.sequences.Sequence) -> b
    kotlin.sequences.Sequence flatMap(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> c
    kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> d
    kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> e
    int count(kotlin.sequences.Sequence) -> a
    kotlin.sequences.Sequence plus(kotlin.sequences.Sequence,java.lang.Object) -> a
    java.lang.Appendable joinTo$3ee47ddd(kotlin.sequences.Sequence,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence) -> a
    java.lang.String joinToString$5afe6b21(kotlin.sequences.Sequence,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence) -> a
    java.lang.String joinToString$default$5488afc2$3cafef9e(kotlin.sequences.Sequence,java.lang.CharSequence) -> a
    java.lang.Iterable asIterable(kotlin.sequences.Sequence) -> a
kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1 -> kotlin.i.s:
    kotlin.sequences.Sequence $this_asIterable$inlined -> a
    void <init>(kotlin.sequences.Sequence) -> <init>
    java.util.Iterator iterator() -> iterator
kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 -> kotlin.i.t:
    kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 -> kotlin.i.u:
    kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.sequences.TakeWhileSequence -> kotlin.i.v:
    kotlin.sequences.Sequence sequence -> a
    kotlin.jvm.functions.Function1 predicate -> a
    java.util.Iterator iterator() -> a
    void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> <init>
    kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.TakeWhileSequence) -> a
    kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeWhileSequence) -> a
kotlin.sequences.TakeWhileSequence$iterator$1 -> kotlin.i.w:
    java.util.Iterator iterator -> a
    int nextState -> a
    java.lang.Object nextItem -> a
    kotlin.sequences.TakeWhileSequence this$0 -> a
    void calcNext() -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.sequences.TakeWhileSequence) -> <init>
    void remove() -> remove
kotlin.sequences.TransformingSequence -> kotlin.i.x:
    kotlin.sequences.Sequence sequence -> a
    kotlin.jvm.functions.Function1 transformer -> a
    java.util.Iterator iterator() -> a
    kotlin.sequences.Sequence flatten$kotlin_stdlib(kotlin.jvm.functions.Function1) -> a
    void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1) -> <init>
    kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence) -> a
    kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence) -> a
kotlin.sequences.TransformingSequence$iterator$1 -> kotlin.i.y:
    java.util.Iterator iterator -> a
    kotlin.sequences.TransformingSequence this$0 -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.sequences.TransformingSequence) -> <init>
    void remove() -> remove
kotlin.text.Charsets -> kotlin.j.a:
    java.nio.charset.Charset UTF_8 -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.text.DelimitedRangesSequence -> kotlin.j.b:
    java.lang.CharSequence input -> a
    kotlin.jvm.functions.Function2 getNextMatch -> a
    java.util.Iterator iterator() -> a
    void <init>(java.lang.CharSequence,kotlin.jvm.functions.Function2) -> <init>
    int access$getLimit$p$494e66fd() -> a
    java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence) -> a
    kotlin.jvm.functions.Function2 access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence) -> a
    int access$getStartIndex$p$494e66fd() -> b
kotlin.text.DelimitedRangesSequence$iterator$1 -> kotlin.j.c:
    int nextState -> a
    int currentStartIndex -> b
    int nextSearchIndex -> c
    kotlin.ranges.IntRange nextItem -> a
    kotlin.text.DelimitedRangesSequence this$0 -> a
    void calcNext() -> a
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void <init>(kotlin.text.DelimitedRangesSequence) -> <init>
    void remove() -> remove
kotlin.text.MatchGroup -> kotlin.j.d:
    java.lang.String value -> a
    kotlin.ranges.IntRange range -> a
    void <init>(java.lang.String,kotlin.ranges.IntRange) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
kotlin.text.MatchGroupCollection -> kotlin.j.e:
kotlin.text.MatchResult -> kotlin.j.f:
    kotlin.ranges.IntRange getRange() -> a
    java.util.List getGroupValues() -> a
    kotlin.text.MatchResult$Destructured getDestructured() -> a
    kotlin.text.MatchResult next() -> a
kotlin.text.MatchResult$Destructured -> kotlin.j.g:
    kotlin.text.MatchResult match -> a
    void <init>(kotlin.text.MatchResult) -> <init>
kotlin.text.MatcherMatchResult -> kotlin.j.h:
    java.util.List groupValues_ -> a
    java.util.regex.Matcher matcher -> a
    java.lang.CharSequence input -> a
    kotlin.ranges.IntRange getRange() -> a
    java.util.List getGroupValues() -> a
    kotlin.text.MatchResult next() -> a
    void <init>(java.util.regex.Matcher,java.lang.CharSequence) -> <init>
    kotlin.text.MatchResult$Destructured getDestructured() -> a
kotlin.text.MatcherMatchResult$groupValues$1 -> kotlin.j.i:
    kotlin.text.MatcherMatchResult this$0 -> a
    int getSize() -> a
    java.lang.Object get(int) -> get
    void <init>(kotlin.text.MatcherMatchResult) -> <init>
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
kotlin.text.MatcherMatchResult$groups$1 -> kotlin.j.j:
    kotlin.text.MatcherMatchResult this$0 -> a
    int getSize() -> a
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    void <init>(kotlin.text.MatcherMatchResult) -> <init>
    boolean contains(java.lang.Object) -> contains
kotlin.text.MatcherMatchResult$groups$1$iterator$1 -> kotlin.j.k:
    kotlin.text.MatcherMatchResult$groups$1 this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(kotlin.text.MatcherMatchResult$groups$1) -> <init>
kotlin.text.Regex -> kotlin.j.l:
    java.util.regex.Pattern nativePattern -> a
    boolean matches(java.lang.CharSequence) -> a
    kotlin.text.MatchResult find$default$12fc553c$5c229160(kotlin.text.Regex,java.lang.CharSequence) -> a
    java.lang.String replace(java.lang.CharSequence,kotlin.jvm.functions.Function1) -> a
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    void <init>(java.util.regex.Pattern) -> <init>
    void <init>(java.lang.String) -> <init>
    void <clinit>() -> <clinit>
kotlin.text.Regex$Companion -> kotlin.j.m:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.text.Regex$Serialized -> kotlin.j.n:
    java.lang.String pattern -> a
    int flags -> a
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
kotlin.text.Regex$Serialized$Companion -> kotlin.j.o:
    void <init>() -> <init>
    void <init>(byte) -> <init>
kotlin.text.ScreenFloatValueRegEx -> kotlin.j.p:
    kotlin.text.Regex value -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.text.StringsKt__IndentKt -> kotlin.j.q:
    java.lang.String replaceIndentByMargin(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.StringBuilder appendln(java.lang.StringBuilder) -> a
    java.lang.StringBuilder append(java.lang.StringBuilder,java.lang.String[]) -> a
    java.lang.Float toFloatOrNull(java.lang.String) -> a
    java.lang.Double toDoubleOrNull(java.lang.String) -> a
    java.lang.Integer toIntOrNull(java.lang.String,int) -> a
    java.lang.String replace$42ec9795(java.lang.String,char,char) -> a
    java.lang.String replace$2107c6e1(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String replaceFirst$2107c6e1(java.lang.String,java.lang.String,java.lang.String) -> c
    boolean startsWith$3b99f9ef(java.lang.String,java.lang.String) -> a
    boolean startsWith$default$3705f858$37a5b67c(java.lang.String,java.lang.String) -> b
    boolean endsWith(java.lang.String,java.lang.String,boolean) -> a
    boolean endsWith$default$3705f858$37a5b67c(java.lang.String,java.lang.String) -> c
    boolean isBlank(java.lang.CharSequence) -> a
    boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean) -> a
    java.lang.String capitalize(java.lang.String) -> a
    java.lang.String capitalize(java.lang.String,java.util.Locale) -> a
    java.lang.String repeat(java.lang.CharSequence,int) -> a
kotlin.text.StringsKt__IndentKt$getIndentFunction$1 -> kotlin.j.r:
    kotlin.text.StringsKt__IndentKt$getIndentFunction$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>() -> <init>
    void <clinit>() -> <clinit>
kotlin.text.StringsKt__IndentKt$getIndentFunction$2 -> kotlin.j.s:
    java.lang.String $indent -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(java.lang.String) -> <init>
kotlin.text.StringsKt__IndentKt$prependIndent$1 -> kotlin.j.t:
    java.lang.String $indent -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(java.lang.String) -> <init>
kotlin.text.StringsKt__StringsKt -> kotlin.j.u:
    java.lang.CharSequence trim(java.lang.CharSequence) -> a
    java.lang.CharSequence padStart$2733f5a7(java.lang.CharSequence) -> b
    java.lang.String padStart$a5a91a7(java.lang.String) -> b
    java.lang.CharSequence padEnd$2733f5a7(java.lang.CharSequence) -> c
    java.lang.String padEnd$a5a91a7(java.lang.String) -> c
    kotlin.ranges.IntRange getIndices(java.lang.CharSequence) -> a
    int getLastIndex(java.lang.CharSequence) -> a
    java.lang.String substring(java.lang.CharSequence,kotlin.ranges.IntRange) -> a
    java.lang.String substringBefore(java.lang.String,java.lang.String,java.lang.String) -> e
    java.lang.String substringBefore$default$48f06b8c$7d38fcd0(java.lang.String,java.lang.String) -> a
    java.lang.String substringAfter$68bc1f08(java.lang.String,java.lang.String) -> b
    java.lang.String substringAfter(java.lang.String,java.lang.String,java.lang.String) -> d
    java.lang.String substringAfter$default$48f06b8c$7d38fcd0(java.lang.String,java.lang.String) -> c
    java.lang.String substringBeforeLast(java.lang.String,char,java.lang.String) -> a
    java.lang.String substringBeforeLast$default$1178d309$6d48d95b(java.lang.String,char) -> a
    java.lang.String substringAfterLast(java.lang.String,char,java.lang.String) -> b
    java.lang.String substringAfterLast$default$1178d309$6d48d95b(java.lang.String,char) -> b
    java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence) -> a
    java.lang.String removePrefix(java.lang.String,java.lang.CharSequence) -> a
    java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence) -> b
    boolean regionMatchesImpl$7b7233f6(java.lang.CharSequence,int,java.lang.CharSequence,int,int) -> a
    boolean startsWith$4d214b2c(java.lang.CharSequence,char) -> a
    boolean endsWith$4d214b2c(java.lang.CharSequence) -> b
    boolean startsWith$122cefbb(java.lang.CharSequence,java.lang.CharSequence) -> b
    boolean endsWith$122cefbb(java.lang.CharSequence,java.lang.CharSequence) -> c
    int indexOfAny$623c6cbb(java.lang.CharSequence,char[],int) -> a
    int indexOf$StringsKt__StringsKt$f9710(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean) -> a
    int indexOf$StringsKt__StringsKt$default$6a8519d5$1e3bf79$39ceee8a(java.lang.CharSequence,java.lang.CharSequence,int,int) -> a
    int indexOf$570f2258(java.lang.CharSequence,char,int) -> a
    int indexOf$default$b46a3c3$752b4be1(java.lang.CharSequence,char,int,int) -> a
    int indexOf$476755f9(java.lang.CharSequence,java.lang.String,int) -> a
    int indexOf$default$49949d7e$5a7d0b62(java.lang.CharSequence,java.lang.String,int,int) -> a
    int lastIndexOf$570f2258(java.lang.CharSequence,char,int) -> b
    int lastIndexOf$default$b46a3c3$752b4be1(java.lang.CharSequence,char) -> a
    boolean contains$122cefbb(java.lang.CharSequence,java.lang.CharSequence) -> a
    boolean contains$4d214b2c(java.lang.CharSequence,char) -> b
    boolean contains$default$1ac7c153$5707a7c9(java.lang.CharSequence,char) -> c
    kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default$3a1fbd0d$19864969$25ef33b5(java.lang.CharSequence,char[]) -> a
    kotlin.sequences.Sequence splitToSequence$3b31b9c6$51f2f76d(java.lang.CharSequence,java.lang.String[]) -> a
    java.util.List split$5ddc9589(java.lang.CharSequence,char[]) -> a
    java.util.List split$default$7dbd8218$3dfc06b4(java.lang.CharSequence,char[]) -> b
    kotlin.sequences.Sequence lineSequence(java.lang.CharSequence) -> a
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2 -> kotlin.j.v:
    char[] $delimiters -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>(char[]) -> <init>
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4 -> kotlin.j.w:
    java.util.List $delimitersList -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> invoke
    void <init>(java.util.List) -> <init>
kotlin.text.StringsKt__StringsKt$splitToSequence$1 -> kotlin.j.x:
    java.lang.CharSequence $this_splitToSequence -> a
    java.lang.Object invoke(java.lang.Object) -> invoke
    void <init>(java.lang.CharSequence) -> <init>
kotlin.text.SystemProperties -> kotlin.j.y:
    java.lang.String LINE_SEPARATOR -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.objectweb.asm.AnnotationVisitor -> org.objectweb.asm.a:
    int api -> a
    org.objectweb.asm.AnnotationVisitor av -> a
    void <init>() -> <init>
    void <init>(int,org.objectweb.asm.AnnotationVisitor) -> <init>
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
org.objectweb.asm.AnnotationWriter -> org.objectweb.asm.b:
    org.objectweb.asm.SymbolTable symbolTable -> a
    boolean useNamedValues -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt annotation$6d90af15 -> a
    int numElementValuePairsOffset -> b
    int numElementValuePairs -> c
    org.objectweb.asm.AnnotationWriter previousAnnotation -> a
    org.objectweb.asm.AnnotationWriter nextAnnotation -> b
    void <init>(org.objectweb.asm.SymbolTable,boolean,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt,org.objectweb.asm.AnnotationWriter) -> <init>
    org.objectweb.asm.AnnotationWriter create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter) -> a
    org.objectweb.asm.AnnotationWriter create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter) -> a
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
    int computeAnnotationsSize(java.lang.String) -> a
    int computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter) -> a
    void putAnnotations$235a0899(int,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
    void putAnnotations$12858e56(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
    int computeParameterAnnotationsSize(java.lang.String,org.objectweb.asm.AnnotationWriter[],int) -> a
    void putParameterAnnotations$67ad3b3(int,org.objectweb.asm.AnnotationWriter[],int,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
org.objectweb.asm.Attribute -> org.objectweb.asm.c:
    java.lang.String type -> a
    byte[] content -> a
    org.objectweb.asm.Attribute nextAttribute -> a
    void <init>(java.lang.String) -> <init>
    org.objectweb.asm.Attribute read$77b048d0(org.objectweb.asm.ClassReader,int,int,char[]) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt write$15f7fde1$37f90659(org.objectweb.asm.ClassWriter) -> a
    int getAttributeCount() -> a
    int computeAttributesSize(org.objectweb.asm.SymbolTable) -> a
    int computeAttributesSize(org.objectweb.asm.SymbolTable,int,int) -> a
    void putAttributes$24bb4c26(org.objectweb.asm.SymbolTable,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
    void putAttributes$15f15386(org.objectweb.asm.SymbolTable,int,int,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
org.objectweb.asm.Attribute$Set -> org.objectweb.asm.d:
    int size -> a
    org.objectweb.asm.Attribute[] data -> a
    void <init>() -> <init>
    void addAttributes(org.objectweb.asm.Attribute) -> a
org.objectweb.asm.ClassReader -> org.objectweb.asm.e:
    byte[] classFileBuffer -> a
    int[] cpInfoOffsets -> a
    java.lang.String[] constantUtf8Values -> a
    org.objectweb.asm.ConstantDynamic[] constantDynamicValues -> a
    int[] bootstrapMethodOffsets -> b
    int maxStringLength -> a
    int header -> b
    void <init>(byte[]) -> <init>
    void <init>(byte[],byte) -> <init>
    void <init>(byte[],boolean) -> <init>
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.lang.String) -> <init>
    byte[] readStream(java.io.InputStream,boolean) -> a
    void accept(org.objectweb.asm.ClassVisitor,int) -> a
    void accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int) -> a
    void readModuleAttributes(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int,int,java.lang.String) -> a
    int readField(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int) -> a
    int readMethod(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int) -> b
    void readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int) -> a
    org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[]) -> a
    org.objectweb.asm.Label createLabel(int,org.objectweb.asm.Label[]) -> b
    void createDebugLabel(int,org.objectweb.asm.Label[]) -> a
    int[] readTypeAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean) -> a
    int getTypeAnnotationBytecodeOffset(int[],int) -> a
    int readTypeAnnotationTarget(org.objectweb.asm.Context,int) -> a
    void readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean) -> a
    int readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[]) -> a
    int readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[]) -> a
    void computeImplicitFrame(org.objectweb.asm.Context) -> a
    int readStackMapFrame(int,boolean,boolean,org.objectweb.asm.Context) -> a
    int readVerificationTypeInfo(int,java.lang.Object[],int,char[],org.objectweb.asm.Label[]) -> a
    int getFirstAttributeOffset() -> a
    int[] readBootstrapMethodsAttribute(int) -> a
    org.objectweb.asm.Attribute readAttribute$5e65b8ce(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[]) -> a
    int readByte(int) -> a
    int readUnsignedShort(int) -> b
    short readShort(int) -> a
    int readInt(int) -> c
    long readLong(int) -> a
    java.lang.String readUTF8(int,char[]) -> a
    java.lang.String readUtf(int,char[]) -> c
    java.lang.String readUtf(int,int,char[]) -> a
    java.lang.String readStringish(int,char[]) -> b
    org.objectweb.asm.ConstantDynamic readConstantDynamic(int,char[]) -> a
    java.lang.Object readConst(int,char[]) -> a
    java.util.List asArrayList(java.lang.Object[]) -> a
    java.util.List asArrayList(byte[]) -> a
    java.util.List asArrayList(boolean[]) -> a
    java.util.List asArrayList(short[]) -> a
    java.util.List asArrayList(char[]) -> a
    java.util.List asArrayList(int[]) -> a
    java.util.List asArrayList(float[]) -> a
    java.util.List asArrayList(long[]) -> a
    java.util.List asArrayList(double[]) -> a
    java.util.List asArrayList(int,java.lang.Object[]) -> a
org.objectweb.asm.ClassTooLargeException -> org.objectweb.asm.f:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.objectweb.asm.ClassVisitor -> org.objectweb.asm.g:
    org.objectweb.asm.ClassVisitor cv -> a
    void <init>() -> <init>
    void <init>(org.objectweb.asm.ClassVisitor) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
org.objectweb.asm.ClassWriter -> org.objectweb.asm.h:
    int version -> a
    org.objectweb.asm.SymbolTable symbolTable -> a
    int accessFlags -> b
    int thisClass -> c
    int superClass -> d
    int interfaceCount -> e
    int[] interfaces -> a
    org.objectweb.asm.FieldWriter firstField -> a
    org.objectweb.asm.FieldWriter lastField -> b
    org.objectweb.asm.MethodWriter firstMethod -> a
    org.objectweb.asm.MethodWriter lastMethod -> b
    int numberOfInnerClasses -> f
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt innerClasses$6d90af15 -> a
    int enclosingClassIndex -> g
    int enclosingMethodIndex -> h
    int signatureIndex -> i
    int sourceFileIndex -> j
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt debugExtension$6d90af15 -> b
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleAnnotation -> a
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleAnnotation -> b
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleTypeAnnotation -> c
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleTypeAnnotation -> d
    org.objectweb.asm.ModuleWriter moduleWriter -> a
    int nestHostClassIndex -> k
    int numberOfNestMemberClasses -> l
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt nestMemberClasses$6d90af15 -> c
    org.objectweb.asm.Attribute firstAttribute -> a
    int compute -> m
    void <init>(int) -> <init>
    void <init>(int,byte) -> <init>
    void <init>(int,char) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
    byte[] toByteArray() -> a
    int newUTF8(java.lang.String) -> a
    int newModule(java.lang.String) -> b
    java.lang.String getCommonSuperClass(java.lang.String,java.lang.String) -> a
org.objectweb.asm.ConstantDynamic -> org.objectweb.asm.i:
    java.lang.String name -> a
    java.lang.String descriptor -> b
    org.objectweb.asm.Handle bootstrapMethod -> a
    java.lang.Object[] bootstrapMethodArguments -> a
    void <init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.objectweb.asm.Context -> org.objectweb.asm.j:
    org.objectweb.asm.Attribute[] attributePrototypes -> a
    int parsingOptions -> a
    char[] charBuffer -> a
    int currentMethodAccessFlags -> b
    java.lang.String currentMethodName -> a
    java.lang.String currentMethodDescriptor -> b
    org.objectweb.asm.Label[] currentMethodLabels -> a
    int currentTypeAnnotationTarget -> c
    org.objectweb.asm.TypePath currentTypeAnnotationTargetPath -> a
    org.objectweb.asm.Label[] currentLocalVariableAnnotationRangeStarts -> b
    org.objectweb.asm.Label[] currentLocalVariableAnnotationRangeEnds -> c
    int[] currentLocalVariableAnnotationRangeIndices -> a
    int currentFrameOffset -> d
    int currentFrameType -> e
    int currentFrameLocalCount -> f
    int currentFrameLocalCountDelta -> g
    java.lang.Object[] currentFrameLocalTypes -> a
    int currentFrameStackCount -> h
    java.lang.Object[] currentFrameStackTypes -> b
    void <init>() -> <init>
org.objectweb.asm.CurrentFrame -> org.objectweb.asm.k:
    void <init>(org.objectweb.asm.Label) -> <init>
    void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable) -> a
org.objectweb.asm.Edge -> org.objectweb.asm.l:
    int info -> a
    org.objectweb.asm.Label successor -> a
    org.objectweb.asm.Edge nextEdge -> a
    void <init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge) -> <init>
org.objectweb.asm.FieldVisitor -> org.objectweb.asm.m:
    org.objectweb.asm.FieldVisitor fv -> a
    void <init>() -> <init>
    void <init>(org.objectweb.asm.FieldVisitor) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
org.objectweb.asm.FieldWriter -> org.objectweb.asm.n:
    org.objectweb.asm.SymbolTable symbolTable -> a
    int accessFlags -> a
    int nameIndex -> b
    int descriptorIndex -> c
    int signatureIndex -> d
    int constantValueIndex -> e
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleAnnotation -> a
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleAnnotation -> b
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleTypeAnnotation -> c
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleTypeAnnotation -> d
    org.objectweb.asm.Attribute firstAttribute -> a
    void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
org.objectweb.asm.Frame -> org.objectweb.asm.o:
    org.objectweb.asm.Label owner -> a
    int[] inputLocals -> a
    int[] inputStack -> b
    int[] outputLocals -> c
    int[] outputStack -> d
    short outputStackStart -> b
    short outputStackTop -> a
    int initializationCount -> a
    int[] initializations -> e
    void <init>(org.objectweb.asm.Label) -> <init>
    void copyFrom(org.objectweb.asm.Frame) -> a
    int getAbstractTypeFromApiFormat(org.objectweb.asm.SymbolTable,java.lang.Object) -> a
    int getAbstractTypeFromInternalName(org.objectweb.asm.SymbolTable,java.lang.String) -> a
    int getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int) -> a
    void setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int) -> a
    int getLocal(int) -> a
    void setLocal(int,int) -> a
    void push(int) -> a
    void push(org.objectweb.asm.SymbolTable,java.lang.String) -> a
    int pop() -> a
    void pop(int) -> b
    void pop(java.lang.String) -> a
    int getInitializedType(org.objectweb.asm.SymbolTable,int) -> a
    void execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable) -> a
    int getConcreteOutputType(int,int) -> a
    boolean merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int) -> a
    boolean merge(org.objectweb.asm.SymbolTable,int,int[],int) -> a
    void accept(org.objectweb.asm.MethodWriter) -> a
    void putAbstractType$5bbb039f(org.objectweb.asm.SymbolTable,int,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
org.objectweb.asm.Handle -> org.objectweb.asm.p:
    int tag -> a
    java.lang.String owner -> a
    java.lang.String name -> b
    java.lang.String descriptor -> c
    boolean isInterface -> a
    void <init>(int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.objectweb.asm.Handler -> org.objectweb.asm.q:
    org.objectweb.asm.Label startPc -> a
    org.objectweb.asm.Label endPc -> b
    org.objectweb.asm.Label handlerPc -> c
    int catchType -> a
    java.lang.String catchTypeDescriptor -> a
    org.objectweb.asm.Handler nextHandler -> a
    void <init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String) -> <init>
    void <init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label) -> <init>
    org.objectweb.asm.Handler removeRange(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label) -> a
    int getExceptionTableLength(org.objectweb.asm.Handler) -> a
    int getExceptionTableSize(org.objectweb.asm.Handler) -> b
org.objectweb.asm.Label -> org.objectweb.asm.r:
    org.objectweb.asm.Label EMPTY_LIST -> a
    java.lang.Object info -> a
    short flags -> a
    short lineNumber -> f
    int[] otherLineNumbers -> a
    int bytecodeOffset -> a
    int[] forwardReferences -> b
    short inputStackSize -> b
    short outputStackSize -> c
    short outputStackMax -> d
    short subroutineId -> e
    org.objectweb.asm.Frame frame -> a
    org.objectweb.asm.Label nextBasicBlock -> b
    org.objectweb.asm.Edge outgoingEdges -> a
    org.objectweb.asm.Label nextListElement -> c
    void <init>() -> <init>
    org.objectweb.asm.Label getCanonicalInstance() -> a
    void addLineNumber(int) -> a
    void accept(org.objectweb.asm.MethodVisitor,boolean) -> a
    void put$49375fd1(dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt,int,boolean) -> a
    void addForwardReference(int,int,int) -> a
    boolean resolve(byte[],int) -> a
    void markSubroutine(short) -> a
    org.objectweb.asm.Label pushSuccessors(org.objectweb.asm.Label) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.objectweb.asm.MethodTooLargeException -> org.objectweb.asm.s:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
org.objectweb.asm.MethodVisitor -> org.objectweb.asm.t:
    org.objectweb.asm.MethodVisitor mv -> a
    void <init>() -> <init>
    void <init>(org.objectweb.asm.MethodVisitor) -> <init>
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitCode() -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitEnd() -> b
org.objectweb.asm.MethodWriter -> org.objectweb.asm.u:
    int[] STACK_SIZE_DELTA -> c
    org.objectweb.asm.SymbolTable symbolTable -> a
    int accessFlags -> a
    int nameIndex -> b
    java.lang.String name -> a
    int descriptorIndex -> c
    java.lang.String descriptor -> b
    int maxStack -> d
    int maxLocals -> e
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt code$6d90af15 -> a
    org.objectweb.asm.Handler firstHandler -> a
    org.objectweb.asm.Handler lastHandler -> b
    int lineNumberTableLength -> f
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt lineNumberTable$6d90af15 -> b
    int localVariableTableLength -> g
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt localVariableTable$6d90af15 -> c
    int localVariableTypeTableLength -> h
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt localVariableTypeTable$6d90af15 -> d
    int stackMapTableNumberOfEntries -> i
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt stackMapTableEntries$6d90af15 -> e
    org.objectweb.asm.AnnotationWriter lastCodeRuntimeVisibleTypeAnnotation -> a
    org.objectweb.asm.AnnotationWriter lastCodeRuntimeInvisibleTypeAnnotation -> b
    int numberOfExceptions -> j
    int[] exceptionIndexTable -> a
    int signatureIndex -> k
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleAnnotation -> c
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleAnnotation -> d
    int visibleAnnotableParameterCount -> l
    org.objectweb.asm.AnnotationWriter[] lastRuntimeVisibleParameterAnnotations -> a
    int invisibleAnnotableParameterCount -> m
    org.objectweb.asm.AnnotationWriter[] lastRuntimeInvisibleParameterAnnotations -> b
    org.objectweb.asm.AnnotationWriter lastRuntimeVisibleTypeAnnotation -> e
    org.objectweb.asm.AnnotationWriter lastRuntimeInvisibleTypeAnnotation -> f
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt defaultValue$6d90af15 -> f
    int parametersCount -> n
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt parameters$6d90af15 -> g
    org.objectweb.asm.Attribute firstAttribute -> a
    int compute -> o
    org.objectweb.asm.Label firstBasicBlock -> a
    org.objectweb.asm.Label lastBasicBlock -> b
    org.objectweb.asm.Label currentBasicBlock -> c
    int relativeStackSize -> p
    int maxRelativeStackSize -> q
    int currentLocals -> r
    int previousFrameOffset -> s
    int[] previousFrame -> d
    int[] currentFrame -> b
    boolean hasSubroutines -> b
    boolean hasAsmInstructions -> a
    int lastBytecodeOffset -> t
    void <init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int) -> <init>
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitCode() -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void computeMaxStackAndLocal() -> d
    void visitEnd() -> b
    void addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label) -> c
    void endCurrentBasicBlockWithNoSuccessor() -> e
    int visitFrameStart(int,int,int) -> a
    void visitFrameEnd() -> c
    void putFrame() -> f
    void putAbstractTypes(int,int) -> e
    void putFrameType(java.lang.Object) -> b
    void <clinit>() -> <clinit>
org.objectweb.asm.ModuleVisitor -> org.objectweb.asm.v:
    org.objectweb.asm.ModuleVisitor mv -> a
    void <init>() -> <init>
    void <init>(org.objectweb.asm.ModuleVisitor) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
org.objectweb.asm.ModuleWriter -> org.objectweb.asm.w:
    org.objectweb.asm.SymbolTable symbolTable -> a
    int moduleNameIndex -> a
    int moduleFlags -> b
    int moduleVersionIndex -> c
    int requiresCount -> d
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt requires$6d90af15 -> a
    int exportsCount -> e
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt exports$6d90af15 -> b
    int opensCount -> f
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt opens$6d90af15 -> c
    int usesCount -> g
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt usesIndex$6d90af15 -> d
    int providesCount -> h
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt provides$6d90af15 -> e
    int packageCount -> i
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt packageIndex$6d90af15 -> f
    int mainClassIndex -> j
    void <init>(org.objectweb.asm.SymbolTable,int,int,int) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
org.objectweb.asm.Opcodes -> org.objectweb.asm.x:
    java.lang.Integer TOP -> a
    java.lang.Integer INTEGER -> b
    java.lang.Integer FLOAT -> c
    java.lang.Integer DOUBLE -> d
    java.lang.Integer LONG -> e
    java.lang.Integer NULL -> f
    java.lang.Integer UNINITIALIZED_THIS -> g
    void <clinit>() -> <clinit>
org.objectweb.asm.Symbol -> org.objectweb.asm.y:
    int index -> a
    int tag -> b
    java.lang.String owner -> a
    java.lang.String name -> b
    java.lang.String value -> c
    long data -> a
    int info -> c
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long) -> <init>
    int getArgumentsAndReturnSizes() -> a
org.objectweb.asm.SymbolTable -> org.objectweb.asm.z:
    org.objectweb.asm.ClassWriter classWriter -> a
    int majorVersion -> a
    java.lang.String className -> a
    int entryCount -> d
    org.objectweb.asm.SymbolTable$Entry[] entries -> b
    int constantPoolCount -> b
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt constantPool$6d90af15 -> a
    int bootstrapMethodCount -> c
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt bootstrapMethods$6d90af15 -> b
    int typeCount -> e
    org.objectweb.asm.SymbolTable$Entry[] typeTable -> a
    void <init>(org.objectweb.asm.ClassWriter) -> <init>
    int computeBootstrapMethodsSize() -> a
    org.objectweb.asm.SymbolTable$Entry get(int) -> a
    org.objectweb.asm.SymbolTable$Entry put(org.objectweb.asm.SymbolTable$Entry) -> a
    org.objectweb.asm.Symbol addConstant(java.lang.Object) -> a
    org.objectweb.asm.Symbol addConstantClass(java.lang.String) -> a
    org.objectweb.asm.Symbol addConstantFieldref(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.Symbol addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.Symbol addConstantInteger(int) -> a
    org.objectweb.asm.Symbol addConstantFloat(float) -> a
    org.objectweb.asm.Symbol addConstantIntegerOrFloat(int,int) -> a
    org.objectweb.asm.Symbol addConstantLong(long) -> a
    org.objectweb.asm.Symbol addConstantDouble(double) -> a
    org.objectweb.asm.Symbol addConstantLongOrDouble(int,long) -> a
    int addConstantNameAndType(java.lang.String,java.lang.String) -> a
    int addConstantUtf8(java.lang.String) -> a
    org.objectweb.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    org.objectweb.asm.Symbol addConstantDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> b
    org.objectweb.asm.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.Symbol addConstantModule(java.lang.String) -> b
    org.objectweb.asm.Symbol addConstantPackage(java.lang.String) -> c
    org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String) -> a
    org.objectweb.asm.Symbol addBootstrapMethod(org.objectweb.asm.Handle,java.lang.Object[]) -> a
    org.objectweb.asm.Symbol addBootstrapMethod(int,int,int) -> a
    int addType(java.lang.String) -> b
    int addUninitializedType(java.lang.String,int) -> a
    int addMergedType(int,int) -> a
    int addTypeInternal(org.objectweb.asm.SymbolTable$Entry) -> a
    int hash(int,long) -> a
    int hash(int,java.lang.String) -> a
    int hash$615ffe82(java.lang.String,int) -> b
    int hash$6ef37c35(java.lang.String,java.lang.String) -> b
    int hash(int,java.lang.String,java.lang.String,int) -> a
    int hash(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int hash$3f9ccaea(java.lang.String,java.lang.String,java.lang.String,int) -> a
org.objectweb.asm.SymbolTable$Entry -> org.objectweb.asm.A:
    int hashCode -> d
    org.objectweb.asm.SymbolTable$Entry next -> a
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int) -> <init>
    void <init>(int,int,java.lang.String,int) -> <init>
    void <init>(int,java.lang.String,long,int) -> <init>
    void <init>(int,java.lang.String,java.lang.String,int) -> <init>
    void <init>(int,int,long,int) -> <init>
org.objectweb.asm.Type -> org.objectweb.asm.B:
    org.objectweb.asm.Type VOID_TYPE -> a
    org.objectweb.asm.Type BOOLEAN_TYPE -> b
    org.objectweb.asm.Type CHAR_TYPE -> c
    org.objectweb.asm.Type BYTE_TYPE -> d
    org.objectweb.asm.Type SHORT_TYPE -> e
    org.objectweb.asm.Type INT_TYPE -> f
    org.objectweb.asm.Type FLOAT_TYPE -> g
    org.objectweb.asm.Type LONG_TYPE -> h
    org.objectweb.asm.Type DOUBLE_TYPE -> i
    int sort -> a
    java.lang.String valueBuffer -> a
    int valueBegin -> b
    int valueEnd -> c
    void <init>(int,java.lang.String,int,int) -> <init>
    org.objectweb.asm.Type getType(java.lang.String) -> a
    org.objectweb.asm.Type getType(java.lang.Class) -> a
    org.objectweb.asm.Type getElementType() -> a
    org.objectweb.asm.Type getObjectType(java.lang.String) -> b
    org.objectweb.asm.Type getMethodType(java.lang.String) -> c
    org.objectweb.asm.Type[] getArgumentTypes(java.lang.String) -> a
    org.objectweb.asm.Type getReturnType(java.lang.String) -> d
    int getReturnTypeOffset(java.lang.String) -> a
    org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int) -> a
    java.lang.String getClassName() -> a
    java.lang.String getInternalName() -> b
    java.lang.String getInternalName(java.lang.Class) -> a
    java.lang.String getDescriptor() -> c
    java.lang.String getDescriptor(java.lang.Class) -> b
    java.lang.String getDescriptor$5717eeb4(java.lang.Class) -> c
    java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[]) -> a
    java.lang.String getMethodDescriptor(java.lang.reflect.Method) -> a
    void appendDescriptor(java.lang.StringBuilder) -> a
    void appendDescriptor(java.lang.Class,java.lang.StringBuilder) -> a
    void appendDescriptor(java.lang.Class,java.lang.StringBuilder,boolean) -> a
    java.lang.Class primitiveClass(java.lang.Class) -> a
    int getSort() -> a
    int getDimensions() -> b
    int getSize() -> c
    int getArgumentsAndReturnSizes(java.lang.String) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.objectweb.asm.TypePath -> org.objectweb.asm.C:
    byte[] typePathContainer -> a
    int typePathOffset -> a
    void <init>(byte[],int) -> <init>
    java.lang.String toString() -> toString
    void put$14f913b7(org.objectweb.asm.TypePath,dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt) -> a
org.objectweb.asm.TypeReference -> org.objectweb.asm.D:
    int targetTypeAndInfo -> a
    void <init>(int) -> <init>
    int getTypeParameterIndex() -> a
    int getTypeParameterBoundIndex() -> b
    int getSuperTypeIndex() -> c
    int getFormalParameterIndex() -> d
    int getExceptionIndex() -> e
    int getTryCatchBlockIndex() -> f
    int getTypeArgumentIndex() -> g
org.objectweb.asm.commons.AnnotationRemapper -> org.objectweb.asm.a.a:
    org.objectweb.asm.commons.Remapper remapper -> a
    void <init>(int,org.objectweb.asm.AnnotationVisitor,org.objectweb.asm.commons.Remapper) -> <init>
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
org.objectweb.asm.commons.ClassRemapper -> org.objectweb.asm.a.b:
    org.objectweb.asm.commons.Remapper remapper -> a
    java.lang.String className -> a
    void <init>(org.objectweb.asm.ClassVisitor,org.objectweb.asm.commons.Remapper) -> <init>
    void <init>(org.objectweb.asm.ClassVisitor,org.objectweb.asm.commons.Remapper,byte) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitNestMember(java.lang.String) -> b
    org.objectweb.asm.AnnotationVisitor createAnnotationRemapper(org.objectweb.asm.AnnotationVisitor) -> a
org.objectweb.asm.commons.FieldRemapper -> org.objectweb.asm.a.c:
    org.objectweb.asm.commons.Remapper remapper -> a
    void <init>(org.objectweb.asm.FieldVisitor,org.objectweb.asm.commons.Remapper) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
org.objectweb.asm.commons.MethodRemapper -> org.objectweb.asm.a.d:
    org.objectweb.asm.Handle META_FACTORY -> a
    org.objectweb.asm.Handle ALT_META_FACTORY -> b
    org.objectweb.asm.commons.Remapper remapper -> a
    void <init>(org.objectweb.asm.MethodVisitor,org.objectweb.asm.commons.Remapper) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    java.lang.Object[] remapFrameTypes(int,java.lang.Object[]) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitTypeInsn(int,java.lang.String) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void <clinit>() -> <clinit>
org.objectweb.asm.commons.ModuleHashesAttribute -> org.objectweb.asm.a.e:
    java.lang.String algorithm -> b
    java.util.List modules -> a
    java.util.List hashes -> b
    void <init>(java.lang.String,java.util.List,java.util.List) -> <init>
    void <init>() -> <init>
    org.objectweb.asm.Attribute read$77b048d0(org.objectweb.asm.ClassReader,int,int,char[]) -> a
    dev.binclub.binscure.processors.runtime.OpaqueRuntimeManagerKt write$15f7fde1$37f90659(org.objectweb.asm.ClassWriter) -> a
org.objectweb.asm.commons.ModuleRemapper -> org.objectweb.asm.a.f:
    org.objectweb.asm.commons.Remapper remapper -> a
    void <init>(org.objectweb.asm.ModuleVisitor,org.objectweb.asm.commons.Remapper) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
org.objectweb.asm.commons.Remapper -> org.objectweb.asm.a.g:
    void <init>() -> <init>
    java.lang.String mapDesc(java.lang.String) -> c
    org.objectweb.asm.Type mapType(org.objectweb.asm.Type) -> a
    java.lang.String mapType(java.lang.String) -> d
    java.lang.String[] mapTypes(java.lang.String[]) -> a
    java.lang.String mapMethodDesc(java.lang.String) -> e
    java.lang.Object mapValue(java.lang.Object) -> a
    java.lang.String mapSignature(java.lang.String,boolean) -> a
    java.lang.String mapMethodName(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String mapInvokeDynamicMethodName$7157d249(java.lang.String) -> a
    java.lang.String mapFieldName(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String map(java.lang.String) -> b
    void <init>(byte) -> <init>
    void visitFormalTypeParameter(java.lang.String) -> a
    org.objectweb.asm.commons.Remapper visitClassBound$5521f5ca() -> a
    org.objectweb.asm.commons.Remapper visitInterfaceBound$5521f5ca() -> b
    org.objectweb.asm.commons.Remapper visitSuperclass$5521f5ca() -> c
    org.objectweb.asm.commons.Remapper visitInterface$5521f5ca() -> d
    org.objectweb.asm.commons.Remapper visitParameterType$5521f5ca() -> e
    org.objectweb.asm.commons.Remapper visitReturnType$5521f5ca() -> f
    org.objectweb.asm.commons.Remapper visitExceptionType$5521f5ca() -> g
    void visitBaseType(char) -> a
    void visitTypeVariable(java.lang.String) -> b
    org.objectweb.asm.commons.Remapper visitArrayType$5521f5ca() -> h
    void visitClassType(java.lang.String) -> c
    void visitInnerClassType(java.lang.String) -> d
    void visitTypeArgument() -> a
    org.objectweb.asm.commons.Remapper visitTypeArgument$5b011877(char) -> a
    void visitEnd() -> b
org.objectweb.asm.commons.SignatureRemapper -> org.objectweb.asm.a.h:
    org.objectweb.asm.commons.Remapper signatureVisitor$7ce88a89 -> a
    org.objectweb.asm.commons.Remapper remapper -> b
    java.util.ArrayList classNames -> a
    void <init>(org.objectweb.asm.commons.Remapper,org.objectweb.asm.commons.Remapper) -> <init>
    void <init>(org.objectweb.asm.commons.Remapper,org.objectweb.asm.commons.Remapper,byte) -> <init>
    void visitClassType(java.lang.String) -> c
    void visitInnerClassType(java.lang.String) -> d
    void visitFormalTypeParameter(java.lang.String) -> a
    void visitTypeVariable(java.lang.String) -> b
    org.objectweb.asm.commons.Remapper visitArrayType$5521f5ca() -> h
    void visitBaseType(char) -> a
    org.objectweb.asm.commons.Remapper visitClassBound$5521f5ca() -> a
    org.objectweb.asm.commons.Remapper visitExceptionType$5521f5ca() -> g
    org.objectweb.asm.commons.Remapper visitInterface$5521f5ca() -> d
    org.objectweb.asm.commons.Remapper visitInterfaceBound$5521f5ca() -> b
    org.objectweb.asm.commons.Remapper visitParameterType$5521f5ca() -> e
    org.objectweb.asm.commons.Remapper visitReturnType$5521f5ca() -> f
    org.objectweb.asm.commons.Remapper visitSuperclass$5521f5ca() -> c
    void visitTypeArgument() -> a
    org.objectweb.asm.commons.Remapper visitTypeArgument$5b011877(char) -> a
    void visitEnd() -> b
org.objectweb.asm.signature.SignatureReader -> org.objectweb.asm.b.a:
    java.lang.String signatureValue -> a
    void <init>(java.lang.String) -> <init>
    void accept$2d8fde42(org.objectweb.asm.commons.Remapper) -> a
    int parseType$685fa320(java.lang.String,int,org.objectweb.asm.commons.Remapper) -> a
org.objectweb.asm.signature.SignatureWriter -> org.objectweb.asm.b.b:
    java.lang.StringBuilder stringBuilder -> a
    boolean hasFormals -> a
    boolean hasParameters -> b
    int argumentStack -> a
    void <init>() -> <init>
    void visitFormalTypeParameter(java.lang.String) -> a
    org.objectweb.asm.commons.Remapper visitClassBound$5521f5ca() -> a
    org.objectweb.asm.commons.Remapper visitInterfaceBound$5521f5ca() -> b
    org.objectweb.asm.commons.Remapper visitSuperclass$5521f5ca() -> c
    org.objectweb.asm.commons.Remapper visitInterface$5521f5ca() -> d
    org.objectweb.asm.commons.Remapper visitParameterType$5521f5ca() -> e
    org.objectweb.asm.commons.Remapper visitReturnType$5521f5ca() -> f
    org.objectweb.asm.commons.Remapper visitExceptionType$5521f5ca() -> g
    void visitBaseType(char) -> a
    void visitTypeVariable(java.lang.String) -> b
    org.objectweb.asm.commons.Remapper visitArrayType$5521f5ca() -> h
    void visitClassType(java.lang.String) -> c
    void visitInnerClassType(java.lang.String) -> d
    void visitTypeArgument() -> a
    org.objectweb.asm.commons.Remapper visitTypeArgument$5b011877(char) -> a
    void visitEnd() -> b
    java.lang.String toString() -> toString
    void endFormals() -> c
    void endArguments() -> d
org.objectweb.asm.tree.AbstractInsnNode -> org.objectweb.asm.c.a:
    int opcode -> a
    java.util.List visibleTypeAnnotations -> a
    java.util.List invisibleTypeAnnotations -> b
    org.objectweb.asm.tree.AbstractInsnNode previousInsn -> a
    org.objectweb.asm.tree.AbstractInsnNode nextInsn -> b
    int index -> b
    void <init>(int) -> <init>
    int getOpcode() -> a
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
    void acceptAnnotations(org.objectweb.asm.MethodVisitor) -> b
org.objectweb.asm.tree.AnnotationNode -> org.objectweb.asm.c.b:
    java.lang.String desc -> a
    java.util.List values -> a
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,byte) -> <init>
    void <init>(java.util.List) -> <init>
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
    void accept(org.objectweb.asm.AnnotationVisitor) -> a
    void accept(org.objectweb.asm.AnnotationVisitor,java.lang.String,java.lang.Object) -> a
org.objectweb.asm.tree.ClassNode -> org.objectweb.asm.c.c:
    int version -> a
    int access -> b
    java.lang.String name -> a
    java.lang.String originalName -> b
    java.lang.String signature -> c
    java.lang.String superName -> d
    java.util.List interfaces -> a
    java.lang.String sourceFile -> e
    java.lang.String sourceDebug -> f
    org.objectweb.asm.tree.ModuleNode module -> a
    java.lang.String outerClass -> g
    java.lang.String outerMethod -> h
    java.lang.String outerMethodDesc -> i
    java.util.List visibleAnnotations -> b
    java.util.List invisibleAnnotations -> c
    java.util.List visibleTypeAnnotations -> d
    java.util.List invisibleTypeAnnotations -> e
    java.util.List attrs -> f
    java.util.List innerClasses -> g
    java.lang.String nestHostClass -> j
    java.util.List nestMembers -> j
    java.util.List fields -> h
    java.util.List methods -> i
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
    void accept(org.objectweb.asm.ClassVisitor) -> a
org.objectweb.asm.tree.FieldInsnNode -> org.objectweb.asm.c.d:
    java.lang.String owner -> a
    java.lang.String name -> c
    java.lang.String desc -> b
    void <init>(int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.FieldNode -> org.objectweb.asm.c.e:
    int access -> a
    java.lang.String name -> a
    java.lang.String desc -> b
    java.lang.String signature -> c
    java.lang.Object value -> a
    java.util.List visibleAnnotations -> b
    java.util.List invisibleAnnotations -> c
    java.util.List visibleTypeAnnotations -> d
    java.util.List invisibleTypeAnnotations -> e
    java.util.List attrs -> a
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,byte) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
    void accept(org.objectweb.asm.ClassVisitor) -> a
org.objectweb.asm.tree.FrameNode -> org.objectweb.asm.c.f:
    int type -> c
    java.util.List local -> c
    java.util.List stack -> d
    void <init>() -> <init>
    void <init>(int,int,java.lang.Object[],int,java.lang.Object[]) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
    java.lang.Object[] asArray(java.util.List) -> a
org.objectweb.asm.tree.IincInsnNode -> org.objectweb.asm.c.g:
    int var -> c
    int incr -> d
    void <init>(int,int) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.InnerClassNode -> org.objectweb.asm.c.h:
    java.lang.String name -> a
    java.lang.String outerName -> b
    java.lang.String innerName -> c
    int access -> a
    void <init>(java.lang.String,java.lang.String,java.lang.String,int) -> <init>
    void accept(org.objectweb.asm.ClassVisitor) -> a
org.objectweb.asm.tree.InsnList -> org.objectweb.asm.c.i:
    int size -> a
    org.objectweb.asm.tree.AbstractInsnNode firstInsn -> a
    org.objectweb.asm.tree.AbstractInsnNode lastInsn -> b
    org.objectweb.asm.tree.AbstractInsnNode[] cache -> a
    void <init>() -> <init>
    int size() -> a
    org.objectweb.asm.tree.AbstractInsnNode getLast() -> a
    org.objectweb.asm.tree.AbstractInsnNode get(int) -> a
    int indexOf(org.objectweb.asm.tree.AbstractInsnNode) -> a
    void accept(org.objectweb.asm.MethodVisitor) -> a
    java.util.ListIterator iterator$5225d18b() -> a
    org.objectweb.asm.tree.AbstractInsnNode[] toArray() -> a
    void add(org.objectweb.asm.tree.AbstractInsnNode) -> a
    void add(org.objectweb.asm.tree.InsnList) -> a
    void insert(org.objectweb.asm.tree.AbstractInsnNode) -> b
    void insert(org.objectweb.asm.tree.InsnList) -> b
    void insert(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.InsnList) -> a
    void insertBefore(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.InsnList) -> b
    void remove(org.objectweb.asm.tree.AbstractInsnNode) -> c
    void removeAll$1385ff() -> b
    void resetLabels() -> a
org.objectweb.asm.tree.InsnList$InsnListIterator -> org.objectweb.asm.c.j:
    org.objectweb.asm.tree.AbstractInsnNode nextInsn -> a
    org.objectweb.asm.tree.AbstractInsnNode previousInsn -> b
    org.objectweb.asm.tree.AbstractInsnNode remove -> c
    org.objectweb.asm.tree.InsnList this$0 -> a
    void <init>(org.objectweb.asm.tree.InsnList) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
org.objectweb.asm.tree.InsnNode -> org.objectweb.asm.c.k:
    void <init>(int) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.IntInsnNode -> org.objectweb.asm.c.l:
    int operand -> c
    void <init>(int,int) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.InvokeDynamicInsnNode -> org.objectweb.asm.c.m:
    java.lang.String name -> b
    java.lang.String desc -> a
    org.objectweb.asm.Handle bsm -> a
    java.lang.Object[] bsmArgs -> a
    void <init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.JumpInsnNode -> org.objectweb.asm.c.n:
    org.objectweb.asm.tree.LabelNode label -> a
    void <init>(int,org.objectweb.asm.tree.LabelNode) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.LabelNode -> org.objectweb.asm.c.o:
    org.objectweb.asm.Label value -> a
    void <init>() -> <init>
    void <init>(org.objectweb.asm.Label) -> <init>
    int getType() -> b
    org.objectweb.asm.Label getLabel() -> a
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.LdcInsnNode -> org.objectweb.asm.c.p:
    java.lang.Object cst -> a
    void <init>(java.lang.Object) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.LineNumberNode -> org.objectweb.asm.c.q:
    int line -> c
    org.objectweb.asm.tree.LabelNode start -> a
    void <init>(int,org.objectweb.asm.tree.LabelNode) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.LocalVariableAnnotationNode -> org.objectweb.asm.c.r:
    java.util.List start -> b
    java.util.List end -> c
    java.util.List index -> d
    void <init>(int,org.objectweb.asm.TypePath,org.objectweb.asm.tree.LabelNode[],org.objectweb.asm.tree.LabelNode[],int[],java.lang.String) -> <init>
    void <init>(int,org.objectweb.asm.TypePath,org.objectweb.asm.tree.LabelNode[],org.objectweb.asm.tree.LabelNode[],int[],java.lang.String,byte) -> <init>
    void accept(org.objectweb.asm.MethodVisitor,boolean) -> a
org.objectweb.asm.tree.LocalVariableNode -> org.objectweb.asm.c.s:
    java.lang.String name -> a
    java.lang.String desc -> b
    java.lang.String signature -> c
    org.objectweb.asm.tree.LabelNode start -> a
    org.objectweb.asm.tree.LabelNode end -> b
    int index -> a
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,int) -> <init>
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.LookupSwitchInsnNode -> org.objectweb.asm.c.t:
    org.objectweb.asm.tree.LabelNode dflt -> a
    java.util.List keys -> d
    java.util.List labels -> c
    void <init>(org.objectweb.asm.tree.LabelNode,int[],org.objectweb.asm.tree.LabelNode[]) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.MethodInsnNode -> org.objectweb.asm.c.u:
    java.lang.String owner -> a
    java.lang.String name -> b
    java.lang.String desc -> c
    boolean itf -> a
    void <init>(int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.MethodNode -> org.objectweb.asm.c.v:
    int access -> a
    java.lang.String name -> a
    java.lang.String desc -> b
    java.lang.String signature -> c
    java.util.List exceptions -> a
    java.util.List parameters -> b
    java.util.List visibleAnnotations -> f
    java.util.List invisibleAnnotations -> g
    java.util.List visibleTypeAnnotations -> h
    java.util.List invisibleTypeAnnotations -> i
    java.util.List attrs -> c
    java.lang.Object annotationDefault -> a
    int visibleAnnotableParameterCount -> d
    java.util.List[] visibleParameterAnnotations -> a
    int invisibleAnnotableParameterCount -> e
    java.util.List[] invisibleParameterAnnotations -> b
    org.objectweb.asm.tree.InsnList instructions -> a
    java.util.List tryCatchBlocks -> d
    int maxStack -> b
    int maxLocals -> c
    java.util.List localVariables -> e
    java.util.List visibleLocalVariableAnnotations -> j
    java.util.List invisibleLocalVariableAnnotations -> k
    boolean visited -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],byte) -> <init>
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitCode() -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitEnd() -> b
    org.objectweb.asm.tree.LabelNode getLabelNode(org.objectweb.asm.Label) -> a
    org.objectweb.asm.tree.LabelNode[] getLabelNodes(org.objectweb.asm.Label[]) -> a
    java.lang.Object[] getLabelNodes(java.lang.Object[]) -> a
    void accept(org.objectweb.asm.ClassVisitor) -> a
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.MethodNode$1 -> org.objectweb.asm.c.w:
    org.objectweb.asm.tree.MethodNode this$0 -> a
    void <init>(org.objectweb.asm.tree.MethodNode) -> <init>
    boolean add(java.lang.Object) -> add
org.objectweb.asm.tree.ModuleExportNode -> org.objectweb.asm.c.x:
    java.lang.String packaze -> a
    int access -> a
    java.util.List modules -> a
    void <init>(java.lang.String,int,java.util.List) -> <init>
    void accept(org.objectweb.asm.ModuleVisitor) -> a
org.objectweb.asm.tree.ModuleNode -> org.objectweb.asm.c.y:
    java.lang.String name -> a
    int access -> a
    java.lang.String version -> b
    java.lang.String mainClass -> c
    java.util.List packages -> a
    java.util.List requires -> b
    java.util.List exports -> c
    java.util.List opens -> d
    java.util.List uses -> e
    java.util.List provides -> f
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
    void accept(org.objectweb.asm.ClassVisitor) -> a
org.objectweb.asm.tree.ModuleOpenNode -> org.objectweb.asm.c.z:
    java.lang.String packaze -> a
    int access -> a
    java.util.List modules -> a
    void <init>(java.lang.String,int,java.util.List) -> <init>
    void accept(org.objectweb.asm.ModuleVisitor) -> a
org.objectweb.asm.tree.ModuleProvideNode -> org.objectweb.asm.c.A:
    java.lang.String service -> a
    java.util.List providers -> a
    void <init>(java.lang.String,java.util.List) -> <init>
    void accept(org.objectweb.asm.ModuleVisitor) -> a
org.objectweb.asm.tree.ModuleRequireNode -> org.objectweb.asm.c.B:
    java.lang.String module -> a
    int access -> a
    java.lang.String version -> b
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void accept(org.objectweb.asm.ModuleVisitor) -> a
org.objectweb.asm.tree.MultiANewArrayInsnNode -> org.objectweb.asm.c.C:
    java.lang.String desc -> a
    int dims -> c
    void <init>(java.lang.String,int) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.ParameterNode -> org.objectweb.asm.c.D:
    java.lang.String name -> a
    int access -> a
    void <init>(java.lang.String,int) -> <init>
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.TableSwitchInsnNode -> org.objectweb.asm.c.E:
    int min -> c
    int max -> d
    org.objectweb.asm.tree.LabelNode dflt -> a
    java.util.List labels -> c
    void <init>(int,int,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode[]) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.TryCatchBlockNode -> org.objectweb.asm.c.F:
    org.objectweb.asm.tree.LabelNode start -> a
    org.objectweb.asm.tree.LabelNode end -> b
    org.objectweb.asm.tree.LabelNode handler -> c
    java.lang.String type -> a
    java.util.List visibleTypeAnnotations -> a
    java.util.List invisibleTypeAnnotations -> b
    void <init>(org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode,java.lang.String) -> <init>
    void updateIndex(int) -> a
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.TypeAnnotationNode -> org.objectweb.asm.c.G:
    int typeRef -> b
    org.objectweb.asm.TypePath typePath -> a
    void <init>(int,org.objectweb.asm.TypePath,java.lang.String) -> <init>
    void <init>(int,org.objectweb.asm.TypePath,java.lang.String,byte) -> <init>
org.objectweb.asm.tree.TypeInsnNode -> org.objectweb.asm.c.H:
    java.lang.String desc -> a
    void <init>(int,java.lang.String) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.VarInsnNode -> org.objectweb.asm.c.I:
    int var -> c
    void <init>(int,int) -> <init>
    int getType() -> b
    void accept(org.objectweb.asm.MethodVisitor) -> a
org.objectweb.asm.tree.analysis.Analyzer -> org.objectweb.asm.c.a.a:
    org.objectweb.asm.tree.analysis.Interpreter interpreter -> a
    org.objectweb.asm.tree.InsnList insnList -> a
    int insnListSize -> a
    java.util.List[] handlers -> a
    org.objectweb.asm.tree.analysis.Frame[] frames -> a
    org.objectweb.asm.tree.analysis.Subroutine[] subroutines -> a
    boolean[] inInstructionsToProcess -> a
    int[] instructionsToProcess -> a
    int numInstructionsToProcess -> b
    void <init>(org.objectweb.asm.tree.analysis.Interpreter) -> <init>
    org.objectweb.asm.tree.analysis.Frame[] analyze(java.lang.String,org.objectweb.asm.tree.MethodNode) -> a
    void findSubroutine(int,org.objectweb.asm.tree.analysis.Subroutine,java.util.List) -> a
    org.objectweb.asm.tree.analysis.Frame computeInitialFrame(java.lang.String,org.objectweb.asm.tree.MethodNode) -> a
    org.objectweb.asm.tree.analysis.Frame newFrame(org.objectweb.asm.tree.analysis.Frame) -> a
    void merge(int,org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Subroutine) -> a
org.objectweb.asm.tree.analysis.AnalyzerException -> org.objectweb.asm.c.a.b:
    long serialVersionUID -> serialVersionUID
    org.objectweb.asm.tree.AbstractInsnNode node -> a
    void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String) -> <init>
    void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Throwable) -> <init>
    void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value) -> <init>
org.objectweb.asm.tree.analysis.BasicInterpreter -> org.objectweb.asm.c.a.c:
    org.objectweb.asm.Type NULL_TYPE -> a
    void <init>() -> <init>
    org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type) -> a
    org.objectweb.asm.tree.analysis.BasicValue copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue) -> b
    org.objectweb.asm.tree.analysis.BasicValue binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List) -> a
    void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue merge(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.Value merge(org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List) -> a
    org.objectweb.asm.tree.analysis.Value ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> b
    org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode) -> a
    org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type) -> a
    void <clinit>() -> <clinit>
org.objectweb.asm.tree.analysis.BasicValue -> org.objectweb.asm.c.a.d:
    org.objectweb.asm.tree.analysis.BasicValue UNINITIALIZED_VALUE -> a
    org.objectweb.asm.tree.analysis.BasicValue INT_VALUE -> b
    org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE -> c
    org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE -> d
    org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE -> e
    org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE -> f
    org.objectweb.asm.tree.analysis.BasicValue RETURNADDRESS_VALUE -> g
    org.objectweb.asm.Type type -> a
    void <init>(org.objectweb.asm.Type) -> <init>
    int getSize() -> a
    boolean isReference() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.objectweb.asm.tree.analysis.BasicVerifier -> org.objectweb.asm.c.a.e:
    void <init>() -> <init>
    org.objectweb.asm.tree.analysis.BasicValue copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue) -> b
    org.objectweb.asm.tree.analysis.BasicValue binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List) -> a
    void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    boolean isArrayValue(org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue getElementValue(org.objectweb.asm.tree.analysis.BasicValue) -> a
    boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List) -> a
    org.objectweb.asm.tree.analysis.Value ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> b
org.objectweb.asm.tree.analysis.Frame -> org.objectweb.asm.c.a.f:
    org.objectweb.asm.tree.analysis.Value returnValue -> a
    org.objectweb.asm.tree.analysis.Value[] values -> a
    int numLocals -> b
    int numStack -> a
    void <init>(int,int) -> <init>
    void <init>(org.objectweb.asm.tree.analysis.Frame) -> <init>
    org.objectweb.asm.tree.analysis.Frame init(org.objectweb.asm.tree.analysis.Frame) -> a
    org.objectweb.asm.tree.analysis.Value getLocal(int) -> a
    void setLocal(int,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value pop() -> a
    void push(org.objectweb.asm.tree.analysis.Value) -> a
    void execute(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Interpreter) -> a
    void executeInvokeInsn(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,org.objectweb.asm.tree.analysis.Interpreter) -> a
    boolean merge(org.objectweb.asm.tree.analysis.Frame,org.objectweb.asm.tree.analysis.Interpreter) -> a
    boolean merge(org.objectweb.asm.tree.analysis.Frame,boolean[]) -> a
    java.lang.String toString() -> toString
org.objectweb.asm.tree.analysis.Interpreter -> org.objectweb.asm.c.a.g:
    void <init>() -> <init>
    org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type) -> a
    org.objectweb.asm.tree.analysis.Value newOperation(org.objectweb.asm.tree.AbstractInsnNode) -> a
    org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> b
    org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List) -> a
    void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value merge(org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
org.objectweb.asm.tree.analysis.SimpleVerifier -> org.objectweb.asm.c.a.h:
    org.objectweb.asm.Type currentClass -> b
    org.objectweb.asm.Type currentSuperClass -> c
    java.util.List currentClassInterfaces -> a
    boolean isInterface -> a
    java.lang.ClassLoader loader -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <init>(org.objectweb.asm.Type,org.objectweb.asm.Type,java.util.List,boolean) -> <init>
    void <init>(org.objectweb.asm.Type,org.objectweb.asm.Type,java.util.List,boolean,byte) -> <init>
    org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type) -> a
    boolean isArrayValue(org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue getElementValue(org.objectweb.asm.tree.analysis.BasicValue) -> a
    boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue merge(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue) -> a
    org.objectweb.asm.tree.analysis.BasicValue newArrayValue(org.objectweb.asm.Type,int) -> a
    org.objectweb.asm.Type getSuperClass(org.objectweb.asm.Type) -> a
    boolean isAssignableFrom(org.objectweb.asm.Type,org.objectweb.asm.Type) -> a
    java.lang.Class getClass(org.objectweb.asm.Type) -> a
    org.objectweb.asm.tree.analysis.Value merge(org.objectweb.asm.tree.analysis.Value,org.objectweb.asm.tree.analysis.Value) -> a
    org.objectweb.asm.tree.analysis.Value newValue(org.objectweb.asm.Type) -> a
org.objectweb.asm.tree.analysis.Subroutine -> org.objectweb.asm.c.a.i:
    org.objectweb.asm.tree.LabelNode start -> a
    boolean[] localsUsed -> a
    java.util.List callers -> a
    void <init>(org.objectweb.asm.tree.LabelNode,int,org.objectweb.asm.tree.JumpInsnNode) -> <init>
    void <init>(org.objectweb.asm.tree.analysis.Subroutine) -> <init>
    boolean merge(org.objectweb.asm.tree.analysis.Subroutine) -> a
org.objectweb.asm.tree.analysis.Value -> org.objectweb.asm.c.a.j:
    int getSize() -> a
org.objectweb.asm.util.ASMifier -> org.objectweb.asm.util.ASMifier:
    java.util.List FRAME_TYPES -> b
    java.util.Map CLASS_VERSIONS -> a
    java.lang.String name -> a
    int id -> b
    java.util.Map labelNames -> b
    void <init>() -> <init>
    void <init>(int,java.lang.String,int) -> <init>
    void main(java.lang.String[]) -> main
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    void visitClassAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    void visitClassEnd() -> a
    void visitMainClass(java.lang.String) -> c
    void visitPackage(java.lang.String) -> d
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitExportOrOpen(java.lang.String,java.lang.String,int,java.lang.String[]) -> a
    void visitUse(java.lang.String) -> e
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitModuleEnd() -> b
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> b
    void visitAnnotationEnd() -> c
    void visitFieldAttribute(org.objectweb.asm.Attribute) -> b
    void visitFieldEnd() -> d
    void visitParameter(java.lang.String,int) -> a
    void visitMethodAttribute(org.objectweb.asm.Attribute) -> c
    void visitCode() -> e
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.util.Printer visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitMethodEnd() -> f
    org.objectweb.asm.util.ASMifier visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.util.ASMifier visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.util.ASMifier visitTypeAnnotation(java.lang.String,int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> d
    org.objectweb.asm.util.ASMifier createASMifier(java.lang.String,int) -> a
    void appendAccessFlags(int) -> b
    void appendConstant(java.lang.Object) -> b
    void declareFrameTypes(int,java.lang.Object[]) -> a
    void appendFrameTypes(int,java.lang.Object[]) -> b
    void declareLabel(org.objectweb.asm.Label) -> b
    void appendLabel(org.objectweb.asm.Label) -> c
    org.objectweb.asm.util.Printer visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    org.objectweb.asm.util.Printer visitParameterAnnotation(int,java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.util.Printer visitMethodTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    org.objectweb.asm.util.Printer visitMethodAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitAnnotationDefault() -> a
    org.objectweb.asm.util.Printer visitFieldTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> d
    org.objectweb.asm.util.Printer visitFieldAnnotation(java.lang.String,boolean) -> b
    org.objectweb.asm.util.Printer visitArray(java.lang.String) -> a
    org.objectweb.asm.util.Printer visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    org.objectweb.asm.util.Printer visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.util.Printer visitClassTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> e
    org.objectweb.asm.util.Printer visitClassAnnotation(java.lang.String,boolean) -> c
    void <clinit>() -> <clinit>
org.objectweb.asm.util.ASMifierSupport -> org.objectweb.asm.util.a:
org.objectweb.asm.util.CheckAnnotationAdapter -> org.objectweb.asm.util.b:
    boolean useNamedValue -> a
    boolean visitEndCalled -> b
    void <init>(org.objectweb.asm.AnnotationVisitor) -> <init>
    void <init>(org.objectweb.asm.AnnotationVisitor,boolean) -> <init>
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
    void checkName(java.lang.String) -> a
    void checkVisitEndNotCalled() -> b
org.objectweb.asm.util.CheckClassAdapter -> org.objectweb.asm.util.CheckClassAdapter:
    int version -> a
    boolean visitCalled -> a
    boolean visitModuleCalled -> b
    boolean visitSourceCalled -> c
    boolean visitOuterClassCalled -> d
    boolean visitNestHostCalled -> e
    java.lang.String nestMemberPackageName -> a
    boolean visitEndCalled -> f
    java.util.Map labelInsnIndices -> a
    void <init>(org.objectweb.asm.ClassVisitor) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitNestMember(java.lang.String) -> b
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
    void checkState() -> b
    void checkAccess(int,int) -> a
    void checkFullyQualifiedName(int,java.lang.String,java.lang.String) -> a
    void checkClassSignature(java.lang.String) -> d
    void checkFieldSignature(java.lang.String) -> c
    int checkTypeParameters$505cff29(java.lang.String) -> a
    int checkTypeParameter(java.lang.String,int) -> a
    int checkReferenceTypeSignature(java.lang.String,int) -> b
    int checkClassTypeSignature(java.lang.String,int) -> c
    int checkTypeArguments(java.lang.String,int) -> d
    int checkTypeArgument(java.lang.String,int) -> e
    int checkTypeVariableSignature(java.lang.String,int) -> f
    int checkJavaTypeSignature(java.lang.String,int) -> g
    int checkSignatureIdentifier(java.lang.String,int) -> h
    int checkChar(char,java.lang.String,int) -> a
    char getChar(java.lang.String,int) -> a
    void checkTypeRef(int) -> a
    void main(java.lang.String[]) -> main
    void verify$5ac4c649$741a90cd(org.objectweb.asm.ClassReader,java.io.PrintWriter) -> a
org.objectweb.asm.util.CheckClassAdapter$1 -> org.objectweb.asm.util.c:
    void <init>(org.objectweb.asm.ClassVisitor) -> <init>
org.objectweb.asm.util.CheckFieldAdapter -> org.objectweb.asm.util.d:
    boolean visitEndCalled -> a
    void <init>(org.objectweb.asm.FieldVisitor) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
    void checkVisitEndNotCalled() -> b
org.objectweb.asm.util.CheckMethodAdapter -> org.objectweb.asm.util.e:
    int[] OPCODE_METHODS$51cc29ff -> a
    int version -> a
    int visibleAnnotableParameterCount -> b
    int invisibleAnnotableParameterCount -> c
    boolean visitCodeCalled -> a
    boolean visitMaxCalled -> b
    boolean visitEndCalled -> c
    int insnCount -> d
    java.util.Map labelInsnIndices -> a
    java.util.Set referencedLabels -> a
    int lastFrameInsnIndex -> e
    int numExpandedFrames -> f
    int numCompressedFrames -> g
    java.util.List handlers -> a
    void <init>(org.objectweb.asm.MethodVisitor,java.util.Map) -> <init>
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    void visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitCode() -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitEnd() -> b
    void checkVisitCodeCalled() -> c
    void checkVisitMaxsNotCalled() -> d
    void checkVisitEndNotCalled() -> e
    void checkFrameValue(java.lang.Object) -> c
    void checkOpcodeMethod$3594f952(int,int) -> e
    void checkSignedShort(int,java.lang.String) -> d
    void checkUnsignedShort(int,java.lang.String) -> e
    void checkConstant(java.lang.Object) -> b
    void checkLdcConstant(java.lang.Object) -> d
    void checkUnqualifiedName(int,java.lang.String,java.lang.String) -> a
    void checkIdentifier(int,java.lang.String,int,int,java.lang.String) -> a
    void checkMethodIdentifier(int,java.lang.String,java.lang.String) -> b
    void checkInternalName(int,java.lang.String,java.lang.String) -> c
    void checkInternalClassName(int,java.lang.String,java.lang.String) -> d
    void checkDescriptor$615fbea4(int,java.lang.String) -> b
    int checkDescriptor(int,java.lang.String,int,boolean) -> a
    void checkMethodDescriptor(int,java.lang.String) -> c
    void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.objectweb.asm.util.CheckMethodAdapter$Method -> org.objectweb.asm.util.f:
    int VISIT_INSN$4f589664 -> a
    int VISIT_INT_INSN$4f589664 -> b
    int VISIT_VAR_INSN$4f589664 -> c
    int VISIT_TYPE_INSN$4f589664 -> d
    int VISIT_FIELD_INSN$4f589664 -> e
    int VISIT_METHOD_INSN$4f589664 -> f
    int VISIT_JUMP_INSN$4f589664 -> g
    int[] $VALUES$51cc29ff -> a
    int[] values$455760a2() -> values$455760a2
    void <clinit>() -> <clinit>
org.objectweb.asm.util.CheckModuleAdapter -> org.objectweb.asm.util.g:
    boolean isOpen -> a
    org.objectweb.asm.util.CheckModuleAdapter$NameSet requiredModules -> a
    org.objectweb.asm.util.CheckModuleAdapter$NameSet exportedPackages -> b
    org.objectweb.asm.util.CheckModuleAdapter$NameSet openedPackages -> c
    org.objectweb.asm.util.CheckModuleAdapter$NameSet usedServices -> d
    org.objectweb.asm.util.CheckModuleAdapter$NameSet providedServices -> e
    int classVersion -> a
    boolean visitEndCalled -> b
    void <init>(org.objectweb.asm.ModuleVisitor,boolean) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
    void checkVisitEndNotCalled() -> b
org.objectweb.asm.util.CheckModuleAdapter$NameSet -> org.objectweb.asm.util.h:
    java.lang.String type -> a
    java.util.HashSet names -> a
    void <init>(java.lang.String) -> <init>
    void checkNameNotAlreadyDeclared(java.lang.String) -> a
org.objectweb.asm.util.Printer -> org.objectweb.asm.util.i:
    java.lang.String[] OPCODES -> a
    java.lang.String[] TYPES -> b
    java.lang.String[] HANDLE_TAG -> c
    int api -> a
    java.lang.StringBuilder stringBuilder -> a
    java.util.List text -> a
    void <init>(int) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitClassAnnotation(java.lang.String,boolean) -> c
    org.objectweb.asm.util.Printer visitClassTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> e
    void visitClassAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.util.Printer visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.util.Printer visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitClassEnd() -> a
    void visitMainClass(java.lang.String) -> c
    void visitPackage(java.lang.String) -> d
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> e
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitModuleEnd() -> b
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> b
    org.objectweb.asm.util.Printer visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitArray(java.lang.String) -> a
    void visitAnnotationEnd() -> c
    org.objectweb.asm.util.Printer visitFieldAnnotation(java.lang.String,boolean) -> b
    org.objectweb.asm.util.Printer visitFieldTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> d
    void visitFieldAttribute(org.objectweb.asm.Attribute) -> b
    void visitFieldEnd() -> d
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.util.Printer visitAnnotationDefault() -> a
    org.objectweb.asm.util.Printer visitMethodAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitMethodTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    org.objectweb.asm.util.Printer visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.util.Printer visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitMethodAttribute(org.objectweb.asm.Attribute) -> c
    void visitCode() -> e
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.util.Printer visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.util.Printer visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitMethodEnd() -> f
    void printList(java.io.PrintWriter,java.util.List) -> a
    void appendString(java.lang.StringBuilder,java.lang.String) -> a
    void main(java.lang.String[],java.lang.String,org.objectweb.asm.util.Printer,java.io.PrintWriter,java.io.PrintWriter) -> a
    void <clinit>() -> <clinit>
org.objectweb.asm.util.Textifier -> org.objectweb.asm.util.Textifier:
    java.util.List FRAME_TYPES -> b
    java.lang.String tab -> a
    java.lang.String tab2 -> b
    java.lang.String tab3 -> c
    java.lang.String ltab -> d
    java.util.Map labelNames -> a
    int access -> b
    int numAnnotationValues -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void main(java.lang.String[]) -> main
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitClassTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> e
    void visitClassAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    void visitClassEnd() -> a
    void visitMainClass(java.lang.String) -> c
    void visitPackage(java.lang.String) -> d
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitExportOrOpen(java.lang.String,java.lang.String,int,java.lang.String[]) -> a
    void visitUse(java.lang.String) -> e
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitModuleEnd() -> b
    void visit(java.lang.String,java.lang.Object) -> a
    void visitInt(int) -> b
    void visitLong(long) -> a
    void visitFloat(float) -> a
    void visitDouble(double) -> a
    void visitChar(char) -> a
    void visitShort(short) -> a
    void visitByte(byte) -> a
    void visitBoolean(boolean) -> a
    void visitType(org.objectweb.asm.Type) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> b
    void visitAnnotationEnd() -> c
    void visitAnnotationValue(java.lang.String) -> f
    org.objectweb.asm.util.Printer visitFieldTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> d
    void visitFieldAttribute(org.objectweb.asm.Attribute) -> b
    void visitFieldEnd() -> d
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.util.Printer visitMethodTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitMethodAttribute(org.objectweb.asm.Attribute) -> c
    void visitCode() -> e
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.util.Printer visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.util.Printer visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitMethodEnd() -> f
    org.objectweb.asm.util.Textifier visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.util.Textifier visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> d
    void appendAccess(int) -> c
    void appendRawAccess(int) -> d
    void appendDescriptor(int,java.lang.String) -> b
    void appendJavaDeclaration(java.lang.String,java.lang.String) -> b
    void appendLabel(org.objectweb.asm.Label) -> b
    void appendHandle(org.objectweb.asm.Handle) -> a
    void maybeAppendComma(int) -> e
    void appendTypeReference(int) -> f
    void appendFrameTypes(int,java.lang.Object[]) -> a
    org.objectweb.asm.util.Textifier addNewTextifier(java.lang.String) -> a
    org.objectweb.asm.util.Textifier createTextifier() -> a
    org.objectweb.asm.util.Printer visitParameterAnnotation(int,java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.util.Printer visitMethodAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.util.Printer visitAnnotationDefault() -> a
    org.objectweb.asm.util.Printer visitFieldAnnotation(java.lang.String,boolean) -> b
    org.objectweb.asm.util.Printer visitArray(java.lang.String) -> a
    org.objectweb.asm.util.Printer visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.util.Printer visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    org.objectweb.asm.util.Printer visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.util.Printer visitClassAnnotation(java.lang.String,boolean) -> c
    void <clinit>() -> <clinit>
org.objectweb.asm.util.TextifierSupport -> org.objectweb.asm.util.j:
org.objectweb.asm.util.TraceAnnotationVisitor -> org.objectweb.asm.util.k:
    org.objectweb.asm.util.Printer printer -> a
    void <init>(org.objectweb.asm.AnnotationVisitor,org.objectweb.asm.util.Printer) -> <init>
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
org.objectweb.asm.util.TraceClassVisitor -> org.objectweb.asm.util.l:
    java.io.PrintWriter printWriter -> a
    org.objectweb.asm.util.Printer p -> a
    void <init>(org.objectweb.asm.util.Printer,java.io.PrintWriter) -> <init>
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String) -> a
    void visitNestHost(java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitNestMember(java.lang.String) -> b
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
org.objectweb.asm.util.TraceFieldVisitor -> org.objectweb.asm.util.m:
    org.objectweb.asm.util.Printer p -> a
    void <init>(org.objectweb.asm.FieldVisitor,org.objectweb.asm.util.Printer) -> <init>
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitEnd() -> a
org.objectweb.asm.util.TraceMethodVisitor -> org.objectweb.asm.util.n:
    org.objectweb.asm.util.Printer p -> a
    void <init>(org.objectweb.asm.MethodVisitor,org.objectweb.asm.util.Printer) -> <init>
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    void visitAnnotableParameterCount(int,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitCode() -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void visitEnd() -> b
org.objectweb.asm.util.TraceModuleVisitor -> org.objectweb.asm.util.o:
    org.objectweb.asm.util.Printer p -> a
    void <init>(org.objectweb.asm.ModuleVisitor,org.objectweb.asm.util.Printer) -> <init>
    void visitMainClass(java.lang.String) -> a
    void visitPackage(java.lang.String) -> b
    void visitRequire(java.lang.String,int,java.lang.String) -> a
    void visitExport(java.lang.String,int,java.lang.String[]) -> a
    void visitOpen(java.lang.String,int,java.lang.String[]) -> b
    void visitUse(java.lang.String) -> c
    void visitProvide(java.lang.String,java.lang.String[]) -> a
    void visitEnd() -> a
org.objectweb.asm.util.TraceSignatureVisitor -> org.objectweb.asm.util.p:
    java.util.Map BASE_TYPES -> a
    boolean isInterface -> a
    java.lang.StringBuilder declaration -> a
    java.lang.StringBuilder returnType -> b
    java.lang.StringBuilder exceptions -> c
    boolean formalTypeParameterVisited -> b
    boolean interfaceBoundVisited -> c
    boolean parameterTypeVisited -> d
    boolean interfaceVisited -> e
    int argumentStack -> a
    int arrayStack -> b
    java.lang.String separator -> a
    void <init>(int) -> <init>
    void <init>(java.lang.StringBuilder) -> <init>
    void visitFormalTypeParameter(java.lang.String) -> a
    org.objectweb.asm.commons.Remapper visitClassBound$5521f5ca() -> a
    org.objectweb.asm.commons.Remapper visitInterfaceBound$5521f5ca() -> b
    org.objectweb.asm.commons.Remapper visitSuperclass$5521f5ca() -> c
    org.objectweb.asm.commons.Remapper visitInterface$5521f5ca() -> d
    org.objectweb.asm.commons.Remapper visitParameterType$5521f5ca() -> e
    org.objectweb.asm.commons.Remapper visitReturnType$5521f5ca() -> f
    org.objectweb.asm.commons.Remapper visitExceptionType$5521f5ca() -> g
    void visitBaseType(char) -> a
    void visitTypeVariable(java.lang.String) -> b
    org.objectweb.asm.commons.Remapper visitArrayType$5521f5ca() -> h
    void visitClassType(java.lang.String) -> c
    void visitInnerClassType(java.lang.String) -> d
    void visitTypeArgument() -> a
    org.objectweb.asm.commons.Remapper visitTypeArgument$5b011877(char) -> a
    void visitEnd() -> b
    java.lang.String getReturnType() -> a
    java.lang.String getExceptions() -> b
    void endFormals() -> c
    void startType() -> d
    void endType() -> e
    void <clinit>() -> <clinit>
