package cookiedragon.obfuscator.processors.exploit

import cookiedragon.obfuscator.CObfuscator
import cookiedragon.obfuscator.IClassProcessor
import cookiedragon.obfuscator.configuration.ConfigurationManager
import cookiedragon.obfuscator.configuration.ConfigurationManager.rootConfig
import cookiedragon.obfuscator.kotlin.wrap
import org.objectweb.asm.tree.ClassNode

/**
 * @author cookiedragon234 22/Jan/2020
 */
object InvalidSignatureExploit: IClassProcessor {
	override fun process(classes: MutableCollection<ClassNode>, passThrough: MutableMap<String, ByteArray>) {
		if (!rootConfig.crasher.enabled)
			return
		
		for (classNode in CObfuscator.getProgressBar("Invalidating Signatures").wrap(classes)) {
			if (CObfuscator.isExcluded(classNode))
				continue
			
			if (classNode.signature == null || classNode.signature.isEmpty()) {
				classNode.signature = "hi\u0000cookiedragon234"
			} else {
				for (method in classNode.methods) {
					if (method.signature == null || method.signature.isEmpty()) {
						method.signature = "hi\u0000cookiedragon234"
					} else {
						for (localVariable in method.localVariables ?: continue) {
							if (localVariable.signature == null || localVariable.signature.isEmpty()) {
								localVariable.signature = "hi\u0000cookiedragon234"
							}
						}
					}
				}
			}
		}
	}
}
