package dev.binclub.binscure.processors.exploit

import dev.binclub.binscure.CObfuscator
import dev.binclub.binscure.IClassProcessor
import dev.binclub.binscure.runtime.randomOpaqueJump
import dev.binclub.binscure.utils.InstructionModifier
import dev.binclub.binscure.utils.newLabel
import org.objectweb.asm.tree.ClassNode
import org.objectweb.asm.tree.InsnList
import org.objectweb.asm.tree.InvokeDynamicInsnNode
import org.objectweb.asm.tree.LabelNode

/**
 * @author cookiedragon234 09/Mar/2020
 */
object BadIndyConstant: IClassProcessor {
	override fun process(classes: MutableCollection<ClassNode>, passThrough: MutableMap<String, ByteArray>) {
		for (classNode in classes) {
			if (CObfuscator.isExcluded(classNode))
				continue
			
			for (method in classNode.methods) {
				if (CObfuscator.isExcluded(classNode, method))
					continue
				
				if (method.instructions?.first == null)
					continue
				
				val modifier = InstructionModifier()
				
				val label = newLabel()
				val list = InsnList().apply {
					add(randomOpaqueJump(label))
					add(InvokeDynamicInsnNode(null, null, null, null))
					add(label)
				}
				
				modifier.prepend(method.instructions.first, list)
				modifier.apply(method)
			}
		}
	}
}
